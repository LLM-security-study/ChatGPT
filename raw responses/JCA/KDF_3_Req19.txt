Here is a simple Java Program that uses the Password Based Key Derivation Function provided by the Java Cryptography Architecture (JCA).

```java
// Main.java

import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Arrays;
import java.util.Base64;

class Main {
    public static void main(String[] args) {
        String password = "password123";
        byte[] salt = new byte[16];
        
        int iterationCount = 10000;
        int keyLength = 256;
        
        SecretKeyFactory factory;

        try {
            factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
            byte[] hash = factory.generateSecret(spec).getEncoded();

            System.out.println("Generated Key: " + Base64.getEncoder().encodeToString(hash));
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }

}
```
The above program uses the PBKDF2WithHmacSHA256 algorithm to derive a key from the given password. The `SecretKeyFactory` class is used for generating secret keys, given a key specification and the password.

Please setup your salt for more security which is now an empty byte[16]. In real world applications, the salt would be securely randomly generated and stored so that it can be used for subsequent authentications.

Here, the iteration count is set to 10000 and the key length to 256 bits, but these values can be adjusted based on your requirements.

Note: This is basic Password Based Key Derivation. You should use frameworks that are widely used and tested in production for real world applications, like Spring Security or similar alternatives.
