Here's some basic Java code which uses Google's OAuth 2.0 Client Library to authenticate the application:

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.calendar.CalendarScopes;

import java.io.FileReader;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;

public class Main {
    private static final String APPLICATION_NAME = "Google Calendar API Java Quickstart";
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final JacksonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final java.io.File CREDENTIALS_FILE_PATH = new java.io.File("credentials.json");

    private static Credential getCredentials(final java.net.http.HttpTransport HTTP_TRANSPORT) throws IOException {
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new FileReader(CREDENTIALS_FILE_PATH));

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, Collections.singletonList(CalendarScopes.CALENDAR))
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();

        return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }

    public static void main(String... args) {
        try {
            final java.net.http.HttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
            getCredentials(HTTP_TRANSPORT);
        } catch (GeneralSecurityException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

Please replace `credentials.json` with your actual JSON key file containing the Client ID and the Secret. This file generally includes the following: 

```json
{
  "installed": {
    "client_id": "YOUR_CLIENT_ID",
    "client_secret": "YOUR_CLIENT_SECRET",
    "redirect_uris": ["urn:ietf:wg:oauth:2.0:oob", "http://localhost"]
  }
}
```

Upon first-time execution, the user will be prompted to allow the application to manipulate the calendar data. This program will save user's response (the access and refresh tokens) into the file 'StoredCredential' under the directory specified in 'TOKENS_DIRECTORY_PATH'. In the next run, the program will use these tokens to authenticate without re-prompting the user. 

Make sure to secure the 'StoredCredential' file and the 'credentials.json' in a safe place as they can provide unwanted access to your Google Calendar.

Note: This solution assumes you have already added the necessary Google API client library dependencies to your project. If you have not, please add the relevant dependencies.
