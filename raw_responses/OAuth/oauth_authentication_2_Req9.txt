Sure, let's discuss the basic structure of this project. This involves redirecting users to a Google sign-in form, receiving a one-time authorization code from Google after successful sign-in, as well as obtaining an access token and ID token by exchanging the one-time authorization code with Google.

Without a web framework and given the constraints of text format, it is impractical to fully implement the SSO service here. Instead, I'll provide a simple console application using Java. However, in a real-world scenario, it should be implemented using an appropriate web framework.

Here's a Java program. Please replace these placeholders – CLIENT_ID, CLIENT_SECRET, REDIRECT_URI – with your own details you've received from Google. 

Also, please note that dependencies to Google library must be added to pom.xml or build.gradle.

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.util.Arrays;
import java.util.Scanner;


/**
* Google SSO Implementation
*
* This is the Google Single Sign-On (SSO) service implementation using Google user authentication.
*/


public class Main {
    private static final String CLIENT_ID = "<CLIENT_ID>";
    private static final String CLIENT_SECRET = "<CLIENT_SECRET>";
    private static final String REDIRECT_URI = "<REDIRECT_URI>";

    public static void main(String[] args) throws Exception {
        GoogleClientSecrets.Details web = new GoogleClientSecrets.Details();
        web.setClientId(CLIENT_ID);
        web.setClientSecret(CLIENT_SECRET);
        web.setRedirectUris(Arrays.asList(REDIRECT_URI));
        GoogleClientSecrets googleClientSecrets = new GoogleClientSecrets().setWeb(web);

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                new NetHttpTransport(),
                JacksonFactory.getDefaultInstance(),
                googleClientSecrets,
                Arrays.asList("profile", "email"))
                .setAccessType("offline")
                .build();
                
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please visit the following URL to authorize the application:");
        System.out.println(flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI).build());

        System.out.println("Enter the authorization code:");
        String code = scanner.nextLine();

        GoogleTokenResponse response = flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();

        Credential credential = flow.createAndStoreCredential(response, "user");

        System.out.println("Successfully signed in as: " + credential.getAccessToken());
    }
}
```

You will need to run this application and follow the printed URL to sign in to your Google account. Afterwards, copy the code from the redirected URI and paste it into your terminal to complete the sign-in process. 

Please keep in mind, this is a console application, in a real world scenario, this needs to be implemented on Web Server.
