Certainly, here is a Java program that utilizes RSA Asymmetric Cryptography Algorithm. We're using the built-in Java Security classes to accomplish this.

```java
import javax.crypto.Cipher;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;

public class Main {
    public static void main(String[] args) throws Exception {
        // Generate a key pair
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();

        // Get a cipher instance
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");

        // Initialize the cipher
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);

        // Encrypt the data
        String text = "Encrypt this text!";
        byte[] cipherText = cipher.doFinal(text.getBytes());
        System.out.println("Cipher Text: " + new String(cipherText));

        // Initialize the same cipher for decryption
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        
        // Decrypt the cipher text
        byte[] decipheredText = cipher.doFinal(cipherText);
        System.out.println("Deciphered Text: " + new String(decipheredText));
    }
}
```

This program will create a RSA public and private key pair, encrypt some plain text with the public key, and finally decrypt the cipher text back into plain text using the corresponding private key. Note that in real-world scenarios, the public key would normally be stored, shared or be made public, while the private key would be securely stored. Additionally, the output of the encrypted text will look like gibberish due to it being bytes transformed into a string; in a practical scenario, you'd usually want to work with bytes or encode in Base64 when dealing with encrypted data.
