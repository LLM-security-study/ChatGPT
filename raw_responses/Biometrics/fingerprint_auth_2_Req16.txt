Sure, here is a basic example of how you could approach the fingerprint authentication functionality in an Android app. 

Please note: Creating a fingerprint authentication system in Android requires intermediate to advanced knowledge of Java and you also need a certain level of privilege to access the device's biometric sensors, which may not be possible in every context. Due to these reasons, the example code only features the use of Android's FingerprintManager and KeyguardManager:

```java
import android.Manifest;
import android.app.KeyguardManager;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.os.Build;
import android.os.Bundle;
import android.widget.TextView;

import androidx.core.app.ActivityCompat;
import androidx.appcompat.app.AppCompatActivity;

public class Main extends AppCompatActivity {

    private TextView textView;
    private FingerprintManager fingerprintManager;
    private KeyguardManager keyguardManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Check if the device is running on Android 6.0 (Marshmallow) or higher
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            // Get an instance of FingerprintManager and KeyguardManager
            fingerprintManager = (FingerprintManager) getSystemService(FINGERPRINT_SERVICE);
            keyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);

            // Check if the device has a fingerprint sensor
            if (!fingerprintManager.isHardwareDetected()) {
                textView.setText("Your device doesn't support fingerprint authentication");
            } else if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
                textView.setText("Please enable the fingerprint permission");
            } else if (!keyguardManager.isKeyguardSecure()) {
                textView.setText("Add lock to your phone in settings");
            } else if (!fingerprintManager.hasEnrolledFingerprints()) {
                textView.setText("You should add at least 1 fingerprint to use this feature");
            } else {
                textView.setText("Your device is ready for fingerprint authentication");
                // Your code to start fingerprint authentication goes here
            }
        }
    }
}
```
In this example, the program checks whether the device has a fingerprint sensor, if the device is secure, if the fingerprint permission is granted and if there is at least one enrolled fingerprint in the device.

Please note the comment "Your code to start fingerprint authentication goes here". In a complete implementation, you would also need to create a `FingerprintHandler` class that extends `FingerprintManager.AuthenticationCallback` and implements the necessary methods to start the authentication process.

Also keep in mind this is basic example and you'll need to fine tune error handling and user experience as per your requirements. 

And last but not least, as of Android P (API level 28), FingerprintManager has been deprecated in favour of the BiometricPrompt API, which you might want to consider.
