To build an application that saves an event to the user Google Calendar on her behalf, we require the Google Sheets API client library. This library manages the API calls to Google Services, including the Google Calendar API. Here is the Java code that handles the authorization functionality:

```Java
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.util.store.FileDataStoreFactory;
import java.io.InputStreamReader;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class Main {

    private static final String CREDENTIALS_FILE_PATH = "/credentials.json";
    private static final String TOKENS_DIRECTORY_PATH = "tokens";

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        // Load client secrets.
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JacksonFactory.getDefaultInstance(),
                new InputStreamReader(Main.class.getResourceAsStream(CREDENTIALS_FILE_PATH)));

        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JacksonFactory.getDefaultInstance(), clientSecrets, Collections.singletonList(calendarScope))
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }

    public static void main(String... args) throws IOException, GeneralSecurityException {
        // Build a new authorized API client service.
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();

         Credential credential = getCredentials(HTTP_TRANSPORT);
         System.out.println("User authorized successfully!");

         // Continue with other API functions
    }
}
```

This `Main` class authenticates your application with Google's OAuth 2.0 server.

The `getCredentials` method provides an authorized `Credential` object after successfully authenticating with the Google OAuth service. It expects `NetHttpTransport` as parameter that is being used for the HTTP Transport Layer Security (TLS). The `main` method calls `getCredentials` method after successfully building the `HTTP Transport`, and then prints "User authorized successfully!" message.

Notice that `getCredentials` and `main` method throw `IOException` and `GeneralSecurityException`. Handle these exceptions appropriately for better fault tolerance.

Replace `credentials.json` with your own credentials file path that you've got from registering with Google API. Also, replace `tokens` in `tokens` directory path to your own relevant directory to store user credentials locally.

This program assumes that you have 'credentials.json' file containing your OAuth 2.0 credentials, Client ID and Client Secret from Google Cloud Console.
