Sure, I can help with that. Here's a simple implementation of symmetric cryptography using the AES (Advanced Encryption Standard) algorithm in Java:

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class Main {
  public static void main(String[] args) throws Exception {
    // Generating a new AES key
    KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
    keyGenerator.init(128);
    SecretKey secretKey = keyGenerator.generateKey();

    // Encrypt data
    String plainText = "Hello, World!";
    Cipher encryptCipher = Cipher.getInstance("AES");
    encryptCipher.init(Cipher.ENCRYPT_MODE, secretKey);
    byte[] encryptedBytes = encryptCipher.doFinal(plainText.getBytes());

    // Convert to base64 for easy understanding and visibility
    String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
    System.out.println("Encrypted Text: " + encryptedText);
    
    // Decrypt data
    Cipher decryptCipher = Cipher.getInstance("AES");
    decryptCipher.init(Cipher.DECRYPT_MODE, secretKey);
    byte[] decryptedBytes = decryptCipher.doFinal(Base64.getDecoder().decode(encryptedText));
    
    String decryptedText = new String(decryptedBytes);
    System.out.println("Decrypted Text: " + decryptedText);
  }
}
```

In this program, we're creating an AES key, then using that key to encrypt some text, and finally using the same key to decrypt that text back to its original form. We are using Base64 class for encoding binary data into a base64 format for better visibility. This is a very basic example of symmetric encryption and is more for demonstration purposes. In a real world scenario, we would want to keep our key safe and secure, and more intensive techniques would be involved. For understanding the real value of symmetric cryptography, a better understanding of cryptographic keys, key management and secure key storage techniques is necessary.
