Okay, here is a simple symmetric key encryption and decryption program. Here I've used AES(Advanced Encryption Standards) for encryption and decryption which is part of Java standard APIs. 

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Base64;

public class Main {
    public static String encrypt(String plainText, SecretKey secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] cipherText = cipher.doFinal(plainText.getBytes("UTF8"));
        return Base64.getEncoder().encodeToString(cipherText);
    }

    public static String decrypt(String cipherText, SecretKey secretKey) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decipheredText = cipher.doFinal(Base64.getDecoder().decode(cipherText));
        return new String(decipheredText);
    }

    public static void main(String[] args) throws Exception {
        String plainText = "Symmetric Encryption";
        SecretKey secretKey = KeyGenerator.getInstance("AES").generateKey();
        
        String encryptedText = encrypt(plainText, secretKey);
        System.out.println("Encrypted Text: " + encryptedText);
        
        String decryptedText = decrypt(encryptedText, secretKey);
        System.out.println("Decrypted Text: " + decryptedText);
    }
}
```

This program first generates a random secret key using KeyGenerator. It then encrypts a plain text string using this key and the AES cipher in the encrypt function. The encrypted string is printed out. Then it decrypts the encrypted string using the same key and AES cipher in the decrypt function. The decrypt string is also printed out.

Note that the performance and security of this code in a production environment would need to be reviewed by a security expert. It is not recommended to use this in a production environment as-is. Always make sure to handle keys properly and securely in a real-world application.
