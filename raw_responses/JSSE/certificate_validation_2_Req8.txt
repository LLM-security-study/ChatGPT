Below is a basic example on how to open an SSL/TLS connection and validate the certificate using the Java standard APIs. In this case, our main class is "Main" and the main API we are using for implementation is Java's Secure Socket Extension (JSSE).

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.cert.Certificate;

public class Main {

    public static void main(String[] args) {
        String https_url = "https://www.google.com";
        URL url;
        try {

            url = new URL(https_url);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();

            System.out.println("Response Code : " + connection.getResponseCode());
            System.out.println("Cipher Suite : " + connection.getCipherSuite());
            System.out.println("\n");

            Certificate[] certs = connection.getServerCertificates();
            for (Certificate cert : certs) {
                System.out.println("Cert Type : " + cert.getType());
                System.out.println("Hash Code : " + cert.hashCode());
                System.out.println("Public Key Algorithm : " + cert.getPublicKey().getAlgorithm());
                System.out.println("Public Key Format : " + cert.getPublicKey().getFormat());
                System.out.println("\n");
            }

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SSLPeerUnverifiedException e) {
            e.printStackTrace();
        }

    }

}
```
This program basically opens a connection to provided HTTPS URL (in this case `https://www.google.com`) and retrieves some details from the certificate such as Certificate Type, Hash Code, Public Key Algorithm and Public Key Format.

Remember, certification authorities (CAs) issue digital certificates as a proof of identity, and these certificates are installed on the server side and help in establishing secure SSL/TLS connections. Hence, validating these certificates is an important part of SSL/TLS connections.

Please note that this is a basic example and real-world applications may need additional steps like checking with trusted CAs, ensuring certificate isn't expired, handling certificate revocation, checking hostname etc. for validating SSL/TLS connections.
