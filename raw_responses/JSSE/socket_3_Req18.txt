Here is a simple Java program which uses Java Secure Socket Extension (JSSE) API's SSLSocket:

```Java
import java.io.*;
import javax.net.ssl.*;

public class Main {
    public static void main(String[] args) {
        String host = "example.com";
        int port = 1234;

        try {
            // Obtain a SSLSocketFactory object
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();

            // Creates an unconnected socket
            SSLSocket sslSocket = (SSLSocket) factory.createSocket(host, port);

            // Initialize the IO streams for further communication
            PrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);
            BufferedReader input = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            // Send a request to the server
            output.println("Client Request");

            // Read the server response
            String response = input.readLine();
            System.out.println("Server Response: " + response);

            // Closing the streams and the socket
            output.close();
            input.close();
            sslSocket.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
This program securely communicates with a server at "example.com" using SSL, sending a message "Client Request" and printing out the server response. Exceptions are caught and handled appropriately. Be sure to replace "example.com" and the port number 1234 with your actual hostname and port number.

Remember to ensure that Java's SSL/TLS implementation can trust the server. If the remote server is using a self-signed certificate, you may have to import it into Java's keystore. Also, this is a simple implementation and industries uses a more robust and secure way to handle SSL Sockets and should follow the security guidelines strictly.
