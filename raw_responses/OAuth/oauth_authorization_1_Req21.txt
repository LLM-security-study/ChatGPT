In order to obtain permission from users to store files in their Google Drives, you need to use OAuth 2.0 which is used by Google for authorization.

Here is a simple Java program using the Google Authorization Library that will allow you to implement the authorization functionality. You will need to replace "YOUR_CLIENT_ID" and "YOUR_CLIENT_SECRET" with your Client ID and Client Secret:

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.List;

public class Main {
  private static final String APPLICATION_NAME = "Google Drive API Java";
  private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
  private static final String TOKENS_DIRECTORY_PATH = "tokens";
  
  private static final List<String> SCOPES = Collections.singletonList("https://www.googleapis.com/auth/drive.file");
  private static final String CREDENTIALS_FILE_PATH = "/credentials.json";
  
  private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException, GeneralSecurityException {
    // Load client secrets.
    InputStream in = Main.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
    GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

    // Build flow and trigger user authorization request.
    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
            HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
            .setAccessType("offline")
            .build();
    return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
  }

  public static void main(String... args) throws IOException, GeneralSecurityException {
    // Build a new authorized API client service.
    final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
    Credential credential = getCredentials(HTTP_TRANSPORT);
      
    // The authorization has completed successfully if the code execution reaches this point
    System.out.println("User successfully authorized the application!");
  }
}
```

This program performs the following:

- It loads client secrets from the `credentials.json` file that has to be in your project's resources folder.
- It requests the user to grant permissions to the application and gets authorization from the user.
- The app will open a browser window asking the user to authorize the access. Once the user has authorized the access, the authorization code will be received and exchanged for an access token.
- To avoid opening browser for permissions every time, the credentials are saved in a file called StoredCredential in a folder named tokens (TOKENS_DIRECTORY_PATH) and for each subsequent run, the credentials are picked up from this file.
- In the end, it tells that user has successfully authorized the application.

Please ensure the library's Maven dependency `com.google.api-client:google-api-client:1.31.2` exists in your project's build configuration file.
