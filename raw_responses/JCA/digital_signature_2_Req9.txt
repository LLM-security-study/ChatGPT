Below is an example program in Java that can be used to create a digital signature using a private key and then verify that signature using a public key. The program uses the RSA algorithm for the signing and verification process.

```Java
import java.security.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // Input the data to be signed
        byte[] data = "message".getBytes("UTF8");

        // Generate a RSA key pair
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(2048);
        KeyPair keyPair = keyGen.generateKeyPair();
        PrivateKey privateKey = keyPair.getPrivate();
        PublicKey publicKey = keyPair.getPublic();

        // Sign the data
        Signature rsa = Signature.getInstance("SHA1withRSA");
        rsa.initSign(privateKey);
        rsa.update(data);
        byte[] sig = rsa.sign();

        // Verify the signature
        rsa.initVerify(publicKey);
        rsa.update(data);
        boolean verifies = rsa.verify(sig);

        System.out.println("Signature:" + new String(sig, "UTF8"));
        System.out.println("Verification result: " + verifies);
    }
}
```

This program begins by creating a RSA key pair. It then uses the private key to sign some data and the public key to verify that the signed data is correct. The results are then outputted to the console.
