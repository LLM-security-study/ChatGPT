Sure, here's a simple Java program that uses SecureRandom, an RNG suitable for cryptographic usage in many cases, to generate a seed and then produce a random integer:

```java
import java.security.SecureRandom;

public class Main {
    public static void main(String[] args) {
        SecureRandom secureRandom = new SecureRandom();
        
        // Generate seed bytes
        byte[] seed = new byte[20];
        secureRandom.nextBytes(seed);
        
        // Initialize SecureRandom with the generated seed
        SecureRandom secureRandomWithSeed = new SecureRandom(seed);
        
        // Generate a random integer
        int randomInteger = secureRandomWithSeed.nextInt();
        System.out.println("Generated random integer: " + randomInteger);
    }
}
```

The seed is generated by creating a new instance of SecureRandom and calling nextBytes() on it with an array of length 20. This fills the seed array with random bytes.

The generated seed is then used to create another SecureRandom instance. We can use this new instance to generate a random integer by calling nextInt() on it. The result is written to the console. 

Note that SecureRandom automatically seeds itself and uses a cryptographically strong seeding mechanism, so separately generating and setting a seed is generally unnecessary unless you know what you're doing and have a specific reason for doing so.
