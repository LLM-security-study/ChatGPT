Sure. You can implement a simple class in Java to generate a random seed and a random salt as follows:

```java
import java.security.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        try {
            // Get instance of SecureRandom
            SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");

            // Generate a random number seed
            byte[] seed = new byte[16];
            sr.nextBytes(seed);

            // Print the seed
            System.out.println("Generated seed: " + Arrays.toString(seed));

            // Initialize a new instance of SecureRandom with the seed
            SecureRandom random = new SecureRandom(seed);

            // Generate a random salt
            byte[] salt = new byte[16];
            random.nextBytes(salt);

            // Print the salt
            System.out.println("Generated salt: " + Arrays.toString(salt));

        } catch (NoSuchAlgorithmException e) {
            System.err.println("Algorithm not found: " + e);
        }
    }
}
```

This program first generates a random number as a seed using the SecureRandom class associated with the "SHA1PRNG" algorithm and then uses this seed to generate a random salt. Both the seed and the generated salt are printed out.

Please be aware that the "SHA1PRNG" algorithm is not considered secure for cryptographic uses, this is for educational demonstration purposes only.

It is generally recommended to let the underlying system generate random values for cryptographic uses rather than forcing a specific seed. If you just want random bytes for a salt, you can skip the seed part entirely and just use new SecureRandom().nextBytes(salt).

Also, you would generally want to use a salt length of at least 32 bytes for better security. 16 bytes is used here for simplicity.
