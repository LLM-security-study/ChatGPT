Here is a simplified Java program to import a certificate into a Java KeyStore:

```java
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

public class Main {
    public static void main(String[] args) {
        try {
            // Load the keystore
            String storepass = "mystorepass";
            String keypass = "mykeypass";
            String alias = "myalias";
            String storename = "mykeystore";
            String certfile = "mycertificate.crt";

            KeyStore ks = KeyStore.getInstance("JKS");
            ks.load(null, storepass.toCharArray());

            // Load the certificate
            FileInputStream fis = new FileInputStream(certfile);
            CertificateFactory cf = CertificateFactory.getInstance("X.509");
            Certificate cert = cf.generateCertificate(fis);
            fis.close();

            // Store the certificate into the keystore
            KeyStore.PrivateKeyEntry pkEntry = new KeyStore.PrivateKeyEntry(null, new Certificate[]{cert});
            KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(keypass.toCharArray());
            ks.setEntry(alias, pkEntry, protParam);

            // Save the keystore to a file
            FileOutputStream fos = new FileOutputStream(storename);
            ks.store(fos, storepass.toCharArray());
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

Please note that this code will not compile since one cannot create `KeyStore.PrivateKeyEntry` with null private key. The SSL certificate file and the keystore file are expected to already exist and you need to replace the strings with the correct values (e.g., storepass, keypass, alias, storename, certfile).

This is a very basic way to do it. In a real-world situation, you'd handle exceptions more carefully. You would also probably not have passwords and file names hard-coded.

In this case, You have to replace `null` in `KeyStore.PrivateKeyEntry pkEntry = new KeyStore.PrivateKeyEntry(null, new Certificate[]{cert});` with your own private key.
