Sure, here is a basic implementation of a Java program using SSL Sockets for communication. The main APIs we are using for the task are from the javax.net.SSL package, specifically the SSLSocket and SSLSocketFactory classes.

This example aims to create a client program that connects to a remote server on a specific port. This is a basic representation and does not tackle error handling and data usage. 

Remember to replace "hostname" with your specific server information, as well as the port number "1234".

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
  public static void main(String[] args) {
      String hostname = "your server"; // Replace with your server
      int port = 1234; // Replace with your port
      
      try {
        SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
        SSLSocket socket = (SSLSocket) factory.createSocket(hostname, port);

        // Send request to the server
        PrintWriter out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()));
        out.println("Hello Server");
        out.flush();

        // Receive response from the server
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        String line = in.readLine();
        System.out.println("Received from server: " + line);

        in.close();
        out.close();
        socket.close();

      } catch (IOException e) {
          System.out.println("Failed to create SSL Socket");
          e.printStackTrace();
      }
  }
}
```

This is only a basic connection. If you need to exchange data with the remote server, you will need to implement additional data handling and possibly multi-threading. Also, remember to handle exceptions appropriately for real-world applications.
