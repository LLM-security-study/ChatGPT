Hostname verification in SSL/TLS communication is an essential procedure to verify the identity of the server to which the client endpoint is establishing a connection. Java Secure Socket Extension (JSSE) provides a functionality through the `javax.net.ssl.HostnameVerifier` interface which can be overridden to conduct this operation.

Here's a possible implementation:

```java
import java.net.*;
import javax.net.ssl.*;

public class Main {
    public static void main(String[] args) {
        String targetUrl = "https://www.example.com";
        
        try {
            URL url = new URL(targetUrl);
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, null, new java.security.SecureRandom());
            
            conn.setSSLSocketFactory(sslContext.getSocketFactory());
            // An all-trusting host name verifier
            conn.setHostnameVerifier(new MyHostnameVerifier());
            
            conn.connect();
            System.out.println("Successfully connected to " + url.getHost());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Custom class to implement hostname verification.
    private static class MyHostnameVerifier implements HostnameVerifier {
        public boolean verify(String hostname, SSLSession session) {
            // Custom verification logic
            // Here, we simply trust every server, which may not be secure in production.
            return true;
        }
    }
}
```

In this illustration, the `Main` class connects to a site via HTTPS and uses a custom `HostnameVerifier`(`MyHostnameVerifier`). Please note the `verify` method of `MyHostnameVerifier` is always returning `true`, regardless of the hostname. This is not suitable in production setting and insecure. 

You should replace it with an actual implementation - typically, this method should return `true` if the hostname is listed on the server's certificate, and `false` otherwise. The purpose of this method is to prevent attacks such as man-in-the-middle attacks, where an attacker intercepts your communication with the server and poses as the server.
