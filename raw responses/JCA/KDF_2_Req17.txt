Sure, here is a basic Java program that uses the Password-Based Key Derivation Function 2 (PBKDF2) to generate a secret key from a user's password using Java standard APIs:

```java
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Base64;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your password:");
        String password = scanner.nextLine();

        byte[] salt = new byte[16]; // Use a salt in practice!

        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128); // 128 bit
        SecretKeyFactory factory = null;
        byte[] secretKey = new byte[0];
        try {
            factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            secretKey = factory.generateSecret(spec).getEncoded();
        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }

        System.out.println("Your secret key:");
        System.out.println(Base64.getEncoder().encodeToString(secretKey));
    }
}
```

This program will read a password from the user's input and generate a secret key from it. The generated key is then output in a Base64 encoded form.

Note: 
1. In real practice, a unique and secret salt should be used for each user in order to protect against Rainbow Table attacks. 
2. The generated keys should be stored securely and never printed out as in this example.
3. Make sure to handle the exceptions properly as per your application need.
4. Preferably, make sure the passwords are entered in a much more secure way like char[] array which can be cleared, rather than String which are stored in string pool.

