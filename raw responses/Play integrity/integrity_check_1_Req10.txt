To implement this, we will make use of Google Play's SafetyNet Attestation API. This API helps evaluate whether the device on which the app is running is a Certified Android device. It helps to verify the Compatibility Test Suite (CTS) profile, which can verify that the device hasn't been tampered with.

Before you begin, you need to enable the Android Device Verification API for your project in the Google API Console.

Here's a simple Java code snippet that demonstrates how you can use the SafetyNet Client and the Attestation API:

```Java
import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GoogleApiAvailability;
import com.google.android.gms.common.api.CommonStatusCodes;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import java.nio.charset.Charset;

public class MainActivity extends AppCompatActivity {
    private static final String API_KEY = "your_api_key";
    private GoogleApiClient mGoogleApiClient;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(SafetyNet.API)
                .build();
        mGoogleApiClient.connect();

        SafetyNet.getClient(this).attest("sample_nonce".getBytes(Charset.forName("UTF-8")), API_KEY)
        .addOnSuccessListener(this,  
            new OnSuccessListener<SafetyNetApi.AttestationResponse>() {
                @Override
                public void onSuccess(SafetyNetApi.AttestationResponse response) {
                    // Indicates communication with the service was successful.
                    // Verify that the payload in the response matches the nonce that was sent in the request.
                    if (response.getJwsResult().equals("sample_nonce")) {
                        // The app is interacting with its unmodified binary.
                    } else {
                        // The app is not interacting with its unmodified binary.
                    }
                }
            })
        .addOnFailureListener(this, new OnFailureListener() {
            @Override
            public void onFailure(@NonNull Exception e) {
                // An error occurred while communicating with the service.
                if (e instanceof ApiException) {
                    ApiException apiException = (ApiException) e;
                    int statusCode = apiException.getStatusCode();
                    // Handle error...
                } else {
                    // A different, unknown type of error occurred.
                    Log.d(TAG, "Error: " + e.getMessage());
                }
            }
        });
    }
}
```

In the above code, replace "your_api_key" with your actual API key. A nonce is a random value that you generate in your app, sent to the server, and then checked when the data returns. SafetyNet sends the nonce value, signed with a private key known only to Google, back to your server.

In a production environment, we recommend not relying solely on the attestation API, but also employing server-side signals (like how often you see the same Android, Play Services, and app versions/configuration from an app instance) in order to help detect anomalies.

