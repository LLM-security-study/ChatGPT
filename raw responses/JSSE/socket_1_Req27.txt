Creating an SSL Socket in Java can be as simple as using the Java Secure Socket Extension (JSSE), which is integrated into Java (J2SE 1.4 and later). SSL Sockets are mostly identical to regular sockets, but they add a layer of encryption to protect the data.

However, remember the setup for SSL is more complex than for plain sockets and usually requires the presence of certificates for secure communication. Also, note that input/output over SSL Sockets is highly sensitive to incorrect usage: all input/output must be executed strictly in a demand driven way.

Here is a basic example of a Java SSL client that sends a simple request to a server and prints out the server's response. In this example we will be creating SSLContext, SSLSocketFactory & SSLSocket which are mainly required for SSL communication.

```java
import java.io.*;
import javax.net.ssl.*;

public class Main {
    public static void main(String[] args) {
        try {
            // Create SSL context and initialize it with a TrustManager array
            SSLContext sslContext = SSLContext.getInstance("TLS");
            TrustManager[] trustManager = new TrustManager[] {
                new X509TrustManager() {
                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }
                    public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {}
                    public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {}
                }
            };
            sslContext.init(null, trustManager, new java.security.SecureRandom());

            // Get SSLSocketFactory from the SSLContext
            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

            // Create SSLSocket (our secure instance of a socket)
            SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket("SERVER IP", SERVER_PORT);

            // Initialize the streams for reading/writing data from/to the server
            PrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);
            BufferedReader input = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            // Write a message to the server
            output.println("Hello Server");

            // Read the response from the server
            String line = input.readLine();
            System.out.println("Server Response: " + line);

            // Close the streams and the socket
            output.close();
            input.close();
            sslSocket.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }
}
```
Replace "SERVER IP" and "SERVER PORT" with the correct server IP and port that you want to connect with securely. Please note that for SSL communication both client and server require SSL Certificate. If server is not your local server, then server certificate may required to be installed in Java keystore.

Important: This basic example does not validate server certificates (hence the TrustManager does not do anything in its checkServerTrusted method), which in terms of SSL, it is highly insecure! Always validate certificates in a production environment to ensure a secure SSL connection.
