Sure, here is a simplified example of how you can do this, using the Google OAuth Java Client and Google API Client libraries. This program is a draft and should not be put into production without appropriately addressing error handling and security considerations. 

```java
// Import required libraries
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.FileReader;
import java.io.IOException;

// Main class of the program
public class Main extends HttpServlet {

    // Load the client secrets JSON file
    private GoogleClientSecrets clientSecrets;

    // Construct the Google Authorization Code Flow object
    private GoogleAuthorizationCodeFlow flow;

    // JSON factory
    private JsonFactory JSON_FACTORY = new JacksonFactory();

    // Path to the Client Secrets
    private static final String CLIENT_SECRET_FILE = "path/to/your/client_secrets.json";

    // Redirect URI
    private static final String REDIRECT_URI = "your/redirect/uri";

    // Constructor
    public Main() throws IOException {
        clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new FileReader(CLIENT_SECRET_FILE));
        flow = new GoogleAuthorizationCodeFlow.Builder(new NetHttpTransport(), JSON_FACTORY, clientSecrets,
                // request these scopes from the user
                Collections.singletonList("https://www.googleapis.com/auth/userinfo.profile"))
                .setAccessType("offline").setApprovalPrompt("force").build();
    }

    // Function to authenticate the user
    protected void doGet(HttpServletRequest request, HttpServletResponse response){

        // get the code from the request and authenticate the user with it
        String code = request.getParameter("code");

        try {
            Credential credential = flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();

            // credential.getAccessToken() now contains your access token, and
            // credential.getRefreshToken() contains your refresh token
            // You can also get the expiry time of the token

            // handle the authenticated user here or redirect as needed

        } catch (IOException e) {
            // handle exceptions properly in your app, print statement here just for debugging purposes
            System.out.println("Exception during Authentication: " + e.getMessage());

        }
    }
}
```

Please replace all the fillers such as path of your client secret JSON file, redirect URI, and required scopes with actual values according to your requirements.

Ensure you have added the necessary dependencies for Google OAuth Java Client (e.g., artifactId: google-oauth-client-servlet and google-http-client-jackson2) in your build.gradle or pom.xml for Maven projects. 

Do note that this is a fairly complex program and requires a detailed understanding of Google OAuth 2.0 flow, servlets, and http requests, so please take time to understand this and improve and customize as needed.
