In Java, a common way to implement certificate validation in SSL/TLS is by using the java.net.ssl API. Here's a basic example where we setup an SSLContext with a TrustManager that will perform certificate validation.

```java
import javax.net.ssl.*;
import java.security.cert.X509Certificate;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.CertificateException;

public class Main {
    public static void main(String[] args) {
        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");

            // Get a reference to the default trust manager
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init((KeyStore) null);

            TrustManager[] defaultTrustManagers = trustManagerFactory.getTrustManagers();

            // Wrap default trust manager in one that does some validation
            TrustManager[] trustManagers = new TrustManager[] {
                    new X509TrustManager() {
                        @Override
                        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                            ((X509TrustManager) defaultTrustManagers[0]).checkClientTrusted(chain, authType);
                            // Place additional validation here
                        }

                        @Override
                        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                            ((X509TrustManager) defaultTrustManagers[0]).checkServerTrusted(chain, authType);
                            // Place additional validation here
                        }

                        @Override
                        public X509Certificate[] getAcceptedIssuers() {
                            return ((X509TrustManager) defaultTrustManagers[0]).getAcceptedIssuers();
                        }
                    }
            };

            // Create new SSL context with our trust manager
            sslContext.init(null, trustManagers, new SecureRandom());

            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

            // This can be used to create new SSL sockets
            // SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(socket, host, port, autoClose);
            
            // Validate certificates when you are making SSL/TLS connections with that socket.

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

I've commented out the last line of creating an SSL socket as the parameters would be specific to your application. Also note that the checkClientTrusted and checkServerTrusted methods only forward to the default trust manager in this example. You would replace these (or add to them) your certificate validation logic.

Remember, never use a trust manager like this in production that simply accepts everything. It defeats the purpose of SSL/TLS. This is only an outline of how you'd implement more functional trust management.

Please apply these with the taking care of exceptions and handling many other production issues.
