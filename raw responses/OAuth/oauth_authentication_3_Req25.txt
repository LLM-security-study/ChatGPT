To implement Single-Sign-On (SSO) using Google accounts, we primarily require 'Google OAuth2' for authentication. The application needs to redirect users to Google's authorization server, where they can log in. After successful login, Google redirects them back to the application and provides an authorization code. We then use this code to request an access token, which is used to access user info.

Here's your Java program:

```java
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest;
import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.FileReader;
import java.io.IOException;

/* A program to enable Single Sign-On (SSO) using Google accounts. 
 * This program is designed to provide users the ability to log in by using their Google account credentials. 
 * It uses Google's OAuth2 functionality to authenticate the user and then retrieve user information on successful authentication.
 */

public class Main {
    private static final String CLIENT_SECRET_FILE = "/path/to/your/client_secret.json";
    private static final String REDIRECT_URI = "your registered redirect URI";

    public static void main(String[] args) throws IOException {
        // Load client secrets
        GoogleClientSecrets secrets = GoogleClientSecrets.load(
		        JacksonFactory.getDefaultInstance(), 
		        new FileReader(CLIENT_SECRET_FILE));
        
        // Set up authorization code flow
        AuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
		        new NetHttpTransport(), 
		        JacksonFactory.getDefaultInstance(), 
		        secrets, 
		        // Request user's email address
		        Collections.singleton("https://www.googleapis.com/auth/userinfo.email"))
		        .setAccessType("online")
		        .setApprovalPrompt("auto").build();

        // Build the authorization URL
        String url = flow.newAuthorizationUrl()
		        .setRedirectUri(REDIRECT_URI)
		        .setAccessType("offline")
		        .build();
        
        // Redirect user to the authorization URL
        response.sendRedirect(url);
  
        // Await the callback on the redirect URI, then exchange the authorization code for a token
        String code = request.getParameter("code");
        TokenResponse tokenResponse = flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();

        // Extract the access token.
        String accessToken = tokenResponse.getAccessToken();
    }
}
```
Please replace "/path/to/your/client_secret.json" with your actual file path, and "your registered redirect URI" with your actual redirect URI. Also, the code I provided is a basic one. It doesn't handle exceptions and needs to be incorporated into a servlet or similar to work correctly due to the `response.sendRedirect(url)` line. Hence, the working of this program is heavily dependent on your existing code base.

Important note: You must ensure that you have set up OAuth 2.0 correctly in Google API console and added right authorized redirect URIs there. The Google Client Library where these classes came from can be found here: https://developers.google.com/api-client-library/java/google-http-java-client/
