Here's a basic example of a Java program that verifies the server hostname in an SSL/TLS communication. 

This program uses standard APIs from the Java Secure Socket Extension (JSSE) which provides functionality for data encryption, server authentication, and secure communication.

See the example below, where we're going to create a custom hostname verifier and use it.

```Java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.net.URL;

class Main {
    public static void main(String[] args) {
        try {
            SSLSocketFactory factory = (SSLSocketFactory)SSLSocketFactory.getDefault();

            SSLSocket socket = (SSLSocket)factory.createSocket("www.example.com", 443);
            String[] suites = socket.getSupportedCipherSuites();
            socket.setEnabledCipherSuites(suites);
            socket.startHandshake();

            SSLSession session = socket.getSession();
            String host = session.getPeerHost();

            URL url = new URL("https://" + host);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setHostnameVerifier((hostname, session1) -> hostname.equals(host));
            System.out.println("Is Hostname Verified: " + (connection.getResponseCode() == 200));

            socket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

This program connects to the server via SSL, then gets the hostname from the SSLSession object and verifies if the server hostname matches the expected hostname.

Please note that actual server hostname verification may involve more sophisticated rules. This is a simplified example. Please replace "www.example.com" with the actual server hostname you want to verify and properly handle exceptions that may be thrown.
