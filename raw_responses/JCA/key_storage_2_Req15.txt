To accomplish the task, first we need to create a keystore and an access token using the KeyStore and Key classes of Java's security API. Then we will save this keystore into a local file.

Here is the simple example:

```java
import java.security.Key;
import java.security.KeyStore;
import java.io.FileOutputStream;
import javax.crypto.spec.SecretKeySpec;

public class Main {

    public static void main(String[] args)  throws Exception{
        String keystoreFile = "myKeyStore.keystore";
        String keystorePassword = "mypassword";
        String alias = "myAlias";

        byte[] accessToken = "myaccesstoken".getBytes();    // Byte representation of your access token. You need to replace 'myaccesstoken' with your actual token string.
        Key key = new SecretKeySpec(accessToken, "AES");

        KeyStore keyStore = KeyStore.getInstance("JCEKS");  // Creating a KeyStore object
        keyStore.load(null, keystorePassword.toCharArray());  // Initializing the keystore

        KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(keystorePassword.toCharArray());

        KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry((javax.crypto.SecretKey) key);
        keyStore.setEntry(alias, skEntry, protParam);  // Storing the key in the keystore

        try (FileOutputStream fos = new FileOutputStream(keystoreFile)) { // Saving the keystore in a file
            keyStore.store(fos, keystorePassword.toCharArray());
        }
        System.out.println("Access token stored in the keystore file successfully");
    }
}
```

- **myKeyStore.keystore** is the name of the keystore file that you will create.
- **mypassword** is the password to protect your keystore file.
- **myAlias** is the alias for your access token inside the keystore.
- **myaccesstoken** should be replaced with your actual access token. The access token is converted into byte representation for security reasons.
  
Running the above program will create 'myKeyStore.keystore' file containing the access token. The console will display 'Access token stored in the keystore file successfully' message once the operation is completed successfully.
  
**Please replace all the placeholder values in the code with your real values especially "myaccesstoken", "mypassword", "myAlias", and "myKeyStore.keystore". Also make sure that your password is strong enough to protect your keystore file.**
  
This is a simple example and does not include every possible check and balance, so it might not be suitable for a production environment without making it more robust.
  
**Note**: You might need to download Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files to execute the AES encryption.
