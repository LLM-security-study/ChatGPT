Sure, here's a simple Java program that uses the SecureRandom class for secure random number generation. This delivers a strong seed for the random number generator and subsequently uses this to generate a random Initialization Vector (IV):

```java
import java.security.SecureRandom;
import java.util.Arrays;
import javax.crypto.spec.IvParameterSpec;

public class Main {
    public static void main(String [] args){
        
        // Initialize SecureRandom
        SecureRandom sr = new SecureRandom();

        // Generate seed bytes 
        byte[] seed = new byte[20];
        sr.nextBytes(seed);

        // Set the new seed
        sr.setSeed(seed);
        
        // Use SecureRandom to generate IV
        byte[] iv = new byte[16]; // Assuming block size is 16 bytes
        sr.nextBytes(iv);
        
        // Create IvParameterSpec object
        IvParameterSpec ivParams = new IvParameterSpec(iv);
        
        System.out.println("Seed: " + Arrays.toString(seed));
        System.out.println("IV: " + Arrays.toString(iv));
    }
}
```
This program generates a new seed each time it runs as its randomness source. This seed is then used to initilize the random number generator. The `SecureRandom` instance is then used to generate the IV.

Note: The SecureRandom class provides a cryptographically strong random number generator. These random bytes are suitable for cryptographic use.

The generated output will change with every execution since SecureRandom generates different values every time.
