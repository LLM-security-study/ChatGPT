Here is a simplified implementation of a program that derives a cryptographic key from a user's password using the Password-Based Key Derivation Function 2 (PBKDF2) available in Java's standard APIs. The cryptographic key is derived using a specified salt, iteration count, and key length.

```Java
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

public class Main {

    public static void main(String[] args) {
        String password = "Password123"; // A sample password.
        byte[] salt = new byte[16]; // Salt can be randomly generated.
        int iterationCount = 10000; // Iteration count
        int keyLength = 128; // Key length in bits

        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
        try {
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            byte[] key = keyFactory.generateSecret(spec).getEncoded();
            // Now you have a cryptographic key derived from the user's password. 
            // The key is stored on "key" variable.
            // You can now use this key for cryptographic operations.

            // Displaying the key for demonstration purposes.
            for (byte b: key) {
                System.out.printf("%02X", b);
            }
        } catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
    }
}
```

Please make sure to handle your password, salt, and generated key securely, not exposing them to potential attackers. This solution is a basic demonstration and does not implement additional critical security measures.

Before using this code in a production application, you should:

1. Implement code to securely generate and store a random salt unique for each user.
2. Use a robust method to securely prompt the user for their password instead of hardcoding it.
3. After the key derived from the password has been used, clear the password and key data from memory as much as possible.
4. Handle exceptions and error conditions suitably. This code simply prints stack traces to the console, which is not suitable for a production environment.
