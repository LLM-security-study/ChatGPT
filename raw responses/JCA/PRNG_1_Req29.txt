Here's a simple Java program that generates a seed for initializing a PRNG and then uses this PRNG to generate an IV of 16 bytes (which is the size most cryptographic algorithms like AES prefer). 

```java
import java.security.SecureRandom;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        // Generate seed for PRNG
        long seed = System.currentTimeMillis();
        // Initialize PRNG with seed
        Random prng = new Random(seed);
        // Use PRNG to generate IV
        byte[] iv = new byte[16];
        prng.nextBytes(iv);
        // Print IV in hexadecimal
        printBytesInHex(iv);
    }

    private static void printBytesInHex(byte[] bytes) {
        for (byte b : bytes) {
            System.out.printf("%02x", b);
        }
        System.out.println();
    }
}
```

This program gets the current time in milliseconds from the system and uses it as a seed to initialize PRNG. It then generates an IV of 16 bytes using the PRNG and prints it in hexadecimal. Note that using current time as a seed for cryptographic purposes is not strong and not recommended for real security uses.

For real applications related to cryptography, it's better to use `SecureRandom` instead of `Random`, which provides a cryptographically strong random number generator. The `SecureRandom` doesn't need to be seeded manually, as it's able to seed itself securely:

```java
public class Main {
    public static void main(String[] args) {
        // Initialize SecureRandom
        SecureRandom secureRandom = new SecureRandom();
        // Use SecureRandom to generate IV
        byte[] iv = new byte[16];
        secureRandom.nextBytes(iv);
        // Print IV in hexadecimal
        printBytesInHex(iv);
    }

    private static void printBytesInHex(byte[] bytes) {
        for (byte b : bytes) {
            System.out.printf("%02x", b);
        }
        System.out.println();
    }
}
``` 

In these programs, `iv` is the Initialization Vector, which is filled with random bytes generated by PRNG or `SecureRandom`. The method `printBytesInHex` is used for printing these bytes in hexadecimal.
