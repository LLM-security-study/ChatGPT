The given requirement could be implemented using the Java Secure Socket Extension (JSSE) APIs. The following code can be used to validate the certificate in an SSL/TLS connection. The primary class is named "Main".

```java
import javax.net.ssl.*;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class Main {
    public static void main(String[] args) throws Exception {
        // Specify the keystore details
        String keystoreType = KeyStore.getDefaultType();
        String keystoreFile = "<keystore_file_path>";
        String keystorePass = "<keystore_password>";

        // Load the keystore in the 'KeyStore' object
        KeyStore keystore = KeyStore.getInstance(keystoreType);
        try (InputStream is = Main.class.getResourceAsStream(keystoreFile)) {
            keystore.load(is, keystorePass.toCharArray());
        }

        // Create and initialize 'TrustManagerFactory'
        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        trustManagerFactory.init(keystore);

        // Get 'TrustManagers' from 'TrustManagerFactory'
        TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();

        // Create and initialize 'SSLContext'
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustManagers, null);

        // The URL of the host you will connect to
        String hostUrl = "<host_url>";

        // Create a 'HttpsURLConnection' object
        URL url = new URL(hostUrl);
        HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();

        // Set the SSLSocketFactory
        urlConnection.setSSLSocketFactory(sslContext.getSocketFactory());

        // Connect to the host and fetch response code
        urlConnection.connect();
        int responseCode = urlConnection.getResponseCode();

        // Validate the certificate and print the response code
        if (responseCode == 200) {
            System.out.println("Certificate is valid.");
        } else {
            System.out.println("Certificate is invalid. Response Code: " + responseCode);
        }
    }
}
```

In this code, replace <keystore_file_path>, <keystore_password>, and <host_url> with the actual values. Before running, make sure the trusted certificates are added in the specified keystore file.

NOTE: If you are externally provided with SSL certificate, you need to import it into a keystore file using keytool utility provided by JDK.

This code will give you basic understanding, however SSL/TLS certificate validation can be more complex and involve various checks such as checking the Not Before and Not After condition, revocation checking by making use of OCSP or CRL etc. depending on the level of security you wish to have. Implementing these checks can make your SSL/TLS communication more secure.
