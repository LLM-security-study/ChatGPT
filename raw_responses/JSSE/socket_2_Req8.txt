Sure. Here's a very basic implementation using Java's `SSLSocketFactory` class:

```java
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.SSLSocket;
import java.io.*;

public class Main{
    public static void main(String[] args){
        try {
            SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket("RemoteHostName", 9999);

            PrintWriter out = new PrintWriter(new OutputStreamWriter(sslSocket.getOutputStream()));
            BufferedReader in = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            // Send a message to the server
            out.println("Hello Server");
            out.flush();

            // Read the server's response
            String line;
            while ((line = in.readLine()) != null){
                System.out.println(line);
            }

            out.close();
            in.close();
            sslSocket.close();

        } catch (IOException e) {
            System.out.println("Failed to establish SSL connection to server: " + e.getMessage());
        }
    }
}
```

This program creates an SSL socket connected to "RemoteHostName" on port 9999. After the connection is established, it writes "Hello Server" to the server and then reads the server's response.

Remember to replace "RemoteHostName" and the port number (9999) with the actual server name and port you want to connect to.

Also, note that this program doesn't handle SSL handshaking errors, you may want to add more specific exception handling based on your application's needs.
