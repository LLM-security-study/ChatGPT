Sure, here is a simple RSA encrypting and decrypting example using Java's standard API:

```java
import javax.crypto.Cipher;
import java.security.*;

public class Main {

    private static KeyPair generateKeyPair() throws Exception {
        KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
        generator.initialize(1024, new SecureRandom());
        return generator.generateKeyPair();
    }

    public static byte[] encrypt(String plainText, PublicKey publicKey) throws Exception {
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return encryptCipher.doFinal(plainText.getBytes("UTF-8"));
    }

    public static String decrypt(byte[] bytes, PrivateKey privateKey) throws Exception {
        Cipher decriptCipher = Cipher.getInstance("RSA");
        decriptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        return new String(decriptCipher.doFinal(bytes), "UTF-8");
    }

    public static void main(String[] args) throws Exception {
        KeyPair keyPair = generateKeyPair();

        // The original data
        String text = "This is a secret message";

        System.out.println("Original Text: " + text);

        // Encrypt using the public key
        byte[] secret = encrypt(text, keyPair.getPublic());

        System.out.println("Encrypted message: " + new String(secret, "UTF-8") );

        // Decrypt using the private key
        String decryptedSecret = decrypt(secret, keyPair.getPrivate());

        System.out.println("Decrypted Text: " + decryptedSecret);
    }

}
```

Please make sure to exception handling properly while using the program in production environments as in above code we just throwing exceptions.

Also, remember that asymmetric encryption is not designed to encrypt large amounts of data. Asymmetric encryption is typically used to encrypt a symmetric key, which is then used to encrypt additional data. This combination yields both the security advantages of asymmetric encryption and the speed advantages of symmetric encryption. 

Another important thing is that RSA output length depends upon the key size. With 1024-bit RSA, you have a 128-byte maximum message size. Here, with padding, this becomes 117 bytes at maximum. The output will be 128 bytes. If this isn't long enough, you would need to break up the input into < 117 byte chunks. Or you would transition to a higher bit count, such as 2048, which provides 256 byte output and a 245-byte message.
