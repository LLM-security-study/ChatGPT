Unfortunately, the Google Play Store does not provide an API that lets applications directly check the authenticity of their own APKs. Also, Android does not provide an API for this purpose. However, we can use a combination of Android's PackageManager and Signature APIs to check if the running APK's signature matches the expected signature. This isn't foolproof; for example, the APK might be signed with a different key that has the same signature. But this is as close as we can get with the Android APIs.

```java
import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;

public class Main {
    private static final String EXPECTED_SIGNATURE = "INSERT_EXPECTED_SIGNATURE_HERE";

    public static void main(String[] args) {
        // Assume that the context is already available
        Context context = ...; 

        try {
            // Get package info for this application
            PackageInfo packageInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), PackageManager.GET_SIGNATURES);

            // Loop through signatures
            for (Signature signature : packageInfo.signatures) {
                // Compute hash of signature
                byte[] signatureBytes = signature.toByteArray();
                MessageDigest md = MessageDigest.getInstance("SHA");
                md.update(signatureBytes);
                String currentSignature = Base64.encodeToString(md.digest(), Base64.DEFAULT);

                // Compare with expected signature
                if(EXPECTED_SIGNATURE.equals(currentSignature.trim())
                {
                    System.out.println("The app's signature is valid.");
                } else {
                    System.out.println("The app's signature is NOT valid.");
                }
            }
        } catch (PackageManager.NameNotFoundException e) {
            System.out.println("The package name is not found.");
        } catch (NoSuchAlgorithmException e) {
            System.out.println("The specified algorithm is not available.");
        }
    }
}
```

You would replace "INSERT_EXPECTED_SIGNATURE_HERE" with the base64 representation of the expected SHA-256 hash of the APK's signature.

This code should be run as part of your application, not as a standalone Java program. To get the application context when the code is inside an Activity, you can use "this". If the code is inside a View or a Service, you can use "getContext()" instead of the placeholder "..." in the above code. 

Note: The above solution provides a basic way to check the integrity of an app. However, in a production-grade application, it is recommended to use Google's SafetyNet Attestation API. This API provides a more reliable way to check the integrity of an app and it also includes additional checks, like whether or not the device the app is running on is rooted.
