Sure. Here is a simple Java program that uses the HttpsURLConnection class provided by the standard JDK to validate the certificate in an SSL/TLS connection. 

```java
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;

public class Main {
    public static void main(String[] args) {
        try {
            //Specify the URL whose SSL/TLS certificate we want to validate.
            String urlString = "https://www.example.com";
            
            URL url = new URL(urlString);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            
            //Initiate SSL handshake which implicitly validates the certificate because 
            //HttpsURLConnection by default validates the server's certificate against 
            //Java's truststore during the handshake.
            connection.connect();
            
            System.out.println("Certificate is valid. Connection established successfully.");
            connection.disconnect();
        } catch (Exception e) {
            System.out.println("Failed to establish SSL connection to server: " + e.getMessage());
        }
    }
}
```

Please replace "https://www.example.com" with the URL you actually want to validate.

NOTE: This program only works when the server's certificate can be validated against the certificates present in the Java's default truststore. If the server's certificate issuer isn't in the default Java truststore, you may have to create your own truststore containing the server's certificate or certificate of the CA that signed the server's certificate. 

This program also won't work if the server's certificate has expired or isn't yet valid. In these cases, you'll need to obtain a new, valid certificate from the server or ignore the server's certificate validity period which is NOT recommended due to security reasons.
