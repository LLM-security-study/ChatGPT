Sure, here is a Java program that illustrates password-based key derivation using Java's standard `SecretKeyFactory` and `PBEKeySpec` classes.

```java
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.spec.KeySpec;
import java.util.Arrays;

public class Main {

    public static void main(String[] args) {
        try {
            String password = "password";
            byte[] salt = new byte[16];
            int iterationCount = 10000;
            int keyLength = 256;

            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
            
            byte[] hash = factory.generateSecret(spec).getEncoded();
            System.out.println(Arrays.toString(hash));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

This program is a simple reference for password-based key derivation. It uses a constant salt value - which is typically a random value that should be stored along with the hashed result because you'll need the exact same salt when you verify a password later. 

It also uses a hardcoded iteration count and key length - these are configuration values that you'd typically tune based on the security needs and performance characteristics of your application.

Finally, note that "PBKDF2WithHmacSHA1" is a commonly used algorithm for this sort of task, but there are others available as well. Choose the most suitable for your needs. As best practice, it's always better to not store direct password anywere in the system. Password and salt should be hashed and hash should be stored.
