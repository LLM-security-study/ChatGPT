Sure. In order to use Google APIs, we need to authenticate the users. For this, Google provides the OAuth 2.0 protocol. To authorize requests, the OAuth 2.0 flow first sends the user to Google's authorization server. The user then returns to your application with an access token. This access token indicates that the user has been granted permission to access their Google data via your application.

Here is a basic implementation structure of your required task in Java.

```Java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.IOException;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Collections;

public class Main {
    private static final String CLIENT_SECRET_JSON_RESOURCE = "/path/to/client_secret.json";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final List<String> SCOPES = Collections.singletonList(CalendarScopes.CALENDAR_READONLY);

    public static void main(String... args) throws IOException, GeneralSecurityException {
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = getCredentials(HTTP_TRANSPORT);
        System.out.println("User is successfully authorized");
    }

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        // Load client secrets.
        InputStream in = Main.class.getResourceAsStream(CLIENT_SECRET_JSON_RESOURCE);
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();
        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }
}
```

This code identifies the client application with the Google OAuth server using the client secrets you downloaded while creating the application in the developers console, and lets the users authorize your application to access their Calendar data.

To run this program, you need to replace "/path/to/client_secret.json" with the path to your client_secret.json file. 

Remember we're using SCOPES as `CalendarScopes.CALENDAR_READONLY` which enables read-only access to the user's calendar. If your application needs other access then assign the appropriate scope from Google Calendar API's official documentation.

Please note: Google OAuth 2.0 setup involves multiple steps like creating OAuth 2.0 Credentials in Google Developer Console, setting up the OAuth Consent Screen, download and place the client_secret.json properly (if running locally). So, make sure to complete all steps as per official Google instructions.
