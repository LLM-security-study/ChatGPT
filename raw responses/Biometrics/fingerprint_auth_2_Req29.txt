Sure, I will provide you a sample program to give you an idea on how to build it. The Biometric API was added in Android 9 (API level 28) for fingerprint recognition.

Here's a simplified example in Java:

```java
import android.content.DialogInterface;
import android.hardware.biometrics.BiometricPrompt;
import android.os.CancellationSignal;
import android.os.Handler;
import android.os.Looper;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

public class Main {

    private CancellationSignal cancellationSignal;
    private Executor executor;

    public Main() {
        executor = Executors.newSingleThreadExecutor();
    }

    public void authenticateUser(final FingerPrintAuthCallBack fingerPrintAuthCallBack) {

        BiometricPrompt biometricPrompt = new BiometricPrompt.Builder(context)
                .setTitle("Fingerprint Authorization")
                .setSubtitle("Provide your FingerPrint for Authentication")
                .setDescription("This app is using Android's Biometric security to protect your data")
                .setNegativeButton("Cancel", executor, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        fingerPrintAuthCallBack.authenticationCancelled();
                        cancellationSignal.cancel();
                    }
                }).build();

        biometricPrompt.authenticate(getCancellationSignal(), executor, getAuthenticationCallBack(fingerPrintAuthCallBack));
    }

    private BiometricPrompt.AuthenticationCallback getAuthenticationCallBack(final FingerPrintAuthCallBack fingerPrintAuthCallBack) {
        return new BiometricPrompt.AuthenticationCallback() {
            @Override
            public void onAuthenticationError(int errorCode, CharSequence errString) {
                fingerPrintAuthCallBack.authenticationError(errorCode, errString);
            }

            @Override
            public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
                fingerPrintAuthCallBack.authenticationSuccessful(result);
            }

            @Override
            public void onAuthenticationFailed() {
                fingerPrintAuthCallBack.authenticationFailed();
            }
        };
    }

    private CancellationSignal getCancellationSignal() {
        cancellationSignal = new CancellationSignal();
        return cancellationSignal;
    }

    public interface FingerPrintAuthCallBack {
        void authenticationSuccessful(BiometricPrompt.AuthenticationResult result);
        void authenticationError(int errorCode, CharSequence errString);
        void authenticationCancelled();
        void authenticationFailed();
    }
}
```

This class "Main" simply provides a way to launch a fingerprint authentication dialog and then it will call the respective callbacks depending on the success or failure of the authentication attempt. 

The authenticateUser method initializes an instance of BiometricPrompt, which opens a dialog that prompts the user to touch the fingerprint sensor. 

In the event of an error, cancellation, failure, or success, the Main class calls the appropriate method of the `FingerPrintAuthCallBack` interface, which you could implement in any component of your app to handle these events as needed.
