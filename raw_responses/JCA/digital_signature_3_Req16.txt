Here is a basic example of a Java program that will sign a given message using the Java Security API. This program will generate a pair of keys (private and public), sign a message using the private key, and verify the signed message using the public key.

```java
import java.security.*;

public class Main {
    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
      
        // generate key pair
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(2048);
        KeyPair pair = keyGen.generateKeyPair();
        PrivateKey priv = pair.getPrivate();
        PublicKey pub = pair.getPublic();


        // get text
        String text = "This is a message to be signed and verified";

        // create a signature object
        Signature signature = Signature.getInstance("SHA256withRSA");

        // initialize the signature object with the private key
        signature.initSign(priv);

        // add data to the signature
        signature.update(text.getBytes());

        // sign the data and get the result
        byte[] signed = signature.sign();

        System.out.println("Signed message: " + new String(signed));

        // verify signature
        signature.initVerify(pub);
        signature.update(text.getBytes());
        boolean bool = signature.verify(signed);
        System.out.println("Verification: " + bool);
    }
}
```

This program uses RSA for key pair generation and SHA-256 algorithm with RSA for signing the message.

Please note the signed message output would look like gibberish because it's a byte-array, not a String.

Note: This code will only run in a secure context, such as a Java console or application, and won't work in unsecure context, such as a Java sandboxed applet, due to security restrictions on key pair generation.
