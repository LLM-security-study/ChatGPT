Sure, here is a Java program to obtain permission from users to store files in their Google Drives using OAuth 2.0 for authentication.

```java
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;

public class Main {
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

    public static void main(String... args) {
        try {
            final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
            GoogleCredential credential = getCredentials(HTTP_TRANSPORT);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        // Load client secrets.
        InputStream in = Main.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, Collections.singletonList(DriveScopes.DRIVE_FILE))
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();
        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }
}
```
This program does the following:

- Reads the client secrets from a file named `credentials.json`, which is expected to contain your Client Id and Secret.
- Builds an GoogleAuthorizationCodeFlow instance, which guides a user through the OAuth 2.0 process.
- Saves the access tokens in a file using FileDataStoreFactory. The access tokens are needed for making authenticated requests to Google APIs.
- Requests the user to authorize the application.
- If the user authorizes the application, the access tokens are saved in a file and returned by the getCredentials() method.

Please replace `"/credentials.json"` in `CREDENTIALS_FILE_PATH` with the path to your client secrets file.

Please note that the code is a simple illustration of the authorization process, and such, does not include error handling and other important aspects of a production-ready application. Further, it assumes that the client_secrets.json file, which includes your Client ID and Client Secret, is in the root directory of your app's classpath.
