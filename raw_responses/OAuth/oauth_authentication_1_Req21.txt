Sure, here is an example of how you can set up Google SSO for authentication using a server-side flow. I've provided the essential methods without the entire servlet or a user interface.

Please replace "REDIRECT_URI", "CLIENT_ID", and "CLIENT_SECRET" with the actual values you obtained when you registered your application.

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;

/**
 * Google SSO authentication example
 */
public class Main {
    private static final String CLIENT_SECRET_FILE = "/path/to/client_secret.json";
    private static final HttpTransport TRANSPORT = new ApacheHttpTransport();
    private static final JsonFactory JSON_FACTORY = new JacksonFactory();
    private static GoogleClientSecrets clientSecrets;

    public static void main(String[] args) {
        // Load client secrets
        try {
            clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new FileReader(CLIENT_SECRET_FILE));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // Generate the URL where the user will be redirected for authentication
        String url = generateLoginUrl("REDIRECT_URI");

        // After the user has authenticated and authorized our app, Google will redirect the user
        // back to our application with an authorization code. This code must be exchanged for an
        // access token and refresh token.
        //
        // String code = ...;
        //
        // Credential credential = exchangeCode(code);
        //
        // GoogleIdToken idToken = credential.getAccessToken();
    }

    private static String generateLoginUrl(String redirectUri) {
        GoogleAuthorizationCodeRequestUrl url = new GoogleAuthorizationCodeRequestUrl(
                clientSecrets.getDetails().getClientId(),
                redirectUri,
                Arrays.asList("https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"))
                .setAccessType("offline");
        return url.build();
    }

    private static Credential exchangeCode(String authorizationCode) {
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                TRANSPORT,
                JSON_FACTORY,
                clientSecrets.getDetails().getClientId(),
                clientSecrets.getDetails().getClientSecret(),
                Arrays.asList("https://www.googleapis.com/auth/userinfo.profile", "https://www.googleapis.com/auth/userinfo.email"))
                .build();

        try {
            return flow.newTokenRequest(authorizationCode).setRedirectUri(clientSecrets.getDetails().getRedirectUris().get(0)).execute();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
```
Note: `ApacheHttpTransport` class is a part of `google-http-client` library and determines the transport (network/proxy settings) for accessing HTTP servers. 

For the servlet details including the `doGet` and `doPost` methods, you'll have to set up your servlet environment first (which might be dependent on your specific server, context and JavaEE setup). These methods will handle the user redirection and code exchange. The details might be too complicated for this answer, so feel free to ask more specific questions. You also might need additional dependencies, like `servlet-api`, `google-oauth-client` and `google-api-client`.
