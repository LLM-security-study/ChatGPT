Sure, I can explain how you can do this. Due to privacy settings, I cannot create an access token for you. Here is some skeleton code on how you may achieve this. This code uses the KeyStore class in Java to store secret information in a file. This requires exception handling which has been handled using try-catch blocks.

Keep in mind that this will create a KeyStore in JCEKS format. If you need to read this KeyStore, you'll have to use the same format.

```java

import java.io.FileOutputStream;
import java.security.KeyStore;
import java.security.KeyStore.PasswordProtection;

public class Main {
    public static void main(String[] args) {
        try {
            // create new keystore object
            KeyStore keyStore = KeyStore.getInstance("JCEKS");

            // load the keystore
            char[] password = "keystorePassword".toCharArray();
            keyStore.load(null, password);

            // store the secret (access token in this case)
            KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(
                    new javax.crypto.spec.SecretKeySpec("accessToken".getBytes(), "HmacSHA256"));
            PasswordProtection keyPassword = new PasswordProtection("keyPassword".toCharArray());

            keyStore.setEntry("alias", secretKeyEntry, keyPassword);

            // save the keystore to a file
            try (FileOutputStream fos = new FileOutputStream("keystore.ks")) {
                keyStore.store(fos, password);
            }
        } catch (Exception e) {
            System.out.println("Exception : " + e);
        }
    }
}
```

In this program:

1. A KeyStore object is created with type "JCEKS".
2. We load the KeyStore. Since the KeyStore is not yet created, we supply `null` as the InputStream argument and supply the password to the KeyStore.
3. We create a SecretKeyEntry, using the access token as the key. This is stored along with an alias and password in the KeyStore.
4. Finally, the KeyStore is saved to a file named "keystore.ks".

Note: This is just an example and should be adopted to your use case. Handle secret data like passwords carefully, don't expose them in your code, get them from environment variables or secure configuration. Don't forget to handle exceptions correctly, right now in this code, they are just printed to the standard output but in a real-world scenario, you should handle or propagate them correctly.
