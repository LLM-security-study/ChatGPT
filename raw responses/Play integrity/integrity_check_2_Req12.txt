To verify the integrity of an Android app, we can use the SafetyNet Attestation API provided by Google. However, as Java as a standalone cannot call and verify Android API directly, we cannot write a simple standalone Java program to achieve this, it is necessary to create an Android application.

Here is a simplified example of how to implement the SafetyNet Attestation API in an Android application to verify the integrity:

The MainActivity.java

```java
import android.app.Activity;
import android.os.Bundle;
import android.util.Log;

import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;
import com.google.android.gms.tasks.OnSuccessListener;

public class MainActivity extends Activity {

    private static final String TAG = "SafetyNetTest";
    // Replace this with your own API key
    private static final String API_KEY = "Your_API_Key";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        SafetyNet.getClient(this).attest("Nonces_data".getBytes(), API_KEY)
                .addOnSuccessListener(this, new OnSuccessListener<SafetyNetApi.AttestationResponse>() {
                    @Override
                    public void onSuccess(SafetyNetApi.AttestationResponse response) {
                        // Indicate communication with the service was successful.
                        // Use response.getJwsResult() to get the result data.
                        Log.d(TAG, "Success! SafetyNet result:\n" + response.getJwsResult() + "\n");
                        // Ideally, we would send this result to our server for verification, but 
                        // just log it here for demonstration.
                    }
                })
                .addOnFailureListener(this, new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // An error occurred while communicating with the service.
                        if (e instanceof ApiException) {
                            // An error with the Google Play Services API contains some additional details.
                            ApiException apiException = (ApiException) e;
                            Log.d(TAG, "Error: " +
                                    CommonStatusCodes.getStatusCodeString(apiException.getStatusCode()) + ": " +
                                    apiException.getStatusMessage());
                        } else {
                            // A different, unknown type of error occurred.
                            Log.d(TAG, "Error: " + e.getMessage());
                        }
                    }
                });
    }
}
```

But remember, you may need to import necessary google play services into your Android project and add necessary permissions. Also, you need to replace "Your_API_Key" with the actual API Key in the above code.

SafetyNet Attestation API gives you a way to check the device your application is running on for integrity. It uses the devices’ Google Play Services to generate an Attestation Result and sends it to the server, on server-side, you need to verify the JWS signature to ensure the Attestation Result was indeed generated by Google’s Play Services. 

Once it's verified, you would use the Attestation Result payload to determine the device’s integrity.

Please note that, this is a simplified example, you need to handle failure cases and server-side verification of Attestation Result in a real-life application.
