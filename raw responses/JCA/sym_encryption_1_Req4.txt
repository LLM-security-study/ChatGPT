Sure, here's a simple Java program that uses symmetric encryption (AES) to encrypt and decrypt a message.

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class Main {
    static Cipher cipher;
    
    public static void main(String[] args) throws Exception {
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();

        String plainText = "This is a plain text";
        
        cipher = Cipher.getInstance("AES");
        
        String encryptedText = encrypt(plainText, secretKey);
        System.out.println("Encrypted Text: " + encryptedText);
        
        String decryptedText = decrypt(encryptedText, secretKey);
        System.out.println("Decrypted Text: " + decryptedText);
    }
    
    public static String encrypt(String plainText, SecretKey secretKey) throws Exception {
        byte[] plainTextByte = plainText.getBytes();
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedByte = cipher.doFinal(plainTextByte);
        String encryptedText = new String(encryptedByte);
        return encryptedText;
    }
    
    public static String decrypt(String encryptedText, SecretKey secretKey) throws Exception {
        byte[] encryptedTextByte = encryptedText.getBytes();
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
        String decryptedText = new String(decryptedByte);
        return decryptedText;
    }
}
```

This program will create a SecretKey object that will be used to encrypt and decrypt text. The plain text that is to be encrypted can be changed at `String plainText = "This is a plain text";`. Before running this code, include required imports which are needed for the program.

Please note that the above code currently encrypts and decrypts the text as String, which may result in loss of data if the AES encryption results in bytes which do not map to a valid String's character. For actual cryptographic purposes, data should be encrypted/decrypted as bytes and then may be encoded/decoded as Base64 for storage and transmission. 

I also assumed you have basic understanding of `Java Cryptography Architecture (JCA)` and `Java Cryptography Extension (JCE)`. You can learn more about them at the official Oracle docs: https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html
