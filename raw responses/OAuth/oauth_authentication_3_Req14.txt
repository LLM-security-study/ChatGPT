Sure, please note that implementing Single-Sign-On (SSO) with Google requires the use of Google's API, in particular the skeleton of such a solution can be built using the Google's OAuth 2.0 library for JAVA called Google Authorization and Authentication APIs.

Let's name the java classes here as "Main" and "GoogleOAuth". Here's the basic structure:

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.util.Arrays;
import java.util.Collections;
import java.io.*;

public class Main
{
    public static void main(String[] args) throws Exception
    {
        GoogleOAuth googleOAuth = new GoogleOAuth();
        googleOAuth.authenticate();
    }
}

class GoogleOAuth 
{
    private static final String CLIENT_ID = "your-client-id";
    private static final String CLIENT_SECRET = "your-client-secret";
    private static final String REDIRECT_URI = "your-redirect-uri";

    public void authenticate() throws Exception
    {
        GoogleClientSecrets.Details web = new GoogleClientSecrets.Details();
        web.setClientId(CLIENT_ID);
        web.setClientSecret(CLIENT_SECRET);
        web.setRedirectUris(Arrays.asList(REDIRECT_URI));
        GoogleClientSecrets googleClientSecrets = new GoogleClientSecrets().setWeb(web);
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
            new NetHttpTransport(), 
            JacksonFactory.getDefaultInstance(), 
            googleClientSecrets, 
            Collections.singletonList("openid"))
        .build();

        // After this step, user will be redirected to the consent screen
        // After the user consents, an authorization code will be returned to redirect_uri
        // The following command should be adjusted based on how the client app handles the user's authorization.
        String url = flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI).build();

        Credential credential = flow.newTokenRequest("").setRedirectUri(REDIRECT_URI).execute();
        
        GoogleIdToken idToken = credential.getAccessToken().parseIdToken();
        GoogleIdToken.Payload payload = idToken.getPayload();
    }
}
```
This is only a skeleton, you will need to add the proper error handling as per your application requirement. Also please replace `your-client-id`, `your-client-secret` and `your-redirect-uri` with your actual values. 

Please note that you will have to follow up the authentication process with Google's Identity server at the provided 'url', and be prepared to provide the necessary UI for user's consent. The user will have to authorize your app to have access for specific scopes, that's when the authorization code is sent to your app via the Redirect URI that you provided while setting up the app in Google's developer console. 

Once the user consents, handle the redirect URI to extract the authorization code and request for access token using that code. In this stub code, you will need to provide the obtained authorization code at `newTokenRequest("")`.
