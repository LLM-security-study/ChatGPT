Sure, here's a basic example of a Java program that creates an SSL Socket to initiate communication with a remote server:

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        String host = "your.remote.server.com";  // replace with your actual server domain
        int port = 1234;  // replace with the actual port number
        try {
            SSLSocketFactory factory =
                    (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket sslSocket = (SSLSocket) factory.createSocket(host, port);

            PrintWriter out = new PrintWriter(new OutputStreamWriter(sslSocket.getOutputStream()));
            BufferedReader in = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            String message = "Hello, server!";
            out.println(message);
            out.flush();

            String serverResponse = in.readLine();
            System.out.println("Server responded with: " + serverResponse);

            // Don't forget to close resources when you're done!
            out.close();
            in.close();
            sslSocket.close();
        } catch (IOException e) {
            System.out.println("Error occurred " + e.getMessage());
        }
    }
}
```
Before running the program, you need to replace "your.remote.server.com" and port "1234" with your actual server domain and port number.
This program connects to the remote server via an SSL Socket, sends a message "Hello, server!", then reads and prints out the server's response.

Please note that this is quite a basic example. Real code might need to handle SSL exceptions more thoroughly and perform more complete initialization of the SSL context.

As for APIs, in this case, we're mainly using `javax.net.ssl.SSLSocketFactory`. This is the standard Java factory for creating SSL sockets - secure versions of traditional Java sockets.
