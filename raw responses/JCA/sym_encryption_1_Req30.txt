Here is a basic example of a Java program with encryption and decryption functions using a symmetric key (AES):

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class Main {
    public static void main(String[] args) throws Exception {
        String text = "This is a sample text";
        SecretKey key = generateKey("AES");
        String encrypted = encrypt(text, key);
        String decrypted = decrypt(encrypted, key);

        System.out.println("Original text: " + text);
        System.out.println("Encrypted text: " + encrypted);
        System.out.println("Decrypted text: " + decrypted);
    }

    public static SecretKey generateKey(String algorithm) throws Exception {
        KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);
        keyGenerator.init(128);
        return keyGenerator.generateKey();
    }

    public static String encrypt(String data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encrypted = cipher.doFinal(data.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String data, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(data));
        return new String(decrypted);
    }
}
```

In this code, `encrypt()` function encrypts a given string using a given AES secret key and `decrypt()` function decrypts a given string using a given AES secret key.

**Note**: The size of the data must be multiple of 16 when decrypting or encrypting in AES. If it is not, you will have to pad it. Another thing is that this is a basic example and does not implement secure coding best practices. For actual secure practices, it's recommended to use KeyStore or similar constructs to securely store and handle keys rather than passing them around as done in this example.
