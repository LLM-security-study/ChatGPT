Sure, here is a basic example of how you could set up fingerprint authentication in an Android application with a main class named "Main". Note that actual fingerprint recognition requires deep interaction with hardware, which is usually achieved using pre-built libraries or APIs provided by the device manufacturer or the Android OS. This is more of a mock-up of how this could be achieved:

```java
import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.support.v4.app.ActivityCompat;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.widget.TextView;

public class Main extends AppCompatActivity {
    private TextView fingerprintStatus;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        fingerprintStatus = (TextView) findViewById(R.id.fingerprint_status);
        
        FingerprintManager fingerprintManager = (FingerprintManager) getSystemService(FINGERPRINT_SERVICE);
        
        //Check permissions
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            fingerprintStatus.setText("Set the permission to use fingerprint scanner in app settings");
            return;
        }
        
        //Check if device has fingerprint scanner
        if (!fingerprintManager.isHardwareDetected()) {
            fingerprintStatus.setText("Your Device does not have a Fingerprint Sensor");
        } else {
            // Checks whether fingerprint permission is set on manifest
            if (!fingerprintManager.hasEnrolledFingerprints()) {
                fingerprintStatus.setText("Register at least one fingerprint in Settings");
            } else {
                authenticate(fingerprintManager);
            }
        }
    }
    
    private void authenticate(FingerprintManager fingerprintManager){
        //Create callback to handle authentication events
        FingerprintManager.AuthenticationCallback authenticationCallback = new FingerprintManager.AuthenticationCallback(){
            public void onAuthenticationError(int errorCode, CharSequence errString) {
                fingerprintStatus.setText("Authentication failed");
            }
            public void onAuthenticationFailed() {
                fingerprintStatus.setText("Authentication failed");
            }  
            public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
                fingerprintStatus.setText("Success!");
            }
        };

        //Begin authentication
       fingerprintManager.authenticate(null, null, 0, authenticationCallback, null);
    }
}
```

This basic program simply checks if the user has given the application permission to use the fingerprint scanner, and if the device actually has a fingerprint scanner. If both conditions are met, it attempts to authenticate the user via fingerprint. The program updates the text of a text view named "fingerprint_status" to indicate the current status of the fingerprint scanner. Please ensure to integrate this code snippet with the relevant UI controls and proper Android environment. 

For fully fledged implementation, you may require additional permissions, use FingerprintManagerCompat, BiometricPrompt, or AndroidX Biometric Library, according to Android version, device hardware conditions and specific application needs. This guide assumes the API level should be at least 23.
