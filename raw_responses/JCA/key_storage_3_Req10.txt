To perform the task, you would need to use two main Java classes namely KeyStore and CertificateFactory. Here is a simple Java SSL Application where we are adding an SSL certificate to a KeyStore file:

```java
import java.io.FileInputStream;
import java.io.OutputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

public class Main {
    public static void main(String[] args) throws Exception {
        //Specify the keystore details
        String keystoreType = "JKS";
        String keystoreFile = "C:/temp/examplekeystore.jks";
        String keystorePassword = "password";
        
        //Load the keystore
        KeyStore keystore = KeyStore.getInstance(keystoreType);
        keystore.load(null, keystorePassword.toCharArray());

        //Specify the certificate file to import
        String certificateFile = "C:/temp/examplecertificate.crt";
        
        //Create a CertificateFactory
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        
        //Load the certificate
        Certificate certificate = cf.generateCertificate(new FileInputStream(certificateFile));

        //Add the certificate
        keystore.setCertificateEntry("exampleAlias", certificate);

        //Save the new keystore contents
        OutputStream out = new FileOutputStream(keystoreFile);
        keystore.store(out, keystorePassword.toCharArray());
        out.close();
        
        System.out.println("Certificate was added to keystore");
    }
}
```

This is a simple Java program to load SSL certificate (X.509 format) file from the specified path and store it into Java KeyStore with the specified alias.

Note: The provided code is generic and does not contain any error handling. Always implement proper error handling in your production-grade code. Also, make sure to replace the placeholders with the correct location of your keystore and certificate file and their related password and alias. You might also be required to add exception handling depending on your JDK version.

Also, make sure you have the necessary permissions for the keystore file - very important when you're dealing with production servers.
