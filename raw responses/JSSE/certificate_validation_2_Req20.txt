Sure! We'll be using Java's built-in SSL libraries to achieve this, specifically the "javax.net.ssl" package which handles SSL/TLS connections.

Here is a simple Java program that tries to connect to a server and validate its certificate:

```Java
import javax.net.ssl.*;
import java.net.URL;

public class Main {
    public static void main(String[] args) {
        try {
            // Specify the host and the port we want to connect to
            String host = "your host here";
            int port = 443;  // Change the port if required

            // Create a SSLContext 
            SSLContext context = SSLContext.getDefault();

            // Create a SSL socket factory from the SSL context
            SSLSocketFactory sf = context.getSocketFactory();

            // Create a SSL socket
            SSLSocket socket = (SSLSocket) sf.createSocket(host, port);

            // Create a SSL session
            SSLSession session = socket.getSession();

            // We can validate the server certificate here
            java.security.cert.Certificate[] serverCerts = session.getPeerCertificates();

            // Display the server certificate 
            for (int i = 0; i < serverCerts.length; i++) {
                System.out.println("=== Server Certificate " + (i+1) + " ===");
                System.out.println("-Public Key-\n" + serverCerts[i].getPublicKey());
                System.out.println("-Certificate Type-\n " + serverCerts[i].getType());

                // Validate certificate
                serverCerts[i].verify(serverCerts[i].getPublicKey());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```
This is a simple program and in real application you might want to validate the certificate further by checking certificate's validity, issuer, subject, etc. Also, the exception handling is minimal here for the sake of simplicity. However, in a real-world application, it's important to handle exceptions effectively. 

Replace "your host here" with your destination's hostname. 

Important Note: This program will only check if the server has a valid certificate from a trusted Certificate Authority (CA). It does not ensure that you are talking to the correct server. You might be subject to a Man-in-the-middle (MITM) attack, if you are not checking if you are talking to the exact server you want. For example, you should check for certificate's subject to match the server's domain name. 

Going further, you might want to implement SSL handshake completion listener, to perform actions based on successful SSL handshake, or handle failures. 

This is a basic example and you can extend based on your requirements.
