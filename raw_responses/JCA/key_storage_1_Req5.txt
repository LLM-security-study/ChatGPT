Sure, here is a simple example of how to do that. This program generates a KeyPair, stores it in a KeyStore and then writes the KeyStore to a file:

```java
import java.io.FileOutputStream;
import java.security.*;
import java.security.cert.CertificateException;

public class Main {

    public static void main(String[] args) {
        try {
            // generate key pair
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            keyPairGenerator.initialize(1024);
            KeyPair keyPair = keyPairGenerator.generateKeyPair();

            // create a keystore
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());

            // initialize keystore
            keyStore.load(null, null);

            // store the keypair in the keystore
            String alias = "mykey";
            String passphrase = "mypassphrase";
            KeyStore.PasswordProtection password = new KeyStore.PasswordProtection(passphrase.toCharArray());
            KeyStore.PrivateKeyEntry pkEntry = new KeyStore.PrivateKeyEntry(keyPair.getPrivate(), new java.security.cert.Certificate[]{});
            keyStore.setEntry(alias, pkEntry, password);

            // write the keystore to a file
            FileOutputStream fos = null;
            try {
                fos = new FileOutputStream("keystore.jks");
                keyStore.store(fos, passphrase.toCharArray());
            } finally {
                if (fos != null) {
                    fos.close();
                }
            }
        } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {
            e.printStackTrace();
        }
    }
}
```

Please Note:

1. Add the proper certificate instead of an empty array in the PrivateKeyEntry constructor. This is only an example.
2. Always handle exceptions appropriately. This is a very basic example and it just prints out the stack trace, in production-grade code you would want to do something more meaningful with exceptions.
3. Manage the keystore password and private key password in a secure way. Just hardcoding it in the source code (like shown in this example) is very insecure.
4. It's recommended to avoid using short RSA key length (1024 for instance). Current recommendation (as for 2021) specify at least 2048 for RSA key.
