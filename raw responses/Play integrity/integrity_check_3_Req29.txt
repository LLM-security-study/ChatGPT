In Android, there isn't an API provided specifically for verifying the integrity of the entire device. 

However, the SafetyNet Attestation API is a tool that can be used to improve the security of your application from threats like fake users, device rooting, malicious software, and more. 

The SafetyNet Attestation API provides services for determining whether a device running your app meets Google's compatibility standards. However, it's important to note that this is just one aspect of device integrity.

Here's a basic Java representation of how you might implement this:

```java
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;
import com.google.android.gms.tasks.OnSuccessListener;

import java.nio.charset.StandardCharsets;

public class Main {
    private static final String TAG = "MainActivity";
    private String API_KEY = "Your API Key Here";

    public void checkDeviceIntegrity() {
        String nonceData = "Random Nonce Data";
        byte[] nonce = nonceData.getBytes(StandardCharsets.UTF_8);
        
        SafetyNet.getClient(this).attest(nonce, API_KEY)
                .addOnSuccessListener(this,
                        new OnSuccessListener<SafetyNetApi.AttestationResponse>() {
                            @Override
                            public void onSuccess(SafetyNetApi.AttestationResponse response) {
                                // Indicate communication with the service was successful.
                                // Use response.getJwsResult() to get the result data.
                            }
                        })
                .addOnFailureListener(this, new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // An error occurred while communicating with the service.
                        if (e instanceof ApiException) {
                            // An error with the Google Play services API contains some additional details.
                            ApiException apiException = (ApiException) e;

                            // You can retrieve the status code using the
                            // apiException.getStatusCode() method.
                        } else {
                            // A different, unknown type of error occurred.
                            Log.d(TAG, "Error: " + e.getMessage());
                        }
                    }
                });
    }
}
```
In above code, replace "Your API Key Here" with your actual API key. And remember you will need to add the necessary dependencies and permissions in your manifest file.

This code sends a request to the Attestation API, and then receives a callback indicating success or failure.

This is just a general implementation and should be altered according to your application needs.
