Before starting to code, it's important to understand that Google Play does not provide any public APIs that allow an Android App to verify its own binary integrity. Also, it's impossible to prevent a technically skilled and motivated person from modifying an APK.

However, a common way to achieve similar functionality would be to implement safety checks in the app code itself which would calculate a known hash of your APK binary at runtime and compare that with a hardcoded copy of the expected hash.

For demonstration purpose, we will assume we are using SHA-256 hashing algorithm and `MessageDigest` would be the main API we use.

Let's go ahead with the coding part:
```java
import java.security.MessageDigest;
import java.io.FileInputStream;
import android.content.pm.ApplicationInfo;
import android.util.Log;
import android.content.Context;

public class Main {
    final protected static char[] hexArray = "0123456789ABCDEF".toCharArray();

    public static void main(String[] args) {
        boolean isAppValid = isAppSignatureValid(context, <Your_Should_Hardcode_Expected_Hash_Here>);
        System.out.println("Is App Valid: " + isAppValid);
    }

    public static String calculateSHA256(String filepath) {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        FileInputStream fis = new FileInputStream(filepath);
        byte[] dataBytes = new byte[1024];

        int nread = 0; 
        while ((nread = fis.read(dataBytes)) != -1) {
          md.update(dataBytes, 0, nread);
        };

        byte[] mdbytes = md.digest();
        return bytesToHex(mdbytes);
    }

    public static boolean isAppSignatureValid(Context context, String expectedHash) {
        try {
            ApplicationInfo appInfo = context.getApplicationContext().getPackageManager().getApplicationInfo(context.getPackageName(), 0);
            String appFile = appInfo.sourceDir;
            String calculatedHash = calculateSHA256(appFile);
            return calculatedHash.equals(expectedHash);
        }
        catch (Exception e) {
            Log.e(TAG, "Unable to calculate hash", e);
            return false;
        }
    }

    public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];

        for ( int j = 0; j < bytes.length; j++ ) {
            int v = bytes[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }

        return new String(hexChars);
    }
}
```
Remember to replace `<Your_Should_Hardcode_Expected_Hash_Here>` with your real expected hash in hardcoded form.

Again, this program should make it a bit more difficult for ill-intentioned people to misuse your app, but won't provide you with absolute certainty. Be sure to use other safety measures in addition to this one.

It's also worth mentioning that if you are choosing this path, be aware of additional load you place on devices as calculating hash for large APK can be resource intensive operation.
