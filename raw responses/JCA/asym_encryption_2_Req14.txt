Asymmetric cryptography, also known as public key cryptography, uses public and private keys to encrypt and decrypt data. Among the two types of encryption schemes, asymmetric cryptography, also known as public-key cryptography, is arguably more complex.

Here is a simple program that uses RSA which is a type of asymmetric encryption algorithm.

Please note this outputs encrypted and decrypted strings in base64 form, also please remember it's just a simple example and shouldn't be used in production environments.

```java
import java.security.*;
import javax.crypto.*;
import java.util.Base64;

public class Main {

    public static void main(String[] args) throws Exception {

        String plainText = "Hello world!";

        // Generate key pair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
        kpg.initialize(2048);
        KeyPair keyPair = kpg.generateKeyPair();
        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();

        // Encrypt
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());
        String encryptedString = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("Encrypted String: " + encryptedString);

        // Decrypt
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedString));
        String decryptedString = new String(decryptedBytes);
        System.out.println("Decrypted String: " + decryptedString);
    }
}
```

This program initially defines a plain text string. It then generates a key pair for RSA encryption and gets the public and private keys. The public key is then used to encrypt the plain text string, and the result is displayed. The private key is then used to decrypt the cipher text back into plain text, which is also displayed.
