Here is a Java program that meets your requirement:

```java
import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;

public class Main {
    public static void main(String[] args) throws Exception {
        // Generate seed for PRNG
        SecureRandom secureRandom = new SecureRandom();
        byte[] seed = new byte[8];
        secureRandom.setSeed(seed);

        // Use this PRNG for generating an Initialization Vector (IV)
        byte[] iv = new byte[Cipher.getMaxAllowedKeyLength("AES")/8];
        secureRandom.nextBytes(iv);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);

        // Print the IV
        System.out.print("Initialization Vector: ");
        for (byte b : iv) {
            System.out.printf("%02x", b);
        }
    }
}
```
 
Note: 
1. This program generates a seed for SecureRandom (Java's PRNG), then uses that PRNG to generate a byte array of length 16 (IV for a typical AES cipher).
2. The randomized byte array, or Initialization Vector (IV), can be used for encryption.
3. "AES" in `getMaxAllowedKeyLength("AES")` refers to the Advanced Encryption Standard.
4. This code will output the IV as a hexadecimal string.
5. Be aware of the capabilities and limitations of your cryptographic system and make sure you're always using strong, securely generated keys.
