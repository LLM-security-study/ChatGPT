Sure, here is a basic outline of how you can create a cryptographic key using Java and store it in a Keystore file.

```java
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class Main {
    public static void main(String[] args) {
        try {
            // Initializing Key Store
            KeyStore keyStore = KeyStore.getInstance("JCEKS");
            keyStore.load(null, null);

            // Key generation
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256);
            SecretKey secretKey = keyGen.generateKey();

            // Storing key
            KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry(secretKey);
            keyStore.setEntry("mySecretKey", skEntry, new KeyStore.PasswordProtection("password".toCharArray()));

            // Save the key store
            try (FileOutputStream fos = new FileOutputStream("keyStoreName.keystore")) {
                keyStore.store(fos, "password".toCharArray());
            }

        } catch (KeyStoreException | IOException | NoSuchAlgorithmException | UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        }
    }
}
```

This program generates a SecretKey with AES algorithm and stores it into the Keystore. Java Cryptography Extension (JCE) provides APIs for cryptographic services such as encryption and decryption. JCEKS is the type of keystore which can store private keys and secret keys. Here, we used password based protection for storing the secret key.

Please replace `"mySecretKey"`, `"password"` and `"keyStoreName.keystore"` with your actual secret key, password, and path of the keystore file.

This is a basic example of how this could be done, be aware that there are security considerations and best practices that need to be taken into account when manipulating cryptographic keys in a production environment.

