Below is a simple Java SSL/TLS host name verification example using HttpsURLConnection, which is a Java standard API for HTTPS communication:

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLSession;
import java.io.IOException;
import java.net.URL;

public class Main {

    public static void main(String[] args) {
        try {
            URL url = new URL("https://www.google.com");

            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setHostnameVerifier(Main::verifyHostName);

            connection.getResponseCode(); // Make a request to enforce the hostname verification

            System.out.println("Hostname verification passed!");

        } catch (Exception e) {
            System.out.println("Exception occurred during hostname verification: " + e.getMessage());
        }
    }

    private static boolean verifyHostName(String hostname, SSLSession session) {
        try {
            String peerHost = session.getPeerHost();
            return hostname.equals(peerHost);
        } catch (SSLPeerUnverifiedException e) {
            return false;
        }
    }
}
```

In this program, we create a custom host name verifier "verifyHostName" which is used to verify the host name in the SSLSession. It is then passed to the `setHostnameVerifier` method of the HttpsURLConnection, which will use it when connecting to the URL. 

Please replace the URL "https://www.google.com" with the URL you want to verify. 

This program just prints whether the verification passed or not. You can modify the handling of the verification results as per your requirements. 

Please note that the verifyHostName method simply compares the host in the URL with the host in the SSL session. This is a very basic verification and might not be suitable for all scenarios. For more advanced verification, more sophisticated techniques would be required.
