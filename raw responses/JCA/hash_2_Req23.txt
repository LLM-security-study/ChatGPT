Here's a Java program using MessageDigest Class (Java Standard API) to calculate MD5 hash for file integrity checks.

```java
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

class FileIntegrityChecker {
    private static final String MD5 = "MD5";

    public String calculateMD5(File file) {
        try (DigestInputStream dis = new DigestInputStream(new BufferedInputStream(new FileInputStream(file)), MessageDigest.getInstance(MD5))) {
            while (dis.read() != -1); //empty loop to clear the data
            MessageDigest md = dis.getMessageDigest();
            StringBuilder result = new StringBuilder();
            for (byte b : md.digest()) {
                result.append(String.format("%02x", b));
            }
            return result.toString();
        } catch (IOException | NoSuchAlgorithmException ex) {
            System.out.println("Error occurred while calculating MD5: " + ex.getMessage());
        }
        return null;
    }
}

public class Main {
    public static void main(String[] args) {
        FileIntegrityChecker fic = new FileIntegrityChecker();
        String providedHash = "abcdef123456"; // Assuming provided hash. This should be provided
        Path path = Paths.get("Path of your file"); //Specify the path of your file
        String myFileHash = fic.calculateMD5(path.toFile());
        if (providedHash.equals(myFileHash)) {
            System.out.println("File integrity confirmed");
        } else {
            System.out.println("File has been modified");
        }
    }
}
```

Replace "Path of your file" with the actual path of your file, and "abcdef123456" with the provided hash. This script calculates the hash of a file and compares it with the provided hash value. If they match, the file has not been modified. If they differ, the file has been altered. 

The FileIntegrityChecker class implements the hash calculation using the MD5 algorithm (you could use SHA1, or another as per your preference). Java's MessageDigest class is used to calculate the hash, which is then formatted into a readable format.

In main method, the create a object for FileIntegrityChecker class and then method calculateMD5 on a file to get the file's hash. It then checks if the calculated hash matches the provided hash. 

Make sure to handle the exceptions appropriately as per your specific use case requirements when you're implementing this code in a large project.
