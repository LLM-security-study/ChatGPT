Sure, Please find a simple Java program for hostname verification below:

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLSession;
import java.io.IOException;
import java.net.URL;

public class Main {
    public static void main(String[] args) {
        String hostname = "www.example.com";
        try {
            URL url = new URL("https://www.example.com");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();

            SSLSession sslSession = connection.getSSLSession();
            if (sslSession != null) {
                java.security.cert.Certificate[] certificates = sslSession.getPeerCertificates();
                
                if (certificates.length > 0) {
                    javax.security.cert.X509Certificate x509Certificate = javax.security.cert.X509Certificate.getInstance(certificates[0].getEncoded());
                    String dn = x509Certificate.getSubjectDN().getName();

                    int cnIndex = dn.indexOf("CN=");
                    if (cnIndex != -1) {
                        String serverName = dn.substring(cnIndex + 3);
                        System.out.println(sslSession.isValid() && serverName.equals(hostname) ? "Host name is verified." : "Host name isn't matching.");
                    } else {
                        System.out.println("Can't find CN record in the server certificate subject DN.");
                    }
                }
            }
        } catch (SSLPeerUnverifiedException e) {
            System.out.println("SSL peer verification failed: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("Error while connecting to the SSL server: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
        }
    }
}
```
Before running this program make sure that, you should have the SSL certificate of the server you're connecting.

This program tries to verify the hostname of an SSL/TLS server. It opens an HTTPS connection to a learning website 'www.example.com' using `HttpsURLConnection`, then it gets the `SSLSession` of the connection. 

From the `SSLSession`, it gets all the server's certificates and takes the first one as the server's certificate. It converts it to `X509Certificate` before extracting the server hostname from the "CN" field in the server certificate subject DN. 

If the server hostname matches the expected hostname, it prints "Host name is verified.", otherwise "Host name isn't matching.". It also catches and prints error messages for `SSLPeerUnverifiedException`, `IOException` and any other unexpected exceptions.

Please replace 'www.example.com' with your SSL server hostname before running it. 

Please note that this is a simple hostname verification program and might not be suitable for more complex situations.
