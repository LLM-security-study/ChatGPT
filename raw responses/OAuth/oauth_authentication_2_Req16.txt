Here is a simplified example of a Java program to implement Google OAuth2. This code only handles the authentication part and does not involve any GUI setup.

```java
// Main Java Program to establish a Single-Sign-On (SSO) service for a web 
// application, using Google accounts for user authentication

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;

public class Main {
    private static final String APPLICATION_NAME = "Google SSO Application";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final List<String> SCOPES = Collections.singletonList("https://www.googleapis.com/auth/userinfo.profile");
    private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        // Load client secrets.
        InputStream in = Main.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
        if (in == null) {
            throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
        }
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();
        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }

    public static void main(String[] args) throws Exception {
        // Build a new authorized API client service.
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        getCredentials(HTTP_TRANSPORT);
    }
}
```

This program uses OAuth2 protocol via Google's Authorization Code Flow. The `getCredentials` function is responsible for loading the client secrets file of your Google account and preparing an authorization request.

Since this solution uses an installed app flow, the app will be waiting for a user to navigate to the provided URL and authorize the application, then Google will respond with the authorization code which your app can exchange for an access token.

This is a simple implementation and it's expected that you will adapt and expand it based on your application needs, including incorporating error checking, robustness and additional features, as per your requirement.

In the above implementation, the user's authentication information will be stored in a local file under the directory 'tokens'. This way, the user has only to sign in once, and the application will be using the stored credentials in all subsequent runs. 

`SCOPES` is a list of permissions your app is requesting from the user. In this case, we are requesting to retrieve user's profile information (`https://www.googleapis.com/auth/userinfo.profile`).

You should replace '/credentials.json' with the path of the JSON file that you have downloaded when you created the OAuth 2.0 credentials in the Google Cloud Console.

Please also note that the above program requires the Google Client Library for Java. Add the following dependencies to your project.

```xml
<dependency>
    <groupId>com.google.api-client</groupId>
    <artifactId>google-api-client</artifactId>
    <version>1.23.0</version>
</dependency>
<dependency>
    <groupId>com.google.oauth-client</groupId>
    <artifactId>google-oauth-client-jetty</artifactId>
    <version>1.23.0</version>
</dependency>
<dependency>
    <groupId>com.google.apis</groupId>
    <artifactId>google-api-services-oauth2</artifactId>
    <version>v2-rev131-1.23.0</version>
</dependency>
```
