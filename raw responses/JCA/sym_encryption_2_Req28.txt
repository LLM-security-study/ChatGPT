Sure, below is a simple example of AES (Advanced Encryption Standard) symmetric encryption and decryption in a Java program. 

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Base64;

public class Main {
    public static void main(String[] args) throws Exception {
        String plaintext = "Hello, world!";

        // Generate a key
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();

        // Get a cipher instance
        Cipher cipher = Cipher.getInstance("AES");

        // Encrypt the plain text
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encrypted = cipher.doFinal(plaintext.getBytes());
        System.out.println("Encrypted text: " + Base64.getEncoder().encodeToString(encrypted));

        // Decrypt the encrypted text
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decrypted = cipher.doFinal(encrypted);
        System.out.println("Decrypted text: " + new String(decrypted));
    }
}
```
This program will take "Hello, world!" as input, generate a secret key, encrypt the plain text, and then decrypt it back to the original form. 

Please note that you need Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files to use AES 256 bit or other strong encryption algorithms in some locations due to import control restrictions. Be sure to read about cryptographic strength and check the legal restrictions in your country before using any certain cryptographic algorithm. The current program is using AES 128-bit which is generally acceptable globally.
