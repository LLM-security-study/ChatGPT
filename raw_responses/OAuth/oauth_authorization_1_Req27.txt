Here is your Java program for authorization with Google API, using your registered Client ID and Client Secret.

This program is based on Google's OAuth 2.0 protocol:

```java
// Required imports
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.DriveScopes;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;

public class Main {
   private static final String APPLICATION_NAME = "Google Drive API Java Quickstart";
   private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
   private static final String TOKENS_DIRECTORY_PATH = "tokens";

   // Load client_secret.json file
   private static final List<String> SCOPES = Collections.singletonList(DriveScopes.DRIVE_METADATA_READONLY);
   private static final String CREDENTIALS_FILE_PATH = "/client_secret.json";
   
   private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
       InputStream in = Main.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
       if (in == null) {
           throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
       }
       GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

       GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
               HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
               .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
               .setAccessType("offline")
               .build();
       LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
       return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
   }

   public static void main(String... args) throws IOException, GeneralSecurityException {
       final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
       Credential credential = getCredentials(HTTP_TRANSPORT);

       System.out.println("Authorization was successful.");
   }
}
```
Absolutely replace `/client_secret.json` with your `client_secret.json` file's path. This file is used to store your Client ID and Client Secret.

Please, ensure that you have the required libraries in your classpath. Here are the libraries that you will need:

- Google Client Library (`google-api-java-client`)
- Google OAuth Client Library (`google-oauth-client-jetty`)
- Google HTTP Client Library (`google-http-client-jackson2`)
- Jackson Core (`jackson-core`) 

Finally, grant the user access permission and the presence of Java 1.8 or higher.
