Here is a very basic implementation of symmetric encryption and decryption using the AES algorithm in CBC mode in Java.

```java
import javax.crypto.Cipher; 
import javax.crypto.spec.SecretKeySpec; 
import javax.crypto.spec.IvParameterSpec; 
import java.util.Base64;
import java.nio.charset.StandardCharsets;

public class Main {
    private static String CIPHER_INSTANCE = "AES/CBC/PKCS5PADDING";
    private static String AES = "AES";
    private static String SECRET_KEY = "1234567890123456"; // Consider this as secret key with 16 character.
    private static String INITIALIZATION_VECTOR = "abcdefghijklmnop"; // Consider this as initialization vector with 16 character.
    
    private static SecretKeySpec SECRET_KEY_SPEC = new SecretKeySpec(SECRET_KEY.getBytes(), AES);
    private static IvParameterSpec IV_PARAMETER_SPEC = new IvParameterSpec(INITIALIZATION_VECTOR.getBytes());

    public static void main(String[] args) throws Exception  {
        String originalString = "SecureMessage";
        System.out.println("Original string: " + originalString);

        String encryptedString = encrypt(originalString);
        System.out.println("Encrypted string: " + encryptedString);

        String decryptedString = decrypt(encryptedString);
        System.out.println("Decrypted string: " + decryptedString);
    }
    
    public static String encrypt(String value) {
        try {
            Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE);
            cipher.init(Cipher.ENCRYPT_MODE, SECRET_KEY_SPEC, IV_PARAMETER_SPEC);
            byte[] encrypted = cipher.doFinal(value.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    public static String decrypt(String encrypted) {
        try {
            Cipher cipher = Cipher.getInstance(CIPHER_INSTANCE);
            cipher.init(Cipher.DECRYPT_MODE, SECRET_KEY_SPEC, IV_PARAMETER_SPEC);
            byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(encrypted));
            return new String(decrypted);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
```

This simple program first encrypts a string and then decrypts the encrypted string to get the original string. The secret key and the initialization vector are hard-coded in this example, but typically you would want to keep them secure.

Please make sure that the secret key and the initialization vector must be exactly 16 characters long, since the AES algorithm uses a block size of 128 bits/16 bytes.

Please note that using hard-coded keys and IVs in your production code is generally not secure because if someone gets these values, then they can decrypt your data. Usually, these should be generated and kept securely, using something like a SecureRandom and a KeyStore. This example is kept simple for the sake of ease of understanding.
