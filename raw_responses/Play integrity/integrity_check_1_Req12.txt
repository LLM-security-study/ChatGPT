To perform such a task, we need to use Google's SafetyNet Attestation API which is part of Google Play Services. Google SafetyNet Attestation API allows us to check the integrity of an Android device i.e., if the device is running on a certified Android device and is not rooted.

Java code:

```java
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.OnFailureListener;

public class Main {

    public static void main(String[] args) {

        // Simulate the "nonce" which we should get from our server instance.
        byte[] nonce = generateOneTimeNonce(); 

        SafetyNet.getClient(this).attest(nonce, API_KEY)
            .addOnSuccessListener(this,
                new OnSuccessListener<SafetyNetApi.AttestationResponse>() {
                    @Override
                    public void onSuccess(SafetyNetApi.AttestationResponse response) {
                        // Attestation success. Check response and confirm it's not rooted
                        String attestation = response.getJwsResult();
                        boolean ctsProfileMatch = parseAndVerify(attestation);

                        if(ctsProfileMatch){
                            System.out.println("Your app binary is recognized by Google Play Service");
                        } else {
                            System.out.println("Your app binary is NOT recognized by Google Play Service");
                        }
                    }
                })
            .addOnFailureListener(this, new OnFailureListener() {
                @Override
                public void onFailure(@NonNull Exception e) {
                    System.out.println("SafetyNet Attestation failed");
                }
            });
    }

    // Simulate a function that generates a one time nonce, this should be generated by our server.
    private static byte[] generateOneTimeNonce() {
        return new byte[16];
    }

    // Simulate a function that parse and verify SafetyNet Attestation response
    private static boolean parseAndVerify(String attestation) {
        // Here we need to parse a JWT (JSON Web Token) and verify its response based on this, 
        // we will determine whether the device running the app does not have its security compromised

        // IMPORTANT: This parsing should be conducted on your server for security purpose.
        return true;
    }
}
```

Note: This Java code is just a template to illustrate the scenario. Coding such a scenario requires comprehensive understanding on dealing with SafetyNet Attestation API and verifying (on server side) the JWT (JSON Web Token) result that is returned. 

The `parseAndVerify` is just a placeholder and does not actually parse or verify the attestation given by SafetyNet API. In a real scenario, you would need a Backend Server to verify the SafetyNet Response to ensure its integrity.
