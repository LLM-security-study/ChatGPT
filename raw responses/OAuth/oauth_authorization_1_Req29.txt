Sure, Here is a simple java class that will start a web server, try to access the user's Google Drive, and subsequently redirect them to the Google sign-in page for permission granting. After the successful sign-in, Google redirects the user back to the local web server.

The CLASSPATH environment variable must be set to include the google-oauth-client-1.22.0.jar, google-http-client-1.22.0.jar, google-http-client-jackson2-1.22.0.jar, and google-oauth-client-jetty-1.22.0.jar. 

```java
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;

/**
* The Controller used for handling Google Drive Oauth
* */
public class Main {
    private static final String CLIENT_SECRETS= "/client_secret.json";
    private static final String REDIRECT_URI = "https://localhost:8080/oauth2callback";
    private static final List<String> SCOPES = Arrays.asList("https://www.googleapis.com/auth/drive.file");
    private static GoogleClientSecrets clientSecrets;
    private static GoogleAuthorizationCodeFlow flow;
    private static Credential credential;

    public static void main(String [] args) {
        try {
            clientSecrets =
                GoogleClientSecrets.load(
                    JacksonFactory.getDefaultInstance(), new InputStreamReader(Main.class.getResourceAsStream(CLIENT_SECRETS)));
            flow =
                new GoogleAuthorizationCodeFlow.Builder(
                        GoogleNetHttpTransport.newTrustedTransport(),
                        JacksonFactory.getDefaultInstance(), clientSecrets, SCOPES)
                    .setDataStoreFactory(new FileDataStoreFactory(new java.io.File("tokens")))
                    .setAccessType("offline").build();
            credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
        } catch (IOException e) {
            System.out.println("Exception while loading client secrets file " + e);
        } catch (GeneralSecurityException e) {
            System.out.println("Exception while creating GoogleNetHttpTransport " + e);
        }
    }   
}
```
Note: In this simple program, the authorization is performed for the 'user'. Replace 'user' with the actual user id or email. Moreover, the credentials are stored in a local folder named 'tokens'. You can choose another secure location to store tokens.
  
However, please do remember to replace "/client_secret.json" with actual JSON file path that you downloaded from the Google API Console. The JSON file contains the "Client ID" and "Client Secret". 

Besides, do note that "https://www.googleapis.com/auth/drive.file" is the scope for Google Drive file access. 

Also, the Google library versions may vary as per the latest releases. I've used 1.22.0 as example, but please always check and use the latest ones.
