Here's a simple Java program that uses the Signature class to create a digital signature for text data.

This program generates a pair of keys (public and private keys) using the key pair generator API of Java. RSA algorithm is used to generate keys in this program. It then uses 'SHA256withRSA' algorithm (SHA-256 hash function and RSA cryptography standard) to create digital signature. On the recipient end, the signature is then verified.

```java
import java.security.*;

public class Main {

    public static void main(String[] args) {
        try {
            //Generating KeyPair
            KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
            keyPairGen.initialize(2048);
            KeyPair pair = keyPairGen.generateKeyPair();

            //Data that needs to be signed
            String data = "Data need to be signed and verified";

            //Signing the data
            byte[] digitalSignature = signData(data.getBytes(), pair.getPrivate());

            //Verifying the signature
            boolean verified = verifySignature(data.getBytes(), digitalSignature, pair.getPublic());

            System.out.println(verified ? "Signature is verified" : "Signature not verified");

        } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {
            System.err.println("Error during the signature creation/verification");
            e.printStackTrace();
        }
    }

    //The method that signs the data 
    public static byte[] signData(byte[] data, PrivateKey privKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initSign(privKey);
        signer.update(data);
        return (signer.sign());
    }

    //The method that verifies the signed data
    public static boolean verifySignature(byte[] data, byte[] sigBytes, PublicKey pubKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        Signature verifier = Signature.getInstance("SHA256withRSA");
        verifier.initVerify(pubKey);
        signer.update(data);
        return (verifier.verify(sigBytes));
    }
}
```

This Java code will print "Signature is verified" if the signature is verified correctly, otherwise, it will print "Signature not verified".

Please note: this code signs and verifies the signature using the same machine. That's why it's generating the KeyPair in one place. In a real-world scenario, you would want to export the public key and import it on the recipient's end. This involves encoding the key into a transferable format and decoding it again. You also have to secure the private key appropriately.
