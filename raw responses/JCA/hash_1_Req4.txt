Sure, here's a simple Java program that computes the hash value of a string using the MD5 hash function.

```java
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.math.BigInteger; 

public class Main
{
    public static String getMD5Hash(String input)
    {
        try 
        {
            // Static getInstance method is called with hashing MD5 
            MessageDigest md = MessageDigest.getInstance("MD5"); 

            // digest() method is called to calculate message digest
            // of an input digest() return array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 

            // Convert byte array into signum representation  
            BigInteger no = new BigInteger(1, messageDigest); 

            // Convert message digest into hex value  
            String hashtext = no.toString(16); 

            while (hashtext.length() < 32)
                hashtext = "0" + hashtext; 

            return hashtext; 
        }  
        catch (NoSuchAlgorithmException e)
        {
            throw new RuntimeException(e); 
        } 
    }

    public static void main(String args[]) throws NoSuchAlgorithmException 
    { 
        System.out.println("Hash Value: " + getMD5Hash("MyInputString"));  
    } 
}
```

This program uses the MD5 message-digest algorithm which is a widely used cryptographic hash function that produces a 128-bit (16-byte) hash value. It is commonly used to check the integrity of files. However, MD5 is not collision-resistant; as of 2019, a chosen-prefix collision attack can be carried out for a few thousand dollars in as little time as two days to find two inputs hashing to the same value. It is thus considered broken for functions like SSL certificates or integrity checking that rely on a collision-resistant property.

So please consider using SHA-256 or SHA-3 for your program if you are concerned about security.
