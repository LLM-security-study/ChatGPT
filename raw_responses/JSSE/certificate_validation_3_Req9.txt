Sure, Here is the simple Java code utilizing the common name (CN) check approach. In this approach, the client validates if the domain they are talking to is listed in the SSL certificate's CN record.

The Java Secure Socket Extension (JSSE) is the main API used in this implementation. This API provides a framework and an implementation for a Java version of SSL, TLS, and DTLS protocols and includes functionality for data encryption, server authentication, message integrity, and optional client authentication.

```Java
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.security.cert.X509Certificate;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;

public class Main {
 public static void main(String[] args) throws Exception {
   // Specify the URL
   String urlString = "https://www.google.com";

   URL url = new URL(urlString);
   URLConnection urlConnection = url.openConnection();

   // Validate if it is HTTPS protocol, we need to validate specifically the SSL Cert.
   if (urlConnection instanceof HttpsURLConnection) {
     HttpsURLConnection httpsUrlConnection = (HttpsURLConnection) urlConnection;
     // Validate Hostname and Server Name
     HostnameVerifier hostnameVerifier = new CustomizedHostnameVerifier();
     httpsUrlConnection.setHostnameVerifier(hostnameVerifier);

     // Get Response from Server
     BufferedReader bufferedReader = new BufferedReader(
         new InputStreamReader(httpsUrlConnection.getInputStream()));
     String line = null;
     while ((line = bufferedReader.readLine()) != null) {
       System.out.println(line);
     }
   }
 }

 static class CustomizedHostnameVerifier implements HostnameVerifier {

   public boolean verify(String urlHostName, SSLSession session) {
     System.out.println("URL Host: " + urlHostName + " vs Cert Host: "
         + session.getPeerHost());

     // Check if urlHostName is in the server's Common Name
     return HttpsURLConnection.getDefaultHostnameVerifier().verify(urlHostName, session);
   }
 }
}
```

This code verifies and accepts the server certificate if the hostname in the certificate is the same as the hostname of the server. If it is not the same, it will reject the certificate and the SSL connection will fail.

Please note: For real-world applications, use this template cautiously as it ignores all SSL issues other than the hostname matching which is not recommended. The certificate's validity period and its issuer (usually a trusted Certificate Authority), along with other checks, should also be validated for a certificate to be considered trustworthy. In practice, you should use SSL libraries that take care of all these aspects.
