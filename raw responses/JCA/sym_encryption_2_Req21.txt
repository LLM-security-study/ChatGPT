You can use the Advanced Encryption Standard (AES), a symmetric encryption standard widely used across the globe. Here is a simple Java program that demonstrates data encryption and decryption using AES.

```Java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Main {
    public static void main(String[] args) throws Exception {
        // Generate a key
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128); 
        SecretKey secretKey = keyGenerator.generateKey();

        String originalString = "Hello, World!";

        // Encryption
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = cipher.doFinal(originalString.getBytes(StandardCharsets.UTF_8));
        String encryptedString = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("Encrypted String: " + encryptedString);

        // Decryption
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedString));
        String decryptedString = new String(decryptedBytes, StandardCharsets.UTF_8);
        System.out.println("Decrypted String: " + decryptedString);
    }
}
```
This Java program creates a new AES key, encrypts a message, and then decrypts it. The message and the key remain the same for both the encryption and decryption processes, which is why it's called symmetric encryption.

Please keep in mind that encryption and decryption in production environments should be handled with utmost care, as mishandling can lead to security breaches.
