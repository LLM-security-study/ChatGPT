Sure, here's how you can create a simple program implementing symmetric cryptography using AES (Advanced Encryption Standard).

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class Main {
    public static void main(String[] args) {
        try {
            // Create a KeyGenerator
            KeyGenerator keygen = KeyGenerator.getInstance("AES");
            keygen.init(128);
            // Generate the secret key
            SecretKey skey = keygen.generateKey();
            // Get the bytes of the secret key
            byte[] raw = skey.getEncoded();

            // Set the cipher to AES
            Cipher cipher = Cipher.getInstance("AES");
            // Initialize to encrypt mode
            cipher.init(Cipher.ENCRYPT_MODE, skey);
            String message = "Hello, World!";
            System.out.println("Original message: " + message);

            // Encrypt the message
            byte[] encrypted = cipher.doFinal(message.getBytes());

            StringBuilder sb = new StringBuilder();
            for (byte b : encrypted) {
                sb.append((char)b);
            }

            // Print the encrypted message
            System.out.println("Encrypted message: " + sb.toString());

            // Initialize to decrypt mode
            cipher.init(Cipher.DECRYPT_MODE, skey);
            // Decrypt the message
            byte[] decrypted = cipher.doFinal(encrypted);
            String decryptedMessage = new String(decrypted);

            // Print the decrypted message
            System.out.println("Decrypted message: " + decryptedMessage);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```
This program will first generate a secret AES key, then use that key to encrypt a message, and finally decrypt that message using the same key. 

Keep in mind for your own cryptographic needs, you'll want to take additional steps to ensure the confidentiality, integrity, and availability of your data. 

This example is provided as a simple illustration of the symmetric cryptography concept and does not include error checking or security measures that would be necessary in a real-life implementation. 

It is also important to note that usage of real life cryptographic applications are subject to legal restrictions and regulations in many jurisdictions. Be sure to understand and comply with all relevant laws and regulations for your jurisdiction before implementing any cryptographic system.

Lastly, do remember to handle your cryptographic keys securely in a production environment, the current premise is for educational purpose where the key is generated and used instantly. 

Please, always seek expert advice if you are unsure about any aspects of information or application security.
