The major API you would use for this implementation is "javax.net.ssl", which allows you to develop network components for secure SSL/TLS communications. The "HostnameVerifier" class, a component of this package, verifies a hostname against the verified server's SSLSession after a successful SSL handshake.

Here's a Java program you can follow for this implementation:

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.net.ssl.SSLSession;
import java.io.IOException;
import java.net.URL;

public class Main {
    
    public static void main(String[] args) {
        String hostname = "www.example.com";

        try {
            URL url = new URL("https://" + hostname);
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

            conn.setHostnameVerifier((hostname1, session) -> verifyHostname(hostname1, session));

            conn.connect();

            // Check the result
            if (conn.getResponseCode() == HttpsURLConnection.HTTP_OK) {
                System.out.println(hostname + " has been verified successfully.");
            } else {
                System.out.println("Failed to verify " + hostname);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private static boolean verifyHostname(String hostname, SSLSession session) {
        if (hostname.equals(session.getPeerHost())) {
            try {
                String verifiedHostname = session.getPeerPrincipal().getName();
                verifiedHostname = verifiedHostname.substring(verifiedHostname.indexOf("CN=") + "CN=".length());
                return hostname.equals(verifiedHostname);
            } catch (SSLPeerUnverifiedException e) {
                return false;
            }
        }
        return false;
    }
}
```
In this program, URL.openConnection sets up a connection to the specified URL. HttpsURLConnection.setHostnameVerifier sets a new HostnameVerifier. Upon a successful handshake, HostnameVerifier.verify is called to validate the server's hostname to guard against man-in-the-middle attacks.

Note, the default HostnameVerifier in HttpsURLConnection performs a basic verification that the server's hostname matches the hostname in its SSL certificate's Common Name (CN) or Subject Alternative Name (SAN). This program demonstrates a custom HostnameVerifier that performs a more rigorous verification. 

The 'verifyHostname' method verifies that the hostname is found in the Subject Principal's Common Name, strengthening the default verification.

Remember to replace 'www.example.com' with the hostname you want to verify.
