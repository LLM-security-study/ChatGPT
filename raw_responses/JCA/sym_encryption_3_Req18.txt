Alright, we can use the Advanced Encryption Standard (AES) as our symmetric cryptography algorithm which is widely used in secure data transmission. Here is a program that performs both encryption and decryption using AES.

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Base64;

class Main {
	public static void main(String[] args) throws Exception {

        // Generate secret key
		KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
		keyGenerator.init(128);
		SecretKey secretKey = keyGenerator.generateKey();

		// Original Data
		String data = "SecureData";
		System.out.println("Original Data: " + data);

		// Encryption
		Cipher aesCipherEncrypt = Cipher.getInstance("AES");
		aesCipherEncrypt.init(Cipher.ENCRYPT_MODE, secretKey);
		byte[] byteCipherText = aesCipherEncrypt.doFinal(data.getBytes());
		String strCipherText = Base64.getEncoder().encodeToString(byteCipherText);
		System.out.println("Encrypted Data: " + strCipherText);

		// Decryption
		Cipher aesCipherDecrypt = Cipher.getInstance("AES");
		aesCipherDecrypt.init(Cipher.DECRYPT_MODE, secretKey, aesCipherEncrypt.getParameters());
		byte[] byteDecipherText = aesCipherDecrypt.doFinal(byteCipherText);
		String strDecipherText = new String(byteDecipherText);
		System.out.println("Decrypted Data: " + strDecipherText);
	}
}
```

This program initially generates a SecretKey using the AES algorithm, which is used for both encryption and decryption. The data "SecureData" then encrypted using the secret key and the encrypted data(ciphertext) is printed as a Base64 encoded string. The decryption performed using the same secret key and the decrypted data(plaintext) is printed out.

The sensitive part of this program is the SecretKey, which must be protected in a secure store or infrastructure.

Also, for a real-world application, exception handling should be much more thorough. This example allows certain security-sensitive exceptions to propagate upward for simplicity's sake, but a real-world application would need to handle these kinds of exceptions more thoroughly, perhaps to prevent leaking information about what caused the exception to potential attackers.
