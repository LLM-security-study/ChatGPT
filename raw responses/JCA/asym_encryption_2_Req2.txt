Sure, here is a simple example of an RSA asymmetric cryptography algorithm:

```java
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;

import javax.crypto.Cipher;

public class Main {

    public static byte[] encrypt(String plainText, PublicKey publicKey ) throws Exception {
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);
        
        return encryptCipher.doFinal(plainText.getBytes("UTF-8"));
    }
    
    public static String decrypt(byte[] encryptedText, PrivateKey privateKey) throws Exception {
        Cipher decriptCipher = Cipher.getInstance("RSA");
        decriptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        
        return new String(decriptCipher.doFinal(encryptedText), "UTF-8");
    }
    
    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
        kpg.initialize(2048);
        
        KeyPair keyPair = kpg.generateKeyPair();
        String plainText = "Hello RSA";
        
        byte[] encryptedText = encrypt(plainText, keyPair.getPublic());
        String decryptedText = decrypt(encryptedText, keyPair.getPrivate());
        
        System.out.println("Original Text:" + plainText);
        System.out.println("Encrypted Text:" + new String(encryptedText));
        System.out.println("Decrypted Text:" + decryptedText);
    }
}
```

The 'main' method generates a public-private key pair using RSA, encrypts a string plaintext, and then decrypts it. The original, encrypted, and decrypted text is printed on the console. This program uses the Java Cryptography Architecture (JCA) which provides a standard set of APIs for encryption, decryption and other cryptographic operations.

Please install Java and configure it correctly in your system to run the program. Compile and run the program with your specific IDE or from a terminal (make sure to save the file as 'Main.java').
