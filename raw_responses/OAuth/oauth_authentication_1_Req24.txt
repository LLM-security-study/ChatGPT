Implementing Google Single-Sign-On (SSO) in Java involves using Google's OAuth 2.0 service, for which we can use the Google Client Library. Also, it's important to handle HTTP requests and responses, for this, we'll use the Servlet API.

```java
// Java program to integrate Google Sign-On for user authentication into a web application

import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;

public class Main extends HttpServlet{

    private static final String CLIENT_SECRET_FILE = "/path/to/your/client_secret.json";
    private static final Collection<String> SCOPES = Arrays.asList("email", "profile");
    private static final String CALLBACK_URI = "http://localhost:8080/oauth2callback";

    private GoogleAuthorizationCodeFlow initializeFlow() throws IOException {
        return new GoogleAuthorizationCodeFlow.Builder(new NetHttpTransport(), JacksonFactory.getDefaultInstance(),
                GoogleClientSecrets.load(JacksonFactory.getDefaultInstance(), 
                        new FileReader(CLIENT_SECRET_FILE)), SCOPES)
                .setAccessType("online")
                .setApprovalPrompt("auto").build();
    }
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        Credential credential = initializeFlow().loadCredential("user");
        if (credential != null && credential.getAccessToken() != null) {
            resp.setStatus(HttpServletResponse.SC_OK);
            resp.getWriter().print("User is authenticated!");
        } else {
            resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            resp.getWriter().print("User is not authenticated!");
        }
    }
}
```
This program creates an HTTP servlet (Main) that checks if a user is authenticated. It does this by looking at the user's credentials, which were obtained using the Google Authorization Code flow. If a credential object exists, and it contains an access token, it means the user is authenticated. If not, the user is not authenticated.

This example only checks if a user is authenticated or not. It's up to your application's logic to decide what to do with an authenticated user (e.g., allow them access to a resource) and an unauthenticated user (e.g., redirect them to a login page). Also note that this is a simple demonstration, in real-world scenarios there might be required additional configurations depending on the infrastructure and requirements.

Before running the application, replace "/path/to/your/client_secret.json" with your actual client secret json file path, and replace "http://localhost:8080/oauth2callback" with your actual callback uri.
