Here is a simple implementation of symmetric cryptography algorithm using Java Cryptography Extension (JCE). This example uses the Advanced Encryption Standard (AES) algorithm for encryption and decryption:

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;

public class Main {

    public static void main(String[] args) throws  Exception {
        String plainText = "Hello, World!";

        // Generate a key
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();

        // Create Cipher Instance
        Cipher aesCipher = Cipher.getInstance("AES");

        // Initialize Cipher
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);

        // Encrypt the data
        byte[] byteDataToEncrypt = plainText.getBytes();
        byte[] byteCipherText = aesCipher.doFinal(byteDataToEncrypt);

        // Initialize the same cipher for decryption
        aesCipher.init(Cipher.DECRYPT_MODE, secretKey);

        // Decrypt the data
        byte[] byteDecryptedText = aesCipher.doFinal(byteCipherText);
        String decryptedText = new String(byteDecryptedText, StandardCharsets.UTF_8);

        // Print the decrypted text
        System.out.println(decryptedText);
    }
}
```

This program will decrypt previously encrypted text using AES symmetric encryption. Our plaintext was "Hello, World!". The program generates a random secret key, encrypts the data, and then decrypts it using the same key.

Please, be aware that you must have installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in your JRE, because some countries have restricted the key size in cryptography.
