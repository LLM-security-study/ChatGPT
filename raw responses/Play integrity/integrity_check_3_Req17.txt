The primarily used library/API to check integrity of Android devices is SafetyNet API from Google Play Services. For the purpose of the task, let's assume that the API key is provided and stored in a string named key.

The SafetyNet Attestation API helps you assess the security and compatibility of the Android environments in which your apps run. You can use this API to analyze devices that have installed your app.

First of all, we have to add dependency in our project's build.gradle file:

```java
implementation 'com.google.android.gms:play-services-safetynet:17.0.0'
```

Please note: Above code needs to be added in the app level build.gradle file.

Now the code for the main part:

```java
//Please replace MainActivity with your Activity name
public class Main extends AppCompatActivity {

    private static final String TAG = "MainActivity";
    //Assuming key to be available, replace "YOUR_API_KEY" with actual key
    private static final String key = "YOUR_API_KEY";
    
    private GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addApi(SafetyNet.API)
                .build();
        mGoogleApiClient.connect();

        SafetyNet.SafetyNetApi.attest(mGoogleApiClient, nonceGenerator())
                .setResultCallback(new ResultCallback<SafetyNetApi.AttestationResult>() {

                    @Override
                    public void onResult(SafetyNetApi.AttestationResult result) {
                        Status status = result.getStatus();
                        if (status.isSuccess()) {
                            //Device passes SafetyNet API
                            //Returns JWS Message
                            //For more details: https://developer.android.com/training/safetynet/attestation#java
                            Log.i(TAG, "Successfully received SafetyNet Result: "+result.getJwsResult());
                        } else {
                            //Device fails SafetyNet API
                            Log.i(TAG, "Failed to receive SafetyNet Result: "+status);
                        }
                    }
                });
    }

    private byte[] nonceGenerator(){
        //Generate 256-bit(32-byte) nonce
        byte[] nonce = new byte[32];
        new SecureRandom().nextBytes(nonce);
        return nonce;
    }
}
```

Please note that, REAL nonce should be at least 16 bytes in length, and must be unique for each call you make. Don't use the dummy nonce above in production.
