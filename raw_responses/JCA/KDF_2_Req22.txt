Sure, below is a simple Java program that generates a SecretKey from a password using PBKDF2WithHmacSHA1 algorithm from Java's standard library.

```java
import javax.crypto.*;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.spec.KeySpec;
import java.security.SecureRandom;

public class Main {
    private static final String PBKDF2_ALGORITHM = "PBKDF2WithHmacSHA1";
    private static final int KEY_SIZE = 256;
    private static final int SALT_SIZE = 256;
    private static final int ITERATIONS = 1000;

    public static void main(String[] args) {
        try {
            // Get password from user
            String password = "userPassword";  // replace with actual password

            // Generate salt
            SecureRandom random = new SecureRandom();
            byte[] salt = new byte[SALT_SIZE / 8];
            random.nextBytes(salt);

            // Create key
            SecretKeyFactory skf = SecretKeyFactory.getInstance(PBKDF2_ALGORITHM);
            KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATIONS, KEY_SIZE);
            SecretKey tmp = skf.generateSecret(spec);
            SecretKey secretKey = new SecretKeySpec(tmp.getEncoded(), "AES");

            // Print the secret key
            System.out.println(secretKey);

        } catch (Exception e) {
            System.out.println("Error generating secret key");
            e.printStackTrace();
        }
    }
}
```

Here, `PBKDF2WithHmacSHA1` is a password-based key derivation function. A secure random salt is generated by the `SecureRandom` class, and the salt, along with the specified number of iterations and the password, is used to generate the SecretKey.

Please note:
1. Use ACTUAL password in the place of "userPassword" as the program is only for explanatory purposes.
2. The print command outputs the secret key in a not-so-user-friendly format. You might want to encode it using Base64 or a similar encoding for a prettier output.
3. This is a console-based implementation. If you are building a UI-based solution, you'd need to adapt this code to accept the password from your user interface.
4. You should securely store the salt somewhere since it is needed along with the password to reproduce the key.
