To verify the integrity of an Android app, you can use the SafetyNet Attestation API provided by Google Play Services. The SafetyNet Attestation API helps you assess the security and compatibility of the Android environment in which your app is running. This allows you to take decisions about what your app should do in certain cases (i.e., if a user tries to open the app in a potentially harmful environment).

`GoogleApiClient` -> This is a client attached with Google Play Services and offers a host of APIs, one of which is SafetyNet API.

Here is the Java source code for Main class:

```java
// Import necessary class libraries
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;
import com.google.android.gms.tasks.Task;

public class Main {
    public static void main(String args[]) {
        // Initialize Google API Client
        GoogleApiClient client = new GoogleApiClient.Builder(context)
                .addApi(SafetyNet.API)
                .addConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {
                    @Override
                    public void onConnected(Bundle bundle) {
                        // Client connected successfully
                    }

                    @Override
                    public void onConnectionSuspended(int i) {
                        // Client connection suspended
                    }
                })
                .addOnConnectionFailedListener(new GoogleApiClient.OnConnectionFailedListener() {
                    @Override
                    public void onConnectionFailed(ConnectionResult connectionResult) {
                        // Client connection failed
                    }
                })
                .build();

        client.connect();

        // Get SafetyNet Attestation
        String nonceData = "Sample Nonce Data";  // This should be a time-limited nonce generated by your app.

        Task<SafetyNetApi.AttestationResponse> result = SafetyNet.getClient(context)
                .attest(nonceData.getBytes(), "<Your API Key>");

        // Call response listener on response returned from API 
        result.addOnCompleteListener(new OnCompleteListener<SafetyNetApi.AttestationResponse>() {
                    @Override
                    public void onComplete(Task<SafetyNetApi.AttestationResponse> task) {
                        if (task.isSuccessful()) {
                            SafetyNetApi.AttestationResponse result = task.getResult();
                            // Perform checks on the API Response.
                        } else {
                            // An error occurred while communicating with the SafetyNet API
                        }
                    }
                });
    }
}
```

Note: As per your requirement, this is one of the ways to verify the app’s integrity. There are other ways like checking for system and app integrity manually (rooting, tampering APK, etc.), validating the app server side, etc.

Also, as an assistant, I must notify you that it is important to use this simple script as a part of a more extensive scheme for security. This script alone cannot guarantee the security of your app, it is always necessary to work in a multi-layered, in-depth security scenario.

Moreover, this is the high level structure but you might need to replace the `<Your API Key>` with your actual api key in the `attest` method, and also replace `context` with actual context.

Remember Main() is not the starting point of android applications. This is just for demonstration purpose. Actual implementation will be different.
