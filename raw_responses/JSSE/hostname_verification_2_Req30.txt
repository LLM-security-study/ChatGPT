Sure, here is a sample Java code using Java's SSLContext and SSLSocketFactory to verify the hostname in SSL/TLS connection.

```java
import javax.net.ssl.*;
import java.io.IOException;
import java.net.Socket;

public class Main {

    public static void main(String[] args) {
        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, new TrustManager[]{new X509TrustManager() {
                public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) {}
                public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) {}
                public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new java.security.cert.X509Certificate[]{}; }
            }}, new java.security.SecureRandom());

            SSLSocketFactory factory = sslContext.getSocketFactory();

            // Example of hostname and port
            SSLSocket socket = (SSLSocket) factory.createSocket("www.example.com", 443);

            socket.startHandshake();

            SSLSession session = socket.getSession();
            HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();
            if (!hostnameVerifier.verify("www.example.com", session)) {
                throw new SSLHandshakeException("Expected 'www.example.com', but find " + session.getPeerPrincipal());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

This program creates an SSL/TLS connection to "www.example.com" on port 443, and verifies the hostname using the default HostnameVerifier provided by HttpsURLConnection. If the verification fails, it throws an SSLHandshakeException.

Please replace "www.example.com" with the actual hostname that you want to connect to. This is a very basic implementation for understanding purpose, an actual production-level code would require additional error handling and optimizations.

NOTE: The SSLContext is initialized with a TrustManager that does not perform any checks, which means any certificate (even invalid ones) will be accepted. This is not secure! In a real-world application, you should use a more strict TrustManager.
