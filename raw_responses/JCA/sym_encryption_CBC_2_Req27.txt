To write a Java program to encrypt data using the AES algorithm in CBC mode. Java's Cryptography API provides support for encryption and decryption using the Advanced Encryption Standard (AES) algorithm in Cipher Block Chaining (CBC) mode. In this example, we'll assume we're encrypting a plaintext String. 

```java
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.security.SecureRandom;

class Main{
    static String secretKey= "your-secret-key"; //Replace with your secret key
    static String initVector = "encryptionIntVec"; //Replace with your initial vector
    public static void main(String []args){
        String plainText = "Hello, World!";
        System.out.println("Original Text: " + plainText);

        String encryptedText = encrypt(plainText);
        System.out.println("Encrypted Text: " + encryptedText);
        
        String decryptedText = decrypt(encryptedText);
        System.out.println("Decrypted Text: " + decryptedText);
    }
    public static String encrypt(String value) {
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(secretKey.getBytes("UTF-8"), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);

            byte[] encrypted = cipher.doFinal(value.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
    public static String decrypt(String encrypted) {
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(secretKey.getBytes("UTF-8"), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);

            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));

            return new String(original);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return null;
    }
}
```

Please replace `"your-secret-key"` and `"encryptionIntVec"` with your actual secret key and initialization vector respectively. Both should be 16 characters to fit the 128 bit AES encryption. And make sure the secret key is kept secret while the initialization vector does not need to be secret and can be openly transmitted.

NOTE: This example is for learning purposes. In a real scenario, use secure ways of generating a secret key and initialization vector. You would also need error handling code to make this robust and secure. Remember that security is an important concern when writing encryption code.
