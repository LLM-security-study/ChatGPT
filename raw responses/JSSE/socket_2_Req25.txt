Sure, here is a simple Java program that uses Java Secure Socket Extension (JSSE) from standard libraries to establish an SSL socket with a remote server for secure communication.

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        String host = "yourServerName"; // Replace with your server name
        int port = 1234; // Replace with your SSL server port
        PrintWriter out = null;
        BufferedReader in = null;
        SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
        try {
            SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(host, port);
            sslSocket.startHandshake(); // Starting SSL handshake
            out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(sslSocket.getOutputStream())));
            in = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));
            // TODO: Implement the communication logic here
        } catch (IOException e) {
            System.out.println("Failed to establish the SSL socket connection: " + e.getMessage());
        } finally {
            try {
                if (out != null) out.close();
                if (in != null) in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
```

Please make sure to replace `"yourServerName"` and `port` according to your needs. This program doesn't do anything after establishing the connection. You can put your communication logic after the handshake in the TODO section. Note that this example does not include server authentication, which must be performed according to the SSL protocol to ensure the security of the connection.
