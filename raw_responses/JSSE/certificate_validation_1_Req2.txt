Sure, below is the simple sample code snippet of a certificate validation program in Java using SSL sockets. It creates a client that connects to a server via an SSL Socket and follows the standard sun security API for validation. 

The primary Java APIs used for our implementation will be javax.net.ssl.* and java.security.cert.*

```java
import java.io.*;
import java.net.*;
import javax.net.ssl.*;

public class Main {
    public static void main(String[] args) {
        try {
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket socket = (SSLSocket) factory.createSocket("Your Server URL", 443);
            socket.startHandshake();

            SSLSession session = socket.getSession();
            java.security.cert.Certificate[] servercerts = session.getPeerCertificates();

            System.out.println("Server Certificates :");
            for (int i = 0; i < servercerts.length; i++) {
                System.out.println("- " + servercerts[i].toString());
            }

            OutputStream os = socket.getOutputStream();
            OutputStreamWriter osw = new OutputStreamWriter(os);
            BufferedWriter bw = new BufferedWriter(osw);

            String message = "Hello Server!";
            String sendMessage = message + "\n";
            bw.write(sendMessage);
            bw.flush();

        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (KeyManagementException e) {
            e.printStackTrace();
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (CertificateException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

Replace `"Your Server URL"` with the actual URL of your server. The socket will connect to the server and initiate a handshake, if the server's certificate is trusted, a session will be created.

Please modify and fill all the required exceptions as per your requirements. Make sure the server has SSL enabled and properly configured. 

This program would print server certificates upon successful connection and 'Hello Server!' is sent to the server. 

Remember that the actual process involves more steps including uploading your own certificates and dealing with secure connections on an enterprise level is complex enough to merit its own protocol – which is SSL (Secure Socket Layer), replaced by TLS (Transport Layer Security).
