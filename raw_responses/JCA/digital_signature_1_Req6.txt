Here is a basic implementation of a program that signs and verifies a message using Java. In the `Main` class, we have two methods signMessage and verifySignature.
```Java
import java.security.*;

public class Main {
    public static void main(String[] args) throws Exception {

        // Generate a DSA key pair
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("DSA");
        SecureRandom random = SecureRandom.getInstanceStrong();
        keyGen.initialize(1024, random);

        KeyPair pair = keyGen.generateKeyPair();
        PrivateKey privKey = pair.getPrivate();
        PublicKey pubKey = pair.getPublic();

        // Prepare the input message
        byte[] message = "Hello, World!".getBytes("UTF8");

        // Sign the Message
        byte[] digitalSignature = signMessage(privKey, message);

        // Verify the signature
        boolean isCorrect = verifySignature(pubKey, message, digitalSignature);
        System.out.println("Signature correct: " + isCorrect);
    }

    // Method for signing a message
    public static byte[] signMessage(PrivateKey privKey, byte[] message) throws Exception {

        Signature dsa = Signature.getInstance("SHA256withDSA");
        dsa.initSign(privKey);

        dsa.update(message);
        return dsa.sign();
    }

    // Method for verifying a signature
    public static boolean verifySignature(PublicKey pubKey, byte[] message, byte[] digitalSignature) throws Exception {

        Signature sig = Signature.getInstance("SHA256withDSA");
        sig.initVerify(pubKey);

        sig.update(message);
        return sig.verify(digitalSignature);
    }
}
```

When signing a message, a Signature object is created and initialized for signing with the private key. The message bytes are supplied to the Signature object, and the `sign` method is called to generate the signature.

When verifying a signature, another Signature object is created and initialized for verification with the public key. Again, the original message bytes are supplied (note that they must be exactly the same as the original message used to generate the signature), and the `verify` method is called with the signature. The `verify` method returns a boolean indicating whether the signature is correct.

Note: To run this code without exception it needs unrestricted policy files for JCE (Java Cryptography Extension), you can download from Oracle website.
