This program will entail the use of JSSE (Java Secure Socket Extension), a standard Java API developed for implementing SSL/TLS protocols in applications. The key classes of this API include "SSLSocket", "SSLSocketFactory", "SSLServerSocket", and "SSLServerSocketFactory". 

This program doesn't perform complete certificate validation, rather than it checks server certification only. Full SSL certificate validation will be more complex and will need trusted keystore, crl and ocsp check.

```java
import javax.net.ssl.*;

public class Main {

    public static void main(String[] args) {
        
        System.setProperty("https.protocols", "TLSv1,TLSv1.1,TLSv1.2");

        try {
            // specify the host and port 
            String host = "<host>";
            int port = <port>;
            
            // get the SSLContext object 
            SSLContext context = SSLContext.getInstance("TLS");

            // initialize the context 
            context.init(null, null, null);

            // Create SSLSocketFactory object
            SSLSocketFactory ssf = context.getSocketFactory();
            
            // Get the SSLSocket
            SSLSocket socket = (SSLSocket) ssf.createSocket(host, port);

            // start the handshake
            socket.startHandshake();
      
            // Get session after the connection is established
            SSLSession sslSession = socket.getSession();

            // print the certificate information
            System.out.println("Peer Host : " + sslSession.getPeerHost());
            System.out.println("Cipher suite : " + sslSession.getCipherSuite());
            System.out.println("Protocol : " + sslSession.getProtocol());

            // Get and print the SSLSession certificate
            java.security.cert.Certificate[] serverCerts = sslSession.getPeerCertificates();
            for (int i = 0; i < serverCerts.length; i++) {
                System.out.printf("%s %s : \n%s\n", serverCerts[i].getType(),
                        serverCerts[i].getPublicKey(),
                        serverCerts[i].toString());
            }

            socket.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

Please replace "<host>" and "<port>" with your server's host and port. Also, it is assumed that the trust store and key stores have been set in the system properties or the Java runtime environment.

If you want a more reliable certificate validation in production environment, it's a good practice to fully configure the SSLContext with appropriate KeyManager and TrustManager, consider to use external libraries like Bouncy Castle or Netty which provides more features.
