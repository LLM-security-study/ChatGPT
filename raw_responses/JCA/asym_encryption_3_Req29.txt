Sure, here's a simple Java program that performs asymmetric encryption using RSA algorithm:

```java
import java.security.*;
import javax.crypto.*;
import java.util.Base64;

public class Main {
  public static void main(String[] args) throws Exception {
    // Generate key pair
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
    keyGen.initialize(1024);
    KeyPair pair = keyGen.generateKeyPair();
    PrivateKey privateKey = pair.getPrivate();
    PublicKey publicKey = pair.getPublic();

    // Original text
    String originalText = "This is the text to be encrypted";
    System.out.println("Original Text: " + originalText);

    // Encrypt
    Cipher cipher = Cipher.getInstance("RSA");
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
    byte[] encryptedBytes = cipher.doFinal(originalText.getBytes());
    String encryptedText = Base64.getEncoder().encodeToString(encryptedBytes);
    System.out.println("Encrypted Text: " + encryptedText);

    // Decrypt
    cipher.init(Cipher.DECRYPT_MODE, privateKey);
    byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedText));
    String decryptedText = new String(decryptedBytes);
    System.out.println("Decrypted Text: " + decryptedText);
  }
}
```

In this program, the encryption is done with the public key, and the decryption is done with the private key which is the principle of asymmetric encryption. The RSA algorithm is used for the encryption-decryption. The original text is encrypted to an encrypted text which is then decrypted back to original text.

Please replace "This is the text to be encrypted" with your desired text. Also note that this is a simple program and may not be suitable for production use because it does not handle exceptions or edge cases. You may need to adapt the code to fit into your application.
