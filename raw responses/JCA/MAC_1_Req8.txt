Sure, here is the code.

```java
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.Scanner;

public class Main {

  public static void main(String[] args) {
    try {
      // Initialize a Scanner to get user input
      Scanner scanner = new Scanner(System.in);
      System.out.println("Enter your message:");
      String message = scanner.nextLine();

      // The secret key used for the HMAC generation (must be kept secret)
      byte[] key = "secret".getBytes();

      // Create a MAC instance using HMAC-SHA256
      Mac mac = Mac.getInstance("HmacSHA256");

      // Initialize it with the secret key
      SecretKeySpec secretKeySpec = new SecretKeySpec(key, "HmacSHA256");
      mac.init(secretKeySpec);

      // Generate the HMAC for the given message
      byte[] hash = mac.doFinal(message.getBytes()); 

      // Print the generated HMAC in hexadecimal format
      System.out.println(bytesToHex(hash));

    } catch (NoSuchAlgorithmException | InvalidKeyException e) {
      e.printStackTrace();
    }
  }

  // Method to convert a byte array into a hexadecimal string
  public static String bytesToHex(byte[] bytes) {
    StringBuilder sb = new StringBuilder();
    for (byte b : bytes) {
      sb.append(String.format("%02x", b));
    }
    return sb.toString();
  }
}
```

This program takes a message as input, computes the HMAC of the message with a secret key, and then outputs the computed HMAC. The HMAC is computed using the SHA-256 hash algorithm.

Please note that the secret key used in HMAC computation is directly provided in this demo, but it should be managed properly in a secure, production setting to avoid revealing it. 

Also, just a quick note about what a MAC does. It’s like a digital signature for a document. The MAC value protects both a document's data integrity as well as its authenticity, by allowing verifiers (who also possess the secret key) to detect any changes to the message content. 

Lastly, make sure to have appropriate exception handling code in a real-world scenario.
