Sure, here is a basic Java program that generates a cryptographic key and stores it in a keystore file. The file will be stored on your local file system. 

```java
import java.security.KeyStore;
import java.security.Key;
import java.util.Base64;
import java.security.KeyPairGenerator;
import java.security.KeyPair;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.security.SecureRandom;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.io.FileOutputStream;
import java.security.KeyStore.SecretKeyEntry;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class Main {
    public static void main(String[] args) {
        try {
            // Create the KeyStore object
            KeyStore keyStore = KeyStore.getInstance("JCEKS");

            // Create the key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256);
            Key key = keyGen.generateKey();

            // Create a key pair
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
            kpg.initialize(2048);
            KeyPair kp = kpg.generateKeyPair();
            PublicKey publicKey = kp.getPublic();
            PrivateKey privateKey = kp.getPrivate();

            // Init the keystore
            keyStore.load(null, null);
            KeyStore.PasswordProtection keyStorePP = new KeyStore.PasswordProtection("password".toCharArray());

            // Set the key entry
            SecretKeyEntry skEntry = new SecretKeyEntry((SecretKey) key);
            keyStore.setEntry("secretKeyAlias", skEntry, keyStorePP);

            // Store away the keystore
            FileOutputStream fos = new FileOutputStream("newKeyStoreFileName.jceks");
            keyStore.store(fos, "password".toCharArray());
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

In the code above, you generate a key with the `KeyGenerator` class. The key is stored in the variable `key`. The `KeyPairGenerator` class is used to generate a key pair (a public key and a private key). The generated key and key pair are then stored in a keyStore. The keyStore is then written to a file named `newKeyStoreFileName.jceks`.

NOTE: For simplicity, The suggested file name and password are hardcoded. But, In a production-level code, these need to be securely managed and should not be hardcoded. The code also lacks error handling and cleanup in case anything fails. It's strongly recommended to add appropriate error handling and cleanup, especially when dealing with security-sensitive operations like this.
