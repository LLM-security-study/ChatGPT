To generate a cryptographic key and store it in a keystore, you can make use of the KeyStore and the KeyPairGenerator classes in Java. Here's a simple program to create a 256-bit secret key and store it in a keystore.

```java
import java.io.FileOutputStream;
import java.security.KeyStore;
import java.security.KeyStore.SecretKeyEntry;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class Main {
    public static void main(String[] args) throws Exception {

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256); // for example
        SecretKey secretKey = keyGen.generateKey();

        KeyStore.ProtectionParameter protParam =
            new KeyStore.PasswordProtection("password".toCharArray());

        KeyStore.SecretKeyEntry skEntry =
            new SecretKeyEntry(secretKey);
        KeyStore ks = KeyStore.getInstance("JCEKS");

        ks.load(null, "password".toCharArray());
        ks.setEntry("secretKeyAlias", skEntry, protParam);

        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream("newKeyStoreFileName.jceks");
            ks.store(fos, "password".toCharArray());
        } finally {
           if (fos != null) {
              fos.close();
           }
        }
    }
}
```

This program will generate a 256 bit AES key, wrap it in a SecretKeyEntry for storage in a KeyStore, and then write the KeyStore to disk as a file named "newKeyStoreFileName.jceks". The keystore password is "password", and the key entry is accessed with the alias "secretKeyAlias". 

Please replace `"password"`, `"newKeyStoreFileName.jceks"` and `"secretKeyAlias"` with the actual values you want to set.
