Here's a basic Java example that generates a secret key and then saves it in a keystore file.

Please modify the names of 'keyalias' and 'storepswd' as your requirements. 

```java
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.*;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class Main {

    public static void main(String[] args) {
        try {
            // Generating random 256-bit long secret key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256);
            SecretKey secretKey = keyGen.generateKey();

            // Saving secret key to a keystore
            String keystoreFile = "myKeystore.jks";
            char[] password = "storepswd".toCharArray();
            String alias = "keyalias";
            KeyStore keyStore = KeyStore.getInstance("JCEKS");
            keyStore.load(null, null); // Initializing an empty Keystore
            KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry(secretKey);
            KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(password);
            keyStore.setEntry(alias, skEntry, protParam);

            // Writing the Keystore to a file
            try (FileOutputStream fos = new FileOutputStream(keystoreFile)) {
                keyStore.store(fos, password);
            }
        } catch (NoSuchAlgorithmException | KeyStoreException | IOException | CertificateException e) {
            e.printStackTrace();
        }
    }
}
```

This program generates a random AES key and stores it in a password-protected keystore file. The AES key is protected with the same password as the Keystore.

Please remember to replace `"storepswd"` and `"keyalias"` with your own password and key alias. And also replace `myKeystore.jks` with your own file name and path. This program doesn't catch all exceptions but provides a starting point for handling KeyStore.

NOTE: You may need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in your JRE lib/security directory to allow KeyGenerator to generate 256-bit keys.
