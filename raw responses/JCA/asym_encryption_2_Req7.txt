Here's a simplified example in Java using RSA algorithm which is most commonly used for data transmission:

```java
import java.security.*;
import javax.crypto.*;

public class Main {
    public static KeyPair generateKeyPair() throws Exception {
        KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
        generator.initialize(2048, new SecureRandom());
        KeyPair pair = generator.generateKeyPair();

        return pair;
    }
    
    public static byte[] encrypt(String plainText, PublicKey publicKey) throws Exception {
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);

        byte[] secretMessageBytes = plainText.getBytes("UTF-8");
        byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);

        return encryptedMessageBytes;
    }
    
    public static String decrypt(byte[] encryptedMessageBytes, PrivateKey privateKey) throws Exception {
        Cipher decryptCipher = Cipher.getInstance("RSA");
        decryptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        
        byte[] decryptedMessageBytes = decryptCipher.doFinal(encryptedMessageBytes);
        String decryptedMessage = new String(decryptedMessageBytes, "UTF-8");

        return decryptedMessage;
    }
    
    public static void main(String args[]) throws Exception {
        KeyPair pair = generateKeyPair();
        String testMessage = "This is the message to be encrypted";
        
        byte[] encryptedMessageBytes = encrypt(testMessage, pair.getPublic());

        String decryptedMessage = decrypt(encryptedMessageBytes, pair.getPrivate());
        
        System.out.println("Original Message: " + testMessage);
        System.out.println("Decrypted Message: " + decryptedMessage);
    }
}
```
This program works as follows: 

1. A KeyPair (Public key and Private key) are generated using the RSA algorithm.
2. The `encrypt` function takes plain text and the Public key as a parameter and returns the encrypted text.
3. The `decrypt` function takes encrypted text and the Private key as a parameter and returns the original/decrypted message.
4. In the `main` method, a test message is encrypted and then decrypted to demonstrate the functionality of RSA encryption and decryption.

You may need to handle the Exceptions in real-world examples, I have added `throws Exception` only for simplicity. 

**Note:** This Java program only works with short strings due to RSA limitation. To encrypt and decrypt larger data you need to use a symmetric key cipher (such as AES) to encrypt the data, and then use RSA to encrypt the AES key.
