In a Password-Based Key Derivation function, a password and a salt are required as input and it outputs a derived key.

Here is the Java program using the PBEKeySpec class from javax.crypto.spec package. It implements PBKDF2 with HMAC-SHA1 as the pseudo-random function (PRF). 

```java
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {

        char[] password = "user_password".toCharArray();
        byte[] salt = new byte[16]; // this should be stored with the password

        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
    
            // Parameters: char array of user password, salt, iteration count, derived key length
            KeySpec spec = new PBEKeySpec(password, salt, 65536, 128); 
            byte[] hash = factory.generateSecret(spec).getEncoded();

            // conveniently print the derived key
            System.out.println(Arrays.toString(hash));

        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }
}
```

- The Password is "user_password".
- Salt in this case are zeroes, but a random salt must be generated and stored with the password.
- Iteration Count is 65536, which implies that the function applies a certain hash function 65536 times.
- Derived Key Length is 128 bits. The derived key itself is generated by the generateSecret method and it can be conveniently printed 

Note: Please make sure not to store the actual password. Only save the salt and the derived password. It's important to randomly generate a new salt whenever a password is set or changed.
