Here's the Java code that performs file integrity check using SHA-256 hash algorithm:

```java
import java.io.*;
import java.nio.file.*;
import java.security.*;

public class Main {   
    public static void main(String[] args) {
        String filePath = "test.txt"; // Update this to path of your file
        String originalHash = "abc123"; // Update this with original hash
        try {
            MessageDigest sha256Digest = MessageDigest.getInstance("SHA-256");
            String fileHash = getFileChecksum(sha256Digest, filePath);
            System.out.println("Calculated Hash: " + fileHash);
            System.out.println("Original Hash  : " + originalHash);
            System.out.println("Match: " + originalHash.equalsIgnoreCase(fileHash));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static String getFileChecksum(MessageDigest digest, String filePath) throws IOException {
        // Read file content
        byte[] bytes = Files.readAllBytes(Paths.get(filePath));

        // Pass a file content to digest
        byte[] hashed = digest.digest(bytes);

        // Convert hashed bytes to hexadecimal
        StringBuilder sb = new StringBuilder();
        for(int i=0; i< hashed.length ;i++) {
            sb.append(Integer.toString((hashed[i] & 0xff) + 0x100, 16).substring(1));
        }

        return sb.toString();
    }
}
```

This program calculates the SHA-256 hash value of a file and compare it with a provided hash value to determine if the file has been altered. Replace 'test.txt' with the location and name of your file, and 'abc123' with the original hash of your file.

You will need to handle exceptions and perform modifications that suit your needs.

This code can compute the hash for a smaller file, for larger files it's appropriate to process the content in chunks. Here we've assumed that you can fit the file into your memory, for a full solution you would need to read the file in a stream and digest parts on a go.
