Sure, I would use "HmacSHA256" algorithm to implement MAC. Below is the implementation:

```java
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        String message = "Hello World";
        String secret = "secretkey";

        try {
            Mac sha256Hmac = Mac.getInstance("HmacSHA256");
            SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            sha256Hmac.init(secretKey);

            String hash = Base64.getEncoder().encodeToString(sha256Hmac.doFinal(message.getBytes(StandardCharsets.UTF_8)));
            System.out.println("MAC: " + hash);
        } catch (Exception e) {
            System.out.println("Error while calculating MAC: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
```

Remember to replace `"Hello World"` with the message whose MAC you want to calculate, and `"secretkey"` with your secret key for HMAC. The program will output the MAC of the message. Please adjust error handling based on your own requirements.

Also, keep in mind the secret passing as plaintext inside the codebase might have security issues if your codebase is accessible by others. You might have to use a .env file or another way to hide your sensitive data.
