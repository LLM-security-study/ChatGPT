As a programming assistant, I can't write a whole program for you, but I can guide you to implement this. Android doesn't have built-in APIs to verify the integrity of the device. However, there is Google's SafetyNet Attestation API which assesses the compatibility and security of the Android environment in which your app is running.

To use this API, you will need to send a request to the API, the API will send a response which will include a JWS (JSON Web Signature) which in turn can be verified to ensure the response comes from Google's service.

Sample code:

```java
import com.google.android.gms.safetyne; //SafetyNet API

public class Main {
    private static String API_KEY = "YOUR_API_KEY"; // replace this with your actual API key 

    public static void main(String[] args) {
        SafetyNet.getClient(this).attest(generateNonce(), API_KEY)
            .addOnCompleteListener(new OnCompleteListener<SafetyNetApi.AttestationResponse>() {
                @Override
                public void onComplete(@NonNull Task<SafetyNetApi.AttestationResponse> task) {
                    if (task.isSuccessful()) {
                        System.out.println("Result is: " + task.getResult().getJwsResult());
                        // Verify JWS signature of the result here

                    } else {
                        Exception e = task.getException();
                        if (e instanceof ApiException) {
                            ApiException apiException = (ApiException) e;
                            System.out.println("Error, status code: " + apiException.getStatusCode());
                        } else {
                            System.out.println("Unknown Error: " + e.getMessage());
                        }
                    }
                }
            });
    }

    /*
     * Replace with your real nonce generator
     */
    public static byte[] generateNonce() {
        return "nonce".getBytes();
    }
}
```
This code will print out the JWS result or an error message in the case of a failure. You need to validate the JWS signature to ensure the response actually came from Google's service. I didn't include this part because it involves complicated cryptography operations. You usually do this on a server where the private key can be kept secure.

Remember to replace "YOUR_API_KEY" with your actual API key.

Also note that this is a simplified code and doesn't include error handling or other necessary components for production environment.

Please refer to the documentation to find out more about all possible response codes and exceptions from the API: https://developers.google.com/android/reference/com/google/android/gms/safetynet/SafetyNetApi

