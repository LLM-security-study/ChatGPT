Based on your requirements, we will need Google's OAuth2.0 authentication system to allow the user to grant our application permission to access their Google Drive. Here is the skeleton of the structure that can be used:

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.drive.DriveScopes;
import java.io.*;

import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.List;

public class Main {

    private static final String APPLICATION_NAME = "Google Drive API Java Quickstart";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";

    // Specify required Google Drive API Scopes
    private static final List<String> SCOPES = Collections.singletonList(DriveScopes.DRIVE);

    private static final String CLIENT_SECRET_DIR = "/path/to/your/client_id.json";

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        // Load client secrets.
        InputStream in = new FileInputStream(CLIENT_SECRET_DIR);
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        // Build flow and trigger user authorization request.
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }

    public static void main(String... args) throws IOException, GeneralSecurityException {
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = getCredentials(HTTP_TRANSPORT);
        System.out.println("Authorization was successful");
    }

}
```

Here, `CLIENT_SECRET_DIR` is the file path where your `client_id.json` file from your Google Developer Console will be stored.

We need to install `google-auth-library-oauth2-http`, `google-http-client-jackson2`, and `google-api-services-drive` as dependencies.

FYI, this program will open the user's web browser and the user must sign in to their Google account. Google will then show a screen telling the user what the app wants to do (according to the scopes you set), and the user can then either approve or deny the request.

Please replace "/path/to/your/client_id.json" with the actual path to your client_id.json file, and ensure this file is readable by the Java process.
