Sure, In Java, we use the standard Java APIs javax.net.ssl (Java Secure Socket Extension (JSSE)) for such task.

```java
import javax.net.ssl.*;

public class Main {

    public static void main(String[] args) {
		try {
			// Create a trust manager that does not validate certificate chains
			TrustManager[] trustAllCerts = new TrustManager[]{
				new X509TrustManager() {
					public java.security.cert.X509Certificate[] getAcceptedIssuers() {
						return null;
					}

					public void checkClientTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}

					public void checkServerTrusted(
						java.security.cert.X509Certificate[] certs, String authType) {
					}
				}
			};

			// Install the all-trusting trust manager
			SSLContext sC = SSLContext.getInstance("SSL"); //I'm using SSL here, for TLS replace it with "TLS"
			sC.init(null, trustAllCerts, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sC.getSocketFactory());

			// Create all-trusting host name verifier
			HostnameVerifier allHostsValid = new HostnameVerifier() {
				public boolean verify(String hostname, SSLSession session) {
					return true; // change this to a real host verification
				}
			};

			// Install the all-trusting host verifier
			HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

			//Now you can access an https URL without having the certificate in the truststore

		} catch (Exception e) {
			e.printStackTrace();
		}
    }
}
```

Please remember that this code here is not validating the certificates as in your question. The TrustManager is just setup to trust any certificates and all hosts, you have to change that part with the real logic in a production environment, otherwise, it's a very big security risk as it opens you up to all sorts of attacks especially Man In The Middle (MITM).

For more information about SSL/TLS with Java and how to create a TrustManager that validates certificates, the official Java documentation is worth to check: https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html
