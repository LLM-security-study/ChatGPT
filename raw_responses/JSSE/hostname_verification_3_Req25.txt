The program uses the JSSE (Java Secure Socket Extension) API for implementation. The program connects to the server through SSL/TLS protocol and verifies the server's hostname against the server’s identification in the received certificate.

Here is the Java program:

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.security.cert.Certificate;

public class Main {

    public static void main(String[] args) {
        new Main().testIt();
    }

    private void testIt() {

        String hostname = "https://yourExample.com";
        HttpsURLConnection connection;

        try {

            // Create a connection
            URL url = new URL(hostname);
            connection = (HttpsURLConnection) url.openConnection();

            // Connect to the server
            connection.connect();

            // Get server certificate chain
            Certificate[] certs = connection.getServerCertificates();

            // Print out certificate information
            System.out.println("Server certificate:");
            for (Certificate cert : certs) {
                System.out.println("Certificate is: " + cert);
            }

            System.out.println("Connected to: " + connection.getURL());
            System.out.println("Server: " + connection.getHeaderField(0));

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(connection.getInputStream()));

            String input;

            while ((input = in.readLine()) != null) {
                System.out.println(input);
            }
            in.close();

        } catch (SSLPeerUnverifiedException e) {
            System.out.println("SSL peer verification failed: " + e.getMessage());
        } catch (IOException e) {
            System.out.println("IO exception: " + e.getMessage());
        }
    }
}
```

This program verifies the host server by obtaining the server certificates and checking them against the known trusted Certificate Authorities. It prints the server certificate and verifies the server's identify. Please replace "https://yourExample.com" with the actual server hostname.

This is a simple implementation. If you need a more complex hostname verification such as self-signed certificates or custom hostname verifier, you may need more advanced libraries or APIs.

DISCLAIMER: Always handle cryptographic operations carefully, and in production, use well-established libraries and follow recommended practices.
