Here is the Java program that deals with the authorization process using OAuth2. This implements proper API calls to Google Services and also handling redirection for access and refresh tokens.

In order to implement the full functionality, you would need to add the appropriate client id, client secret, and redirect URI in the given slot in code.

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.List;

public class Main {

    private static final String APPLICATION_NAME = "<Your Application Name Here>";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";

    private static final List<String> SCOPES = Collections.singletonList("https://www.googleapis.com/auth/calendar");
    private static final String CREDENTIALS_FILE_PATH = "<Path to your Credentials json>";

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(new FileInputStream(CREDENTIALS_FILE_PATH)));

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }

    public static void main(String... args) throws IOException, GeneralSecurityException {
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = getCredentials(HTTP_TRANSPORT);
        System.out.println("Authorization successful. Credential details: " + credential);
    }
}
```

In this code, the `getCredentials` method starts by loading the `client_secrets.json` file that must be located indicated by `CREDENTIALS_FILE_PATH`. 

The `GoogleAuthorizationCodeFlow` object enables our application to authorize and authenticate actions on behalf of the user. The program also stores the authenticated user's credentials in the location set by `TOKENS_DIRECTORY_PATH`. 

When you run the program, if no valid credentials are found, it will open a browser window and ask you for your Google account credentials. After successful login, Google will provide an access code which needs to be pasted to the console. The `getCredentials` method will then return the `Credential` object.

NOTE: In real-world usage, the redirect operation for the token will be handled programmatically and won't require manual copying/pasting. This is also just the authorization part, no events or changes are made to any Google Calendar with this code.
