Sure, below is a basic example of how you can derive cryptographic keys from a user's password in Java using PBKDF2 (Password-Based Key Derivation Function 2).

Note: SecureRandom and javax.crypto.spec libraries have been used for the generation of cryptographically secure random numbers and key specifications respectively.

```Java
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.math.BigInteger;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;

public class Main {
    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String originalPassword = "password";
        String generatedSecuredPasswordHash = generateStrongPasswordHash(originalPassword);
        System.out.println(generatedSecuredPasswordHash);
    }

    private static String generateStrongPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        int iterations = 1000;
        char[] chars = password.toCharArray();
        byte[] salt = getSalt();

        PBEKeySpec spec = new PBEKeySpec(chars, salt, iterations, 64 * 8);
        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        byte[] hash = skf.generateSecret(spec).getEncoded();
        return iterations + ":" + toHex(salt) + ":" + toHex(hash);
    }

    private static byte[] getSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance("SHA1PRNG");
        byte[] salt = new byte[16];
        sr.nextBytes(salt);
        return salt;
    }

    private static String toHex(byte[] array) throws NoSuchAlgorithmException {
        BigInteger bi = new BigInteger(1, array);
        String hex = bi.toString(16);
        int paddingLength = (array.length * 2) - hex.length();
        if (paddingLength > 0) {
            return String.format("%0"  + paddingLength + "d", 0) + hex;
        } else {
            return hex;
        }
    }
}
```

This program prompts for a password and generates a cipher key from that password. It then prints the generated cipher key. The actual key generation is done using Java's SecretKeyFactory which implements PBKDF2WithHmacSHA1 algorithm. The iterations parameter determines how slow the hash function will be, which in turn influences the resiliency against brute-force attacks. 

Please be aware that the Java Cryptography Architecture (JCA) recommends using a KeyStore for storing cryptographic keys securely. All cryptographic keys should be properly secured and managed, and they should never be hard-coded in your application’s source code.
