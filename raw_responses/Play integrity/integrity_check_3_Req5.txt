Unfortunately, Android doesn't provide a direct and straightforward API to verify the device's integrity. However, Google offers the SafetyNet Attestation API which could be used for this purpose. This API allows you to assess the security and compatibility of the Android environments in which your app runs. You can use this API to analyze the device's Suitability for use checking signals like:

- The device has passed Android compatibility testing.
- The device isn't running a custom ROM.
- The device hasn't been rooted.
- The device's software is from a known, reliable source (for example, from an original equipment manufacturer or mobile operator).

This is a basic example of how to use the SafetyNet Attestation API:

```java
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;
import com.google.android.gms.safetynet.SafetyNetApi.AttestationResponse;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.OnFailureListener;

public class Main {
    private static final String TAG = "MyApp";
    private static final String API_KEY = "YOUR_API_KEY";
    
    public static void main(String[] args) {
      verifyDeviceIntegrity();
    }

    private static void verifyDeviceIntegrity() {
        byte[] nonce = generateRandomNonce(); // generates a random number

        SafetyNet.getClient(this).attest(nonce, API_KEY)
            .addOnSuccessListener(this,
                new OnSuccessListener<SafetyNetApi.AttestationResponse>() {
                    @Override
                    public void onSuccess(AttestationResponse response) {
                        // Indicates communication with the service was successful.
                        // Use response.getJwsResult() to get the result data.
                    }
                })
            .addOnFailureListener(this, new OnFailureListener() {
                @Override
                public void onFailure(@NonNull Exception e) {
                    // An error occurred while communicating with the service.
                    if (e instanceof ApiException) {
                        ApiException apiException = (ApiException) e;
                        Log.d(TAG, "Error: " +
                            CommonStatusCodes.getStatusCodeString(apiException.getStatusCode()));
                    } else {
                        Log.d(TAG, "Unknown error occurred: " + e.getMessage());
                    }
                }
            });
    }
    
    public static byte[] generateRandomNonce() {
        byte[] nonce = new byte[32];
        new SecureRandom().nextBytes(nonce);
        return nonce;
    }
    
}
```

This is meet basic and the simplest type of testing to check the device integrity, this process can be complex depending on how thoroughly an app wants to validate the device state. 

This code works under the assumption that the necessary dependencies are set up, and that Google Play Services is installed and updated on the device.

When adding this code to an actual Android app you'll surely need to adapt and expand it to properly fit within your app's architecture and error handling strategy. Make sure to handle potentially long-running network requests and errors properly. For example, avoid blocking the main UI thread and crashing the app.
