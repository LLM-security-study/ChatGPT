Integrating Single Sign-On (SSO) involves various steps and typically uses libraries or SDKs that are provided by the identity provider. Here is a basic Java program, utilizing the Google OAuth 2.0 client library, to authorize and authenticate a user.

Remember to replace `YOUR_CLIENT_ID`, `YOUR_CLIENT_SECRET`, and `YOUR_REDIRECT_URI` with your actual values.

```java
// Import necessary packages
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.MemoryDataStoreFactory;

import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Arrays;
import java.util.Collection;

public class Main {

    private static final String CLIENT_ID = "YOUR_CLIENT_ID";
    private static final String CLIENT_SECRET = "YOUR_CLIENT_SECRET";
    private static final String REDIRECT_URI = "YOUR_REDIRECT_URI";
    private static final Collection<String> SCOPES = Arrays.asList("openid", "profile", "email");

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static NetHttpTransport httpTransport;

    public static void main(String args[]) throws Exception {
        httpTransport = GoogleNetHttpTransport.newTrustedTransport();

        // Load client secrets
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, 
                new Reader() {
                    public int read(char[] cbuf, int off, int len) {
                        return 0;
                    }
                    public void close() {
                    }
                });

        // Build flow and trigger user authorization request
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(httpTransport, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new MemoryDataStoreFactory())
                .setAccessType("offline")
                .build();

        Credential credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
        System.out.println("Credentials saved to " + "tokens.json");
    }
}
```

This program requests tokens from Google's OAuth 2.0 server, then stores those tokens in a "tokens.json" file. If the file doesn't exist, a new one is created. The next time tokens are required, the program uses the ones stored in the file instead of making an additional request.

Note: This code sample is a basic version and may not cater to all the requirements of your application. Always ensure to fit the code to your application's specific needs.

Finally, you should understand that implementing authentication/security features must follow best practices to ensure the safety of user data. As a next step, be sure to handle the tokens securely in production to avoid security vulnerabilities.
