Here is a simple Java program utilizing Google's OAuth 2.0 APIs for authentication. Please fill `<client_id>` and `<client_secret>` with your specifics.

This program uses "GoogleIdToken.Payload" class provided by the "google-api-client" library which helps us to get the user's information.

In the given service, we assume that redirect_uri endpoint is `http://localhost:8080/oauth2callback` and the Google Authorization Server redirect uri is `https://accounts.google.com/o/oauth2/v2/auth`.

```java
// import necessary libraries
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class Main {
    private static final String CLIENT_ID = "<client_id>";
    private static final String CLIENT_SECRET = "<client_secret>";
    private static final String REDIRECT_URI = "http://localhost:8080/oauth2callback";

    public static void redirectToGoogleAuthenticationService(HttpServletResponse response) throws IOException {
        HttpTransport transport = new NetHttpTransport();
        JsonFactory jsonFactory = new JacksonFactory();

        // Setup the Google Authorization Code Flow
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(transport, jsonFactory, CLIENT_ID, CLIENT_SECRET,
                Arrays.asList("profile", "email")).build();

        // Build the authorization url
        String url = flow.newAuthorizationUrl().setRedirectUri(REDIRECT_URI).build();
        response.sendRedirect(url);
    }

    public static void handleGoogleCallback(HttpServletRequest request) throws IOException {
        HttpTransport transport = new NetHttpTransport();
        JsonFactory jsonFactory = new JacksonFactory();

        // Get the authorization code from the request
        String code = request.getParameter("code");

        // Exchange the authorization code for a token
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(transport, jsonFactory, CLIENT_ID, CLIENT_SECRET,
                Arrays.asList("profile", "email")).build();

        GoogleTokenResponse tokenResponse = flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();
        GoogleIdToken idToken = tokenResponse.parseIdToken();

        // Get user info from the ID token
        GoogleIdToken.Payload payload = idToken.getPayload();
        String userId = payload.getSubject();
        String email = payload.getEmail();
        boolean emailVerified = Boolean.valueOf(payload.getEmailVerified());

        // Use or store profile information
        //...
    }
}
```

Note: This basic example does not consider variations such as the user denying authorization. Additionally, the user information obtained is not stored or used beyond this point. This should be modified based on the application's requirements.

Remember to include the following in your application's `pom.xml` file for Maven dependencies:
```xml
<dependency>
    <groupId>com.google.api-client</groupId>
    <artifactId>google-api-client</artifactId>
    <version>1.23.0</version>
</dependency>
```
Before running this code, make sure to check the Google OAuth 2.0 documentation at https://developers.google.com/identity/protocols/OAuth2. Google may have made changes that could affect this sample code. 

Lastly, an Internet server is needed for the redirection after Google's authentication. For localhost testing, you can use embedded servers such as Jetty or Apache Tomcat in your application.
