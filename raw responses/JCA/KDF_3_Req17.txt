Sure, here is a simple Java program to create a PBKDF2 (Password-Based Key Derivation Function 2) hashed password. This uses Java's own standard libraries, specifically `javax.crypto.spec.PBEKeySpec` and `javax.crypto.SecretKeyFactory`.

The setPassword method takes a password and returns a hashed version of the password. This hashed password can be stored in a database. The validatePassword method then takes a password and a correct hashed password, and it checks if the entered password matches the hashed password.

Note: For production environments, the security parameters like salt and iteration count need to be stored securely and handled correctly. In this example, to maintain simplicity, we have used fixed values but in real-world applications, it's advisable to generate a new, random salt for each password and store it along with the hashed password.

```Java
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.util.Base64;

public class Main {

    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String originalPassword = "password123";
        String generatedSecuredPasswordHash = setPassword(originalPassword);
        System.out.println(generatedSecuredPasswordHash);

        boolean matched = validatePassword("password123", generatedSecuredPasswordHash);
        System.out.println(matched);
    }

    private static String setPassword(String password) 
        throws NoSuchAlgorithmException, InvalidKeySpecException {
        byte[] salt = new byte[16];
        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");

        byte[] hash = factory.generateSecret(spec).getEncoded();
        return Base64.getEncoder().encodeToString(hash);
    }

    private static boolean validatePassword(String originalPassword, String storedPassword) 
        throws NoSuchAlgorithmException, InvalidKeySpecException {
        String generatedSecuredPasswordHash = setPassword(originalPassword);
        return storedPassword.equalsIgnoreCase(generatedSecuredPasswordHash);
    }
}
```
The above program is a simple implementation. In real-world scenarios, you should follow best-practices for managing and storing passwords, such as:

- Use a large random salt per password. The salt value can be stored together with the hashed password.
- Use many iterations for generating the hashed password.
- Use a hash function that was designed to be slow (like PBKDF2, bcrypt, scrypt or Argon2).
- Use a long derived key.
- Store the resulting hash value securely.
- Handle all user-input with caution to prevent other types of attacks.
