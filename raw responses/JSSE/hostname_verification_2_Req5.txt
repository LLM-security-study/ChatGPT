Sure, below is a sample Java program that verifies the hostname in an SSL/TLS connection. The main class is "Main" and I'm using Java's javax.net.ssl APIs.

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSession;
import javax.net.ssl.HostnameVerifier;

public class Main {

    public static void main(String[] args) {
        try {
            String hostname = "www.example.com";
            java.net.URL url = new java.net.URL("https://" + hostname);
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

            // Set the custom hostname verifier
            conn.setHostnameVerifier(new CustomHostnameVerifier());

            conn.connect();
            System.out.println("Successfully connected to " + hostname);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

class CustomHostnameVerifier implements HostnameVerifier {

    @Override
    public boolean verify(String hostname, SSLSession session) {
        // We can specify the list of allowed hostnames here.
        // For this example, let's allow all hostnames.
        // To restrict hostnames, return false for non-allowed hostnames.

        System.out.println("Verifying hostname: " + hostname);
        return true;
    }
}
```
In the `CustomHostnameVerifier` class, a `verify` function is provided. If it returns `true`, the hostname is considered verified. If it returns `false`, then the verification fails. You can customize this function to add your own logic for hostname verification.

This is a very basic example and it accepts all hostnames. For real-world applications, you should make it stricter according to the security needs of your application. Always remember, the more strict your HostnameVerifier, the more secure your application!
