Okay, below is a basic example of how you can generate a cryptographic key and store it in a keystore file using Java security APIs.

```java
import java.io.FileOutputStream;
import java.security.Key;
import java.security.KeyStore;
import java.security.KeyStore.SecretKeyEntry;
import java.security.SecureRandom;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.nio.file.*;

public class Main {

    public static void main(String[] args) throws Exception {
        
        // Generating a key
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256);
        SecretKey secretKey = keyGen.generateKey();

        // Storing the key in a keystore
        KeyStore.ProtectionParameter protParam =
                new KeyStore.PasswordProtection("password".toCharArray());

        KeyStore.SecretKeyEntry skEntry =
                new KeyStore.SecretKeyEntry(secretKey);
        KeyStore ks = KeyStore.getInstance("JCEKS");

        ks.load(null, "password".toCharArray());
        ks.setEntry("secretKeyAlias", skEntry, protParam);

        // Saving the keystore to a file
        try (FileOutputStream fos = new FileOutputStream("newKeyStoreFileName.jceks")) {
            ks.store(fos, "password".toCharArray());
        }
    }
}
```

This is just a simple example. Key and keystore management is a complex field that involves a lot of security considerations. Depending on your real requirements you will need to adjust this example, especially where the passwords and file paths are hard-coded.

Please ensure the required security measures before using this in a production environment, as the coding given is just for educational and informational purposes.

NOTE: This example uses "JCEKS" which was designed for secret keys. For RSA, DSA and other types, "JKS" keystore type might be preferable. Also, the "password" used here for protecting both the keystore and the key entry is hard-coded for simplicity; you should use better ways to protect or provide those!

