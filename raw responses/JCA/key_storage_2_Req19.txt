Sure, here is simple example of such Java program:
```java
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStore.PasswordProtection;
import java.security.KeyStore.SecretKeyEntry;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableEntryException;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class Main {
    public static void main(String[] args) {
        try {
            String keystorePassword = "keystorePassword";
            String keyPassword = "keyPassword";
            
            // Generate secret key for token
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256);
            SecretKey secretKey = keyGen.generateKey();
            
            // Create secret key entry
            SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(secretKey);
            PasswordProtection passwordProtection = new PasswordProtection(keyPassword.toCharArray());
            
            // Create keystore and store the secret key
            KeyStore keyStore = KeyStore.getInstance("JCEKS");
            keyStore.load(null, keystorePassword.toCharArray());
            keyStore.setEntry("accessToken", secretKeyEntry, passwordProtection);
            
            // Save keystore to a file
            keyStore.store(new FileOutputStream("keystore.jceks"), keystorePassword.toCharArray());

        } catch (NoSuchAlgorithmException | IOException | KeyStoreException | CertificateException | UnrecoverableEntryException ex) {
            ex.printStackTrace();
        }
    }
}
```
Please replace the "keystorePassword" and "keyPassword" values with the real ones.

Please also note that in this example the default AES key size is 256. But sometimes Java Cryptography Extension (JCE) does not support key sizes greater than 128. JCE unlimited strength encryption policy files need to be installed to bypass this constraint.

You may apply error handling as appropriate to your project. In this scenario, we are simply printing any exceptions which may occur.

This program generates a secret key using AES algorithm, stores it in a KeyStore under the alias "accessToken", then saves the KeyStore to a file named "keystore.jceks".
