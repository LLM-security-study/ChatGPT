Sure, here is a simple implementation of AES symmetric encryption using Java Cryptography Extension (JCE):

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Main {
    public static void main(String[] args) throws Exception {
        // Generate a secret key
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128); // Key size is specified here. It could be 128, 192, or 256 bits.
        SecretKey secretKey = keyGenerator.generateKey();

        // Original message
        String originalMessage = "Hello, World!";

        // Encrypt
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedMessage = cipher.doFinal(originalMessage.getBytes(StandardCharsets.UTF_8));
        System.out.println("Encrypted Message: " + Base64.getEncoder().encodeToString(encryptedMessage));

        // Decrypt
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        String decryptedMessage = new String(cipher.doFinal(encryptedMessage), StandardCharsets.UTF_8);
        System.out.println("Decrypted Message: " + decryptedMessage);
    }
}
```

The above code will generate a new Secret Key every time. In real-life applications, you would want to securely save and retrieve this key.

Please note that using a Secret Key for encryption means that you're using symmetric encryption. That is, the same key is required for both encryption and decryption. If you need to share encrypted information, the receiver also needs this key therefore it should be transferred in a secure manner.
