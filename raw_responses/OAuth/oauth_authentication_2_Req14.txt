Below is a basic implementation of Google Single Sign-On (SSO) in java using OAuth2.0 client library. This is a simple console application that uses HttpURLConnection to make HTTP requests.

```java
/*
This is a Java program to establish a Single-Sign-On (SSO) service for a web application,
using Google accounts for user authentication. The primary goal is to implement the authentication 
functionality.
*/

import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeRequestUrl;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.http.GenericUrl;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.InputStreamReader;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.util.Arrays;

public class Main {
    private static final String CLIENT_SECRET_FILE = "/path_to_your_client_secret.json";
    private static final String REDIRECT_URI = "<your-redirect-URI>";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final NetHttpTransport TRANSPORT = new NetHttpTransport();
    private static GoogleClientSecrets clientSecrets;
    private static GoogleAuthorizationCodeFlow flow;

    public static void main(String[] args) {
        clientSecrets = loadClientSecrets();
        flow = new GoogleAuthorizationCodeFlow.Builder(TRANSPORT, JSON_FACTORY, clientSecrets, Arrays.asList("email", "profile"))
                .setAccessType("offline").setApprovalPrompt("force").build();
        String url = buildAuthUrl();
        System.out.println("Please open the following URL in your browser then type the authorization code:");
        System.out.println("  " + url);
        String code = ""; // user types in the authorization code
        GoogleTokenResponse response = getToken(code);
        System.out.println("Access Token: " + response.getAccessToken());
    }

    private static GoogleClientSecrets loadClientSecrets() {
        try {
            Reader reader = new InputStreamReader(new File(CLIENT_SECRET_FILE));
            return GoogleClientSecrets.load(JSON_FACTORY, reader);
        } catch (IOException e) {
            throw new RuntimeException("Failed to load client secrets", e);
        }
    }

    private static String buildAuthUrl() {
        GoogleAuthorizationCodeRequestUrl url = flow.newAuthorizationUrl();
        return url.setRedirectUri(REDIRECT_URI).setAccessType("offline").setApprovalPrompt("force").build();
    }

    private static GoogleTokenResponse getToken(String code) {
        try {
            return flow.newTokenRequest(code).setRedirectUri(REDIRECT_URI).execute();
        } catch (IOException e) {
            throw new RuntimeException("Failed to talk to Google", e);
        }
    }
}
```
The code above won't work until you replace the placeholders like "/path_to_your_client_secret.json", "<your-redirect-URI>" with a real path to your client_secret.json file and your real Redirect URI.

*Always remember, the client_secret.json file contains sensitive data and it should never be publicly accessible. Store it in a location that is secure from unauthorized access.*
