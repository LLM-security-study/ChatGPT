Sure, in Java we can establish a secure communication by creating an SSL socket using Java Secure Socket Extension (JSSE), which is a part of Java Networking Security API. The SSL socket is used for secure communication between client and server.

Here is a sample program named "Main":

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {

    private static final String HOST = "localhost";
    private static final int PORT = 12345;

    public static void main(String[] args) {
        try {
            // Get SSL socket factory
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();

            // Create SSLSocket
            SSLSocket sslSocket = (SSLSocket) factory.createSocket(HOST, PORT);

            // Initialize the streams for communication with the server
            PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(sslSocket.getOutputStream())));
            BufferedReader in = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            // Send a message to the server
            out.println("Hello Server");
            out.flush();

            // Read the response from the server
            String response = in.readLine();
            System.out.println("Server response: " + response);

            // Close the streams and the socket
            out.close();
            in.close();
            sslSocket.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

Please replace `HOST` & `PORT` with your server details.

This program creates a secure socket with the specified host name and port. Then it opens a PrintWriter and BufferedReader on the socket to send a message to the server and read the response. 

Please make sure that the SSL handshake is completed successfully between the client and the server. If your server requires authentication via certificates, you should add them into a keystore and provide it via JVM arguments: `-Djavax.net.ssl.keyStore=path_to_keystore -Djavax.net.ssl.keyStorePassword=password`

This code doesn't include these details. You will need to modify the code to fit it to your specific situation and handle errors more gracefully.

