Here is a simple Java program with two functions for encryption and decryption of a given string. The symmetric key used in this example is a predefined string converted to byte array.

```java
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;

public class Main {
    private static byte[] key = "mySymmetricKey!".getBytes();

    public static void main(String [] args){
        String originalString = "This is the text to be encrypted";
        String encrypted = encrypt(originalString);
        System.out.println("Encrypted string: " + encrypted);
        String decrypted = decrypt(encrypted);
        System.out.println("Decrypted string: " + decrypted);
    }

    public static String encrypt(String strToEncrypt){
        try{
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes("UTF-8")));
        }catch(Exception e){
            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
    }

    public static String decrypt(String strToDecrypt){
        try{
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        }catch(Exception e){
            System.out.println("Error while decrypting: " + e.toString());
        }
        return null;
    }
}

```

This program uses the AES encryption methodology provided by the Java Cryptography Extension (JCE). The symmetric key "mySymmetricKey!" is used for both encryption and decryption. The encrypted string is base64 encoded for a clean output, and the decryption process includes a base64 decode operation.

To run this program, you will need to replace "This is the text to be encrypted" with the text you want to encrypt. The original and decrypted strings are printed to the console.

If you get a `java.security.InvalidKeyException: Illegal key size` error, you need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in your JRE. You can download them from the Oracle website.
