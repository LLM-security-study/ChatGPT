Due to complexity, here is a simplified version of the code in Java for Android that uses FingerprintManager Class to process the fingerprint and then authenticates the user.

Please insert this code within the "AndroidManifest.xml" to grant permission for using fingerprint hardware:

```xml
<uses-permission android:name="android.permission.USE_FINGERPRINT" />
```

Here is the Java code:

```java
import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.widget.TextView;

@RequiresApi(api = Build.VERSION_CODES.M)
public class Main extends AppCompatActivity {

    private TextView mParaLabel;
    private FingerprintManager mFingerprintManager;
    private FingerprintHandler mFingerprintHandler;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mParaLabel = (TextView) findViewById(R.id.paraLabel);

        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            mParaLabel.setText("Fingerprint Authentication permission not enabled");
        }else{
            if (!mFingerprintManager.hasEnrolledFingerprints()) {
                mParaLabel.setText("Register at least one fingerprint in Settings");
            }else{
                if (!mFingerprintManager.isHardwareDetected()) {
                    mParaLabel.setText("Your device does not have a fingerprint sensor");
                }else{
                    mParaLabel.setText("Your Fingerprint can be used to login");

                    mFingerprintHandler.startAuth(mFingerprintManager, null);
                }
            }
        }
    }
}
```

Here's the FingerprintHandler class definition:

```java
import android.Manifest;
import android.app.Activity;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.os.CancellationSignal;
import android.support.v4.app.ActivityCompat;

public class FingerprintHandler extends FingerprintManager.AuthenticationCallback {

    private CancellationSignal mCancellationSignal;
    private Activity activity;

    public FingerprintHandler(Activity activity) {
        this.activity = activity;
    }

    public void startAuth(FingerprintManager manager, FingerprintManager.CryptoObject cryptoObject) {
        mCancellationSignal = new CancellationSignal();
        if (ActivityCompat.checkSelfPermission(activity, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        manager.authenticate(cryptoObject, mCancellationSignal, 0, this, null);
    }

    @Override
    public void onAuthenticationError(int errorCode, CharSequence errString) {
        super.onAuthenticationError(errorCode, errString);
    }

    @Override
    public void onAuthenticationFailed() {
        super.onAuthenticationFailed();
    }

    @Override
    public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
        super.onAuthenticationHelp(helpCode, helpString);
    }

    @Override
    public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
        super.onAuthenticationSucceeded(result);
    }
}
```

It's highly recommended to develop a proper system for handling errors, failures, or successful authentications, and to refine the code as it does not include proper handling of these areas. Also, this is a simplified version, so full-fledged fingerprint authentication may require additional steps to secure the app, such as using CryptoObject for better security during authentication. 

Remember to replace "activity_main" in 'setContentView(R.layout.activity_main);' with whatever the XML filename of the layout you're using is.
