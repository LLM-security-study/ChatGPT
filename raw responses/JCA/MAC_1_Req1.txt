Here is a basic java program that generates a Message Authentication Code (MAC) using the HMAC-SHA256 algorithm. 

```java
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
    
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the message:");
        String message = scanner.nextLine();

        System.out.println("Enter the secret key:");
        String secret = scanner.nextLine();

        try {
            Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            sha256_HMAC.init(secret_key);

            byte[] rawHmac = sha256_HMAC.doFinal(message.getBytes(StandardCharsets.UTF_8));

            StringBuilder sb = new StringBuilder();
            for (byte b : rawHmac) {
                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1,3));
            }

            System.out.println("The MAC is: " + sb);

        } catch (Exception e){
            System.out.println("Error generating HMAC: " + e.getMessage());
        }
    }
}
```
This program will ask a user to input a message and a secret key to generate an HMAC for that message.

The secret key is used to initialize the Mac instance and the message is used to generate the HMAC.

While printing, we convert bytes into hexadecimal form.

This code uses HmacSHA256 as the MAC algorithm, but Java supports other algorithms as well, including HmacSHA1 and HmacMD5.

The MAC is printed to the console. If there are errors during any step, an exception is thrown and caught, and the error message is printed to the console.
