Sure, below is a basic Java implementation for hostname verification using the `HttpsURLConnection` API provided by Java:

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.io.IOException;
import java.net.URL;

public class Main {
    public static void main(String[] args) {
        String hostname = "https://example.com";

        try {
            URL url = new URL(hostname);
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            
            conn.setHostnameVerifier((hostname1, session) -> {
                if (hostname1.equals(session.getPeerHost())) {
                    return true;
                } else {
                    return false;
                }
            });
            
            conn.connect();
                
            System.out.println("Hostname Verification Passed for url: " + hostname);
        } catch (SSLPeerUnverifiedException e) {
            System.out.println("Hostname Verification Failed for url: " + hostname);
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

This program connects to the provided host (in this case "https://example.com") and performs hostname verification in an SSL/TLS connection with the usage of the `setHostnameVerifier` method in the `HttpsURLConnection` class.

The lambda function inside the `setHostnameVerifier` checks if the hostname given for the SSL session matches the hostname of the peer host.

Please replace "https://example.com" with the URL you want to verify. 

Remember this is a basic example, for production usage you probably want to use more robust host name verifier.
