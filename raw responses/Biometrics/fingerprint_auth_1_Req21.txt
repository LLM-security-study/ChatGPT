Sure, Below is a simple representation of how to implement fingerprint authentication in an Android App using Java.

```java
// Import appropriate packages
import android.hardware.fingerprint.FingerprintManager;
import android.Manifest;
import android.content.pm.PackageManager;
import android.os.CancellationSignal;
import android.support.v4.app.ActivityCompat;

public class Main{
    
    private CancellationSignal cancellationSignal;
    private final Context appContext;

    public Main(Context context){
        appContext = context;
    }

    // Check if the user has set up fingerprint security in their system settings. 
    public boolean checkFinger(){
        FingerprintManager fingerprintManager = (FingerprintManager) appContext.getSystemService(Context.FINGERPRINT_SERVICE);
        return fingerprintManager.isHardwareDetected() && fingerprintManager.hasEnrolledFingerprints();
    }

    // Trigger the fingerprint authentication
    public void authUser(FingerprintManager.AuthenticationCallback callback){
        FingerprintManager fingerprintManager = (FingerprintManager) appContext.getSystemService(Context.FINGERPRINT_SERVICE);

        if (ActivityCompat.checkSelfPermission(appContext, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        
        fingerprintManager.authenticate(null, cancellationSignal, 0, callback, null);
    }
}

class FingerprintHandler extends FingerprintManager.AuthenticationCallback {
    // handle the fingerprint authentication events.
    @Override
    public void onAuthenticationError(int errorCode, CharSequence errString) {
        super.onAuthenticationError(errorCode, errString);
        // Handle Error
    }

    @Override
    public void onAuthenticationFailed() {
        super.onAuthenticationFailed();
        // Handle failure
    }

    @Override
    public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
        super.onAuthenticationSucceeded(result);
        //Handle success
    }
}
```
This code is the simplification of the full fingerprint authentication flow, it checks if the device has a fingerprint sensor and that the user has enrolled fingerprints for security. Then initiates the authentication process. It does not handle all error cases and authentication flow such as user permission prompt and handling user aborting the scan in between. In a production-level application, you might need to handle additional situations as well. 

This code also won't work in Android versions above 28, as the FingerprintManager class has been deprecated in API 28 in favor of the BiometricPrompt class, which allows the use of other biometric authenticators like face and iris, aside from fingerprints. 

NOTE: Fingerprint-based user authentication is not recommended for sensitive transactions because of the likelihood of false positives. It can be used in combination with another form of authentication for better security.
