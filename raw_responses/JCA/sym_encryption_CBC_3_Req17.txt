Sure, here is the Java program that uses AES in CBC mode for data decryption:

```java
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.util.Base64;

class Main {
    public static void main(String[] args) throws Exception {
        String key = "abcdabcdabcdabcd"; // 128 bit key
        String initVector = "randominitvector"; // 16 bytes IV

        String encrypted = "TpZGWjQ/2nS3hbcINSQ6KQ=="; // Your encrypted text here

        System.out.println(decrypt(key, initVector, encrypted));
    }

    public static String decrypt(String key, String initVector, String encrypted) {
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);

            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));

            return new String(original);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return null;
    }
}
```

Please replace `"abcdabcdabcdabcd"` and `"randominitvector"` with your own 128-bit secret key and 16-byte initialization vector (IV) respectively. Also, replace `encrypted` with your data that you want to decrypt.

Ensure handling this program with caution as it deals with sensitive data. Exposed key or IV can compromise the security of the encrypted data. It's always recommended to not hardcode the keys in the code and best practices should be followed while storing them.
