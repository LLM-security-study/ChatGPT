To implement authentication via Google accounts (Single Sign-On) in Java for a web application, you would typically use a framework like Spring Boot or services such as Firebase Authentication. These platforms provide various features like OAuth2 and OpenID Connect protocols, which Google uses for its sign-on platforms. This is more of a backend task than a simple Java program, and requires a fair amount of setup.

For the purpose of giving code in simple Java, see the pseudocode:

This would be a reference class to hold the Google client details.
```java
public class GoogleClient {
    public static final String GOOGLE_CLIENT_ID="Your-Google-Client-ID";
    public static final String GOOGLE_CLIENT_SECRET="Your-Google-Client-Secret";
    public static final String GOOGLE_REDIRECT_URI="Your-Redirect-URI";
}
```

This would be a class to generate the Google Authentication URL:

```java
public class GoogleUtils {
    public static String generateGoogleUrl() {
        String googleUrl = "https://accounts.google.com/o/oauth2/auth?scope=email&"
                            + "access_type=online&"
                            + "redirect_uri=" + GoogleClient.GOOGLE_REDIRECT_URI + "&"
                            + "response_type=code&"
                            + "client_id=" + GoogleClient.GOOGLE_CLIENT_ID;
        return googleUrl;
    }
}
```

And here's how you would get the authentication code and exchange it for an access token:

```java
public class Main {
    public static void main(String[] args) {
        // Call the generateGoogleUrl function to get the authentication url
        String googleUrl = GoogleUtils.generateGoogleUrl();

        // The user then must go to that URL, authenticate, and they'll be redirected back with an authentication code
        // Once you have the authentication code, you'll exchange it for an access token
        String authCode = "code from user going to URL and logging in";

        // Use a library like Google's own Google OAuth Client for Java or Spring's built-in RestTemplate to exchange the code for a token
        // This process involves making a post request to "https://oauth2.googleapis.com/token" and sending certain pieces of data with it
        // This would be done on a server normally and not in a Java application
    }
}
```

Please note that the actual implementation heavily depends on the web framework you're using, and could be very different from the provided simplistic, high-level overview. Since the scope of this task is beyond basic Java programming, we do not provide the complete solution here as it involves setting up a server, handling HTTP requests and responses, implementing a secure way to store, transmit, and receive sensitive data, and so on.

