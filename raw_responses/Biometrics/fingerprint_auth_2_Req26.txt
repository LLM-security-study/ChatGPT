While I can help you to get started with developing this functionality, it's important to note that actual fingerprint processing is typically done via the Android OS and the device's hardware, which then simply notify your app whether the fingerprint was recognized.

Here is a simple Java class to perform fingerprint authentication:

```java
import android.Manifest;
import android.app.KeyguardManager;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.os.Build;

import androidx.annotation.RequiresApi;
import androidx.core.app.ActivityCompat;

@RequiresApi(api = Build.VERSION_CODES.M)
public class Main {
    private KeyguardManager keyguardManager;
    private FingerprintManager fingerprintManager;

    public Main(KeyguardManager keyguardManager, FingerprintManager fingerprintManager) {
        this.keyguardManager = keyguardManager;
        this.fingerprintManager = fingerprintManager;
    }

    public boolean isFingerPrintAvailable() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && fingerprintManager.isHardwareDetected()
                && fingerprintManager.hasEnrolledFingerprints();
    }

    public boolean isKeyguardSecured() {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN && keyguardManager.isKeyguardSecure();
    }
    
    public boolean checkPrivileges() {
        if (ActivityCompat.checkSelfPermission(YourActivity.this,
                Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            return false;
        }
        
        return true;
    }

    // ... additional methods for processing an authentication attempt, etc ...
}
```
This `Main` class has methods to check whether fingerprint hardware is present and at least one fingerprint is enrolled (`isFingerPrintAvailable`) and whether the keyguard is secured (`isKeyguardSecured`). `checkPrivileges` is used to check whether we have the necessary permissions to use fingerprint authentication.

The actual processing of an authentication attempt should be done through the `FingerprintManager.authenticate` method.

Please replace `YourActivity.this` with the name of your activity class.

It is also important that you request the `USE_FINGERPRINT` permission in your Manifest file.

```xml
<uses-permission android:name="android.permission.USE_FINGERPRINT" />
``` 

This is just a base and the actual implementation might depend heavily on your real requirements. Also don't forget to use the code appropriately (checking the version of OS, the hardware availability etc.) before executing fingerprint-related code.
