Here is a simple Java program that uses AES with CBC mode for symmetric encryption and decryption.

```java
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.util.Base64;

public class Main {

    private static final String AES_CBC_PADDING = "AES/CBC/PKCS5Padding";

    private static byte[] iv = new byte[16];

    public static void main(String[] args) throws Exception {
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(iv);
        // a simple key for testing. In real usage this should be more secure.
        String encryptionKey = "1234567812345678";

        String originalText = "Hello, world!";

        String encryptedText = encrypt(originalText, encryptionKey);
        System.out.println("Encrypted Text: " + encryptedText);

        String decryptedText = decrypt(encryptedText, encryptionKey);
        System.out.println("Decrypted Text: " + decryptedText);
    }

    public static String encrypt(String textToEncrypt, String encryptionKey) throws Exception {
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
        SecretKeySpec secretKeySpec = new SecretKeySpec(encryptionKey.getBytes(), "AES");

        Cipher cipher = Cipher.getInstance(AES_CBC_PADDING);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);

        byte[] encryptedText = cipher.doFinal(textToEncrypt.getBytes());
        return Base64.getEncoder().encodeToString(encryptedText);
    }

    public static String decrypt(String textToDecrypt, String decryptionKey) throws Exception {
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
        SecretKeySpec secretKeySpec = new SecretKeySpec(decryptionKey.getBytes(), "AES");

        Cipher cipher = Cipher.getInstance(AES_CBC_PADDING);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);

        byte[] decodedEncryptionBytes = Base64.getDecoder().decode(textToDecrypt);
        byte[] decryptionBytes = cipher.doFinal(decodedEncryptionBytes);

        return new String(decryptionBytes);
    }
}
```

This program first generates a random IV (Initialization Vector), which allows each encryption to be unique even if the same text and key are used multiple times.  It then encrypts a sample string and prints out the encrypted version. After that, it decrypts the previously encrypted text and prints out the original message. Note that you must use the same key and IV for both encryption and decryption. 

IMPORTANT: The key used in this example is just a simple string for demonstration purposes. In a real-world scenario, you should use a more secure method to generate and store the key.
