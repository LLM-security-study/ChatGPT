In order to verify the integrity of the Android device, we will use the "SafetyNet Attestation API" that provides a suite of services and APIs to help protect apps against security threats, including device tampering, bad URLs, potentially harmful apps, and fake users.

The attestation API checks if the device is Certified Android device and has not been tampered with or modified.

Below is the sample Java code that does the same by performing a device integrity check:

```java
import android.util.Log;
import com.google.android.gms.safetynet.SafetyNet;
import com.google.android.gms.safetynet.SafetyNetApi;

public class Main {
  private static final String TAG = "IntegrityCheck";

  public static void main(String[] args) {
    String nonceData = "Random Nonce Data";  // should be at least 16 bytes in length
    byte[] nonce = nonceData.getBytes();

  SafetyNet.getClient(this).attest(nonce, "<YOUR_API_KEY>")
    .addOnSuccessListener(this,
      new OnSuccessListener<SafetyNetApi.AttestationResponse>() {
        @Override
        public void onSuccess(SafetyNetApi.AttestationResponse response) {
          // Indicates communication with the service was successful.
          // Use response.getJwsResult() to get the result data.
          Log.d(TAG, "Success! SafetyNet result:\n" + response.getJwsResult() + "\n");
        }
      })
    .addOnFailureListener(this, new OnFailureListener() {
      @Override
      public void onFailure(@NonNull Exception e) {
        // An error occurred while communicating with the service.
        if (e instanceof ApiException) {
          // An error with the Google Play services API contains some additional details.
          ApiException apiException = (ApiException) e;

          // You can retrieve the status code using the
          // apiException.getStatusCode() method.
        } else {
          // A different, unknown type of error occurred. Log it here.
          Log.d(TAG, "Unknown error occurred: " + e.getMessage());
        }
      }
    });
  }
}
```

Please, replace "<YOUR_API_KEY>" by your actual API key.

Remember that SafetyNet Attestation API usage incurs charges after the first 10,000 API calls per month. You should set usage limits in the Google Cloud Platform Console to prevent unexpected charges.

Note: This is just a sample. You need to run this from an Activity or use Context of the Android application in the `getClient()` method and handle permission in AndroidManifest file.
The result from SafetyNet Attestation API needs to be verified with a trusted server. The result is a JWT (JSON Web Token). The payload of this JWT contains the attestations. You must never trust any attestations from a client without verification. 

SafetyNet Attestation API is not foolproof and can be bypassed. There are other checks available such as checking for root, checking for system properties. You can consider using those checks as well, but bear in mind they can also be bypassed. Use it as one of many signals to gain high confidence whether the environment your app is running in is secure or not.
