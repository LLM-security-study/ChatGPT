Sure, here is a simple Java program which applies asymmetric encryption using RSA algorithm to a given text message:

```java
import javax.crypto.Cipher;
import java.security.*;

public class Main {

    public static void main(String[] argv) throws Exception {
        // Generate key pair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
        kpg.initialize(512);
        KeyPair kp = kpg.generateKeyPair();
        PublicKey publicKey = kp.getPublic();
        PrivateKey privateKey = kp.getPrivate();

        // Original text
        String originalText = "This is a secret message.";

        // Encryption
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] secretMessageBytes = originalText.getBytes("UTF-8");
        byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);
        String encryptedMessage = new String(encryptedMessageBytes, "UTF-8");

        System.out.println("Encrypted Message: " + encryptedMessage);

        // Decryption
        Cipher decryptCipher = Cipher.getInstance("RSA");
        decryptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedMessageBytes = decryptCipher.doFinal(encryptedMessageBytes);
        String decryptedMessage = new String(decryptedMessageBytes, "UTF-8");

        System.out.println("Decrypted Message: " + decryptedMessage);
    }
}
```

This program first generates a pair of public and private keys using the RSA algorithm, which are used for the encryption and decryption processes. The original text message is encrypted using the public key and the encrypted binary content is then turned into a string to be displayed.

For the decryption, the program uses the private key to decrypt the binary content of the previously encrypted message. The decrypted binary content is then turned into a string to be displayed.

Please note that encryption results (encrypted binary content) can include non-printable characters, so for real-world use cases, you may need to encode the result (for instance, with Base64) before storing or transmitting it.

Also please note that in practice, it's typical to use asymmetric encryption to securely exchange symmetric keys (e.g., AES), which are then used for bulk data encryption/decryption. This is due to the fact that symmetric encryption is generally much faster than asymmetric encryption.
