Here is the Java code implementing OAuth 2.0 authorization flow to access Google contacts by entering `access_type=offline` when getting the authorization code:

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.List;

public class Main {
    private static final String APPLICATION_NAME = "<YOUR_APPLICATION_NAME>";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "<YOUR_TOKENS_DIRECTORY_PATH>";
    private static final List<String> SCOPES = Arrays.asList("https://www.googleapis.com/auth/contacts.readonly");
    private static final String CREDENTIALS_FILE_PATH = "<YOUR_CREDENTIALS_FILE_PATH>";

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new FileReader(CREDENTIALS_FILE_PATH));

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline") 
                .build();

        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
        return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }

    public static void main(String... args) throws IOException, GeneralSecurityException {
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Credential credentials = getCredentials(HTTP_TRANSPORT);
        System.out.println("Credentials saved to " + TOKENS_DIRECTORY_PATH);
    }
}
```

To execute this code properly, you need to replace `<YOUR_APPLICATION_NAME>`, `<YOUR_TOKENS_DIRECTORY_PATH>`, and `<YOUR_CREDENTIALS_FILE_PATH>` with your application name, tokens directory path, and credentials file path, respectively.

On successful authorization, it prints `Credentials saved to <YOUR_TOKENS_DIRECTORY_PATH>` on the standard output and stores the user's credentials in the specified file system directory. The next time the application runs, it can directly access the stored credentials without requiring the user to authorize the application again.

Make sure to add required Google Client Library dependencies in your `pom.xml` if you are using Maven. This includes Google OAuth Client Library for Java, Google HTTP Client Library for Java, and Google API Client Library for Java.
