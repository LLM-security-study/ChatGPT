The following is a simple example of a Java program that takes a certificate file as input and stores it in a keystore.

Bear in mind that this is a basic example and may require changes based on your specific requirements.

```java
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

public class Main{
   public static void main(String[] args) throws Exception{

       // Load the certificate
       FileInputStream certFile = new FileInputStream("mycertfile.pem");
       CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
       Certificate cert = certFactory.generateCertificate(certFile);
       certFile.close();

       // Create a keystore 
       KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());

       // If the keystore exist, load it, if not create a new one
       FileInputStream ksFile = null;
       try {
           ksFile = new FileInputStream("mykeystore.jks");
           keyStore.load(ksFile, "password".toCharArray());
       } catch (FileNotFoundException e) {
           keyStore.load(null, "password".toCharArray());
       } finally {
          if (ksFile != null) {
              ksFile.close();
           }
       }

       // Add the certificate 
       keyStore.setCertificateEntry("alias", cert);

       // Save the keystore 
       FileOutputStream saveKs = new FileOutputStream("mykeystore.jks");
       keyStore.store(saveKs, "password".toCharArray());
       saveKs.close();
   }
}
```
In this code:

* "mycertfile.pem" is the cacert file from which we read the certificate using CertificateFactory.
* "mykeystore.jks" is the name of the keystore.
* "password" is the password to open the keystore.
* "alias" is a string identifier for the certificate in the keystore.

Please make sure the paths of "mycertfile.pem" and "mykeystore.jks" are correct.
Also, this program has no error checking, it's a simple and direct piece of code that would be part of a bigger system. It doesn't check if the certificate already exists, or the correctness of the certificate. Be sure to properly handle all the exceptions and to close the streams in a finally clause or use try-with-resources in a production environment to not leak any resources.
