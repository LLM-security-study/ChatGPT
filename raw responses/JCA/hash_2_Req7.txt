Here is a simple implementation of a file integrity check in Java:

```java
import java.io.FileInputStream;
import java.io.IOException;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main {
    public static void main(String[] args) {
        // path to the file
        String filePath = "/path/to/file";
        // hash value to be compared with
        String originalHashValue = "original-hash-value";
        
        try {
            // calculating the hash value of the file
            String calculatedHashValue = calculateHashValue(filePath);
            
            // comparing the original and calculated hash values
            if (originalHashValue.equals(calculatedHashValue)) {
                System.out.println("The file has not been modified.");
            } else {
                System.out.println("The file has been modified.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static String calculateHashValue(String filePath) throws NoSuchAlgorithmException, IOException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");

        try (DigestInputStream dis = new DigestInputStream(new FileInputStream(filePath), md)) {
            while (dis.read() != -1) ; //empty loop to clear the data
            md = dis.getMessageDigest();
        }

        // converting byte array to hex
        StringBuilder result = new StringBuilder();
        for (byte b : md.digest()) {
            result.append(String.format("%02x", b));
        }
        
        return result.toString();
    }
}
```

In the `main` method, put the path to your file and the original hash value you got when the file was first created. When you run the program, it will print whether the file has been modified or not.

I have used SHA-256 for hashing which is supported by Java standard API hence suitable for your requirement of not using external libraries. 

Make sure to replace `"/path/to/file"` with the actual path of your file and `"original-hash-value"` with the actual hash value of your file to check the integrity of the file. 

This program reads the file, calculates the SHA-256 hash and compares it to the original one. If the file has been modified, the hash value will be different.
