Sure, here's an elementary implementation of asymmetric encryption using Java. The program uses RSA algorithm which is present in the Java Cryptography Extension (JCE). 

Please note: This is a basic implementation and it does not cover all operations that should be performed in a secure production environment, such as secure generation, storage, and transfer of keys, and checking the integrity and authenticity of the decrypted message.

Also, do remember to handle all the exceptions correctly in a real-world scenario.

```Java
import java.security.*;
import javax.crypto.*;

public class Main {
    public static void main(String[] args) throws Exception {
        // Generate key pair
        KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
        kpg.initialize(1024);
        KeyPair kp = kpg.generateKeyPair();
        PublicKey publicKey = kp.getPublic();
        PrivateKey privateKey = kp.getPrivate();

        // Original message 
        String msg = "Hello, World!";
        System.out.println("Original Message : " + msg);

        // Encrypt message
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedMsg = cipher.doFinal(msg.getBytes());
        System.out.println("Encrypted Message : " + new String(encryptedMsg));

        // Decrypt message
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedMsg = cipher.doFinal(encryptedMsg);
        System.out.println("Decrypted Message : " + new String(decryptedMsg));
    }
}
```
In the program:  
- A RSA key pair is generated. The public key is used for encryption, and the private key is used for decryption.
- The text message "Hello, World!" is encrypted and then decrypted, after which it is printed to the console.
