Sure, here is a basic example of how you might implement Google Single-Sign-On (SSO) authentication using a Java web application:

```java
/*
 * This is a Java program to integrate Google Single-Sign-On for user authentication into a web application.
 * Note: The objective is to exclusively implement the authentication functionality, excluding other tasks.
 * The application has been already registered with the Google API and has obtained the necessary details.
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;


import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

public class Main extends HttpServlet {

    // replace these with your own values
    private static final String CLIENT_SECRET_FILE = "/path/to/client/secret";
    private static final List<String> SCOPES = Arrays.asList("https://www.googleapis.com/auth/userinfo.profile");

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        GoogleClientSecrets secrets = GoogleClientSecrets.load(
                JacksonFactory.getDefaultInstance(),
                new InputStreamReader(Main.class.getResourceAsStream(CLIENT_SECRET_FILE)));

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                new NetHttpTransport(),
                JacksonFactory.getDefaultInstance(),
                secrets,
                SCOPES
        ).build();

        String url = flow.newAuthorizationUrl()
                .setRedirectUri("your-redirect-uri")
                .build();

        resp.sendRedirect(url);
    }
}
```

This is just the basic flow for redirecting the user to the Google SSO page. When Google redirects back to your page, you should handle that request, get the authorization code from Google, and exchange it for an access token. Depending on your needs, you'll usually want to store this token for authenticated requests in future.
