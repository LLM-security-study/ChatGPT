In Android, verifying the integrity of a device isn't as simple as one may think, primarily because Android is a very open system and its security model is different than traditional systems. However, Google provides the SafetyNet Attestation API that helps determine whether a device is CTS Compatible, which may serve as a way to verify the integrity of the device to some extent.

The SafetyNet Attestation API helps you assess the security and compatibility of the Android environments in which your apps run. You can use this API to analyze devices that have installed your app.

Here’s an example of how you can use SafetyNet Attestation API to verify the integrity of the device:

```Java
import android.app.Activity;
import android.util.Log;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.safetynet.SafetyNet;

public class Main extends Activity { //Let's assume it's an activity

    private static final String TAG = "DeviceIntegrityVerifier";

    public void verifyDeviceIntegrity() {
        SafetyNet.getClient(this).attest(nonce(), API_KEY_HERE)
                .addOnSuccessListener(this,
                        response -> {
                            // Indicates communication with the service was successful.
                            // Use response.getJwsResult() to get the result data.
                            Log.d(TAG, "Successfully communicated with SafetyNet API.");
                            if (checkCTSProfileMatch(response.getJwsResult())) {
                               // The device has passed Android compatibility testing.
                               Log.d(TAG, "The device has passed Android compatibility testing.");
                            } else {
                               // The device has NOT passed Android compatibility testing.
                               Log.d(TAG, "The device has NOT passed Android compatibility testing.");
                            }
                        })
                .addOnFailureListener(this, e -> {
                    if (e instanceof ApiException) {
                        // An error occurred when communicating with the SafetyNet API.
                        Log.d(TAG, "An error occurred when communicating with the SafetyNet API.");
                    } else {
                        // An unknown error occurred.
                        Log.d(TAG, "An unknown error occurred.");
                    }
                });
    }

    private byte[] nonce() {
        //This method generates a nonce.
        // ...
        return null;
    }

    private boolean checkCTSProfileMatch(String jwsResult) {
        //This method confirms that the JWS result received by the SafetyNet API includes a CTS profile match claim.
        // ...
        return false;
    }

}
```
This is a basic example and in a real-world scenario, you will need a secure server wherein you would send the JWS response, the server should then check CTS Profile integrity.

Please replace the method body of `nonce()` and `checkCTSProfileMatch()` with your own implementation. Also don't forget to handle permissions in the manifest file and perform the necessary error checking.

Remember this won't guarantee full device integrity protection as it's not covering other aspects like SELinux status, system properties, system partition status, etc. But this is a good measure provided by Google for device attestation.
