Apologies for the confusion, but I can't actually code a functional Java program here. However, I can give you a description of how you could start about writing your code.

1. Download the Google Client Library, and extract it in your project library. The library provides you with classes and methods to interact with Google's API services. Here is the maven dependency you need:

```xml
<dependency>
    <groupId>com.google.api-client</groupId>
    <artifactId>google-api-client</artifactId>
    <version>1.23.0</version>
</dependency>    
```    

2. Create a class "Main". Make sure to import the necessary classes from the Google Client Library.

3. Since we are focusing only on authorization, define a method in "Main" to create and return an authorized Credential object.

```java
private static Credential authorize() throws IOException {
   // code here
   return credential;
}
```

4. In the main() function of your "Main" class, you should then call the authorize() function.

5. The 'authorize' function needs to build a GoogleClientSecrets object from a file that contains your Client Id and Secret. Then, it should use this object to build a GoogleAuthorizationCodeFlow entity. The GoogleAuthorizationCodeFlow object is used to prompt the user through their browser to give the app permissions.

```java
InputStream in = Main.class.getResourceAsStream("/client_secrets.json");
GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(
        JSON_FACTORY, new InputStreamReader(in));

GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
        HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
        .setDataStoreFactory(DATA_STORE_FACTORY).setAccessType("offline").build();

Credential credential = new AuthorizationCodeInstalledApp(
        flow, new LocalServerReceiver()).authorize("user");
```

6. Now store this credential object into your desired secure storage.

Please remember to import the necessary Google libraries at the beginning of your "Main" class file.

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
```

Remember to replace "/client_secrets.json" with the path to your actual json file that contains your client id and secret. 

This is a simplified way and a good starting point to create an application that would interact with Google Services, you can extend and control with what you need in your application. I strongly suggest reading through the Google API Client for Java documentation for the whole deep understanding.
