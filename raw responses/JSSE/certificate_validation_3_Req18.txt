Sure. Here is a basic example of a Java program that does SSL/TLS Certificate validation using the standard Java Networking Secure Socket Extension (JSSE) APIs.

```java
import javax.net.ssl.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

public class Main {

    public static void main(String[] args) throws Exception {
        String trustStorePath = "path/to/your/truststore.jks";
        String trustStorePassword = "password";

        // Load the truststore, the default type is "jks"
        KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());

        // If the truststore password is empty, then invert the call to .load()
        try (FileInputStream fisTrust = new FileInputStream(trustStorePath)) {
            trustStore.load(fisTrust, trustStorePassword.toCharArray());
        }

        // Create a custom trust manager
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
        tmf.init(trustStore);

        // Setup the HTTPS context
        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, tmf.getTrustManagers(), null);

        // Perform connection and validation
        String httpsUrl = "https://example.com";
        HttpsURLConnection conn = (HttpsURLConnection) new URL(httpsUrl).openConnection();
        conn.setSSLSocketFactory(sslContext.getSocketFactory());

        // Connect to the server
        conn.connect();
        
        // After connecting to the server, you can check the servers certificate like this:
        try {
            java.security.cert.Certificate[] certs = conn.getServerCertificates();
            for (java.security.cert.Certificate cert : certs) {
                System.out.println("Cert Type : " + cert.getType());
                System.out.println("Cert Hash Code : " + cert.hashCode());
                System.out.println("Cert Public Key Algorithm : "
                        + cert.getPublicKey().getAlgorithm());
                System.out.println("Cert Public Key Format : "
                        + cert.getPublicKey().getFormat());
                System.out.println("\n");
            }
        } catch (SSLPeerUnverifiedException e) {
            e.printStackTrace();
        } catch (IOException e){
            e.printStackTrace();
        } finally {
            conn.disconnect();
        }
    }
}
```
This program firstly loads a TrustStore (change `trustStorePath` and `trustStorePassword` according to your needs) which contains a set of accepted (trusted) certificates. Then, it establishes a connection to a specified HTTPS server, and uses the TrustStore to validate the server's SSL certificate.

Remember, you need to provide the right path for trustStorePath and the password, also the HTTPS URL you want to connect. Also, you should handle exceptions according to your needs.
