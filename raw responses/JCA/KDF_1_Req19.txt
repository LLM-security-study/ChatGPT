Here's a general guideline for generating an AES SecretKeySpec from a user password using built-in Java APIs. The code demonstrates how to obtain a cryptographic key using a user-provided password and a salt. I assume you're familiar with cryptographic concepts like hash functions (SHA-256, in this case), salts, and key derivation functions.

Please note: In a real-world scenario, the salt would be randomly generated and stored safely on the server for verifying future password inputs, but it is hard-coded here for the sake of simplicity.

```java
import java.util.Arrays;
import java.security.spec.KeySpec;
import java.security.MessageDigest;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class Main {
    public static void main(String[] args) throws Exception {
        char[] password = "YourUserPassword".toCharArray();
        byte[] salt = "YourSalt".getBytes();
        
        // Create a PBEKeySpec
        int keyLength = 256;
        int iterations = 65536;
        KeySpec spec = new PBEKeySpec(password, salt, iterations, keyLength);
        
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        byte[] keyBytes = keyFactory.generateSecret(spec).getEncoded();
        
        SecretKey secretKey = new SecretKeySpec(keyBytes, "AES");
        System.out.println("Generated Secret Key: " + Arrays.toString(secretKey.getEncoded()));
    }
}
```

This is a simple console based Java application that will generate a SecretKey based on the provided password and salt.

In this program, we are using PBKDF2WithHmacSHA256 which stands for Password-Based Key Derivation Function 2 with HMAC-SHA256. PBKDF2 applies a pseudorandom function, such as a cryptographic hash, cipher, or HMAC to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key. We are taking SHA-256 as it is deemed relatively secure.

Remember to handle the exceptions appropriately in your actual implementation.
