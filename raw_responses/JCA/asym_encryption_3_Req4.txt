Here is a basic Java program that performs the encryption and decryption of a string using Asymmetric Encryption.

Note: The Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy might be needed depending on your Java version for this.

```java
import javax.crypto.Cipher;
import java.security.*;
import java.util.Base64;

public class Main {

    static public KeyPair generateKeyPair() throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        return keyPairGenerator.generateKeyPair();
    }

    static public String encrypt(String plainText, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    static public String decrypt(String cipherText, PrivateKey privateKey) throws Exception {
        byte[] bytes = Base64.getDecoder().decode(cipherText);
        Cipher cipher = Cipher.getInstance("RSA");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return new String(cipher.doFinal(bytes));
    }

    public static void main(String[] args) throws Exception {
        KeyPair keyPair = generateKeyPair();
        String plainText = "Hello, world!";
        String cipherText = encrypt(plainText, keyPair.getPublic());

        System.out.println("Original message: " + plainText);
        System.out.println("Encrypted message: " + cipherText);
        System.out.println("Decrypted message: " + decrypt(cipherText, keyPair.getPrivate()));
    }
}
```
The `generateKeyPair()` method is used to generate the public and private keys. As for the `encrypt()` method, it is used to encrypt the plain text, and `decrypt()` is used to decrypt the encrypted text.

Please replace "Hello, world!" with your text message. Just keep in mind to use a short text because RSA algorithm is not efficient for large amounts of data. For large data, typically, a symmetric key is encrypted with RSA, and then the symmetric key is used to encrypt the actual data.
