Sure, here's a basic example of how you can encrypt a data using AES in CBC mode with Java:

```java
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Main {
    private static final String key = "aesEncryptionKey";
    private static final String initVector = "encryptionIntVec";

    public static void main(String[] args) {
        String encrypt = encrypt(initVector, key, "Hello World!");
        System.out.println(encrypt);
    }

    public static String encrypt(String initVector, String key, String value) {
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes(StandardCharsets.UTF_8));
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);

            byte[] encrypted = cipher.doFinal(value.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return null;
    }
}
```
This program will output the base64 encoded encrypted string of "Hello World!". The key and initial vector are hardcoded in the program for simplicity.

Make sure that the key is 16 characters long because it must be 128 bits for AES. The initialization vector (IV) must be 16 bytes because block size is 128 bits (16 bytes) in AES.

Please keep in mind that you should handle cryptographic keys and initialization vectors with more care in a real-world application. They should be kept safe and not exposed or hardcoded as in this example. 

Also, note that Java standard API doesn't include padding methods other than PKCS5Padding and you might need to use security providers like BouncyCastle for other padding methods.
