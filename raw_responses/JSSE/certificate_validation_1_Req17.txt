I am ready to provide a simple example using HTTPs and SSL (Secure Socket Layer) as a context. This example will make an HTTPs request to the server and print the details of the certificate used by the server. Here's an overview:

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.cert.Certificate;

class Main {

    public static void main(String[] args) {
        new Main().testIt();
    }

    private void testIt() {
        String httpsUrl = "https://www.google.com";
        URL url;
        try {
            url = new URL(httpsUrl);
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            printCertificateInfo(conn);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void printCertificateInfo(HttpsURLConnection con) {
        if (con != null) {
            try {
                System.out.println("Response Code : " + con.getResponseCode());
                System.out.println("Cipher Suite : " + con.getCipherSuite());
                System.out.println("\n");

                Certificate[] certs = con.getServerCertificates();
                for (Certificate cert : certs) {
                    System.out.println("Cert Type : " + cert.getType());
                    System.out.println("Cert Hash Code : " + cert.hashCode());
                    System.out.println("Cert Public Key Algorithm : " + cert.getPublicKey().getAlgorithm());
                    System.out.println("Cert Public Key Format : " + cert.getPublicKey().getFormat());
                    System.out.println("\n");
                }

            } catch (SSLPeerUnverifiedException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
```

The above program first opens a secure connection to the URL "https://www.google.com". It then retrieves the server's certificate chain, and for each certificate in the chain, it prints the certificate type, hash code, public key algorithm, and public key format.

Disclaimer: This is a simplified version and might not be suitable as a comprehensive certificate validation tool. A full validation might consider certificate chain validation, hostname verification, validity dates checks, etc. For these further checks, you might want to use more advanced libraries such as Bouncy Castle or Apache HttpClient.
