Sure, here's a basic implementation of an SSL Socket using Java Standard APIs:

```java
import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        String host = "localhost";
        int port = 9090;
        BufferedReader bufferedReader;
        SSLSocket sslSocket;

        try {
            SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            sslSocket = (SSLSocket) sslSocketFactory.createSocket(host, port);

            PrintWriter out = new PrintWriter(sslSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            bufferedReader = new BufferedReader(new InputStreamReader(System.in));
            String userInput;

            while ((userInput = bufferedReader.readLine()) != null) {
                out.println(userInput);
                System.out.println("echo: " + in.readLine());
            }

            out.close();
            in.close();
            sslSocket.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

In the above code, there're a few things that needs to be highlighted. Make sure your SSL/TLS certificates are properly installed on your both client and server-side. The gathered information is encrypted and deciphered as per the SSL/TLS rules using these certificates.

The main API we are using is the Java Secure Socket Extension (JSSE) which provides a framework and an implementation for a Java version of the SSL and TLS protocols and includes functionality for data encryption, server authentication, and message integrity.
