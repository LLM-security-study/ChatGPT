Sure, here's a basic Java program that implements SSL/TLS certificate validation using Java Secure Socket Extension (JSSE) API. Be aware that it is a rudimentary example. Prior to using it, you will have to modify it as per your requirements to handle real-world scenarios.

```java
import java.net.URL;
import java.net.URLConnection;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import javax.security.cert.Certificate;

public class Main {

    public static void main(String[] args) {
        new Main().testCertificateValidation("https://www.example.com/");  
    }

    public void testCertificateValidation(String httpsURL) {
        try {
            // Create a URL object
            URL url = new URL(httpsURL);

            // Create a connection 
            URLConnection urlConnection = url.openConnection();

            if(urlConnection instanceof HttpsURLConnection){
                HttpsURLConnection httpsConn = (HttpsURLConnection) urlConnection;

                // Make a GET request to the server
                httpsConn.setRequestMethod("GET");
                
                System.out.println("Response Code : " + httpsConn.getResponseCode());
                System.out.println("Cipher Suite : " + httpsConn.getCipherSuite());

                // Get the certificates
                Certificate[] certs = httpsConn.getServerCertificates();
                for(Certificate cert : certs){
                    System.out.println("Cert. Type : " + cert.getType());
                    System.out.println("Cert. Hash Code : " + cert.hashCode());
                    System.out.println("Cert. Public Key Algorithm : " 
                                    + cert.getPublicKey().getAlgorithm());
                    System.out.println("Cert. Public Key Format : " 
                                    + cert.getPublicKey().getFormat());
                }

            } else {
                System.out.println("Invalid URL");
            }
        }  catch (SSLPeerUnverifiedException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

This Java program creates a HTTPS connection to a specified URL and then prints the SSL Certificate information. Do note that this is an example code and you may need to handle exceptions and other edge cases as appropriate to ensure production-grade robustness and security.

Also, your JDK version must support the SSL/TLS version required by the target URL. You may encounter SSLHandshakeException in case of compatibility issues.
