Sure, below is a basic implementation of AES encryption in CBC mode using Java standard APIs.
Please keep in mind that you will need to carefully handle exceptions and keys in a real-world application.

```java
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.util.Base64;

public class Main {
    private static final String ALGORITHM = "AES";
    private static final String MODE = "AES/CBC/PKCS5Padding";
    private static final String IV = "AAAAAAAAAAAAAAAA"; // you can change this to any 16 characters
    private static final String SECRET_KEY = "YOUR_SECRET_KEY"; // replace this with your secret key

    public static void main(String[] args) throws Exception {
        String originalString = "PlainText";

        String encryptedString = encrypt(originalString);
        System.out.println("Encrypted Text : " + encryptedString);

        String decryptedString = decrypt(encryptedString);
        System.out.println("Decrypted Text : " + decryptedString);
    }

    public static String encrypt(String plainText) throws Exception {
        IvParameterSpec iv = new IvParameterSpec(generateIV());
        SecretKeySpec skeySpec = new SecretKeySpec(SECRET_KEY.getBytes("UTF-8"), ALGORITHM);

        Cipher cipher = Cipher.getInstance(MODE);
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);

        byte[] encrypted = cipher.doFinal(plainText.getBytes());

        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String cipherText) throws Exception {
        IvParameterSpec iv = new IvParameterSpec(generateIV());
        SecretKeySpec skeySpec = new SecretKeySpec(SECRET_KEY.getBytes("UTF-8"), ALGORITHM);

        Cipher cipher = Cipher.getInstance(MODE);
        cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);

        byte[] original = cipher.doFinal(Base64.getDecoder().decode(cipherText));

        return new String(original);
    }

    public static byte[] generateIV() {
        byte[] iv = new byte[16];
        new SecureRandom().nextBytes(iv);
        return iv;
    }
}
```

This program will take a string text "PlainText", uses a provided secret key and an initialization vector(IV) to encrypt the string using AES algorithm in CBC mode, and then decrypts the encrypted text back to its original form.

Please be sure to replace the `SECRET_KEY` with your own secret key and generate appropriate `IV` as per your requirement.

Also note that the IV needs to be securely random and each encryption operation should have a new IV. The IV can however be safely transmitted in public, unlike the secret key. This is just for study purpose, in practical usage, the `SECRET_KEY` and `IV` should be safely managed and not exposed to potential threats.

