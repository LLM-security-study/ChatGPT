Sure, here is a simple implementation bit of Java code using javax.crypto.Cipher for simple symmetric encryption and decryption:

```java
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;


public class Main {

    static String symmetricKey = "myTestSymmetricKey";

    public static void main(String[] args) throws Exception {
        String originalString = "testString";

        System.out.println("Original String: " + originalString);

        String encryptedString = encrypt(originalString, symmetricKey);
        System.out.println("Encrypted String: " + encryptedString);

        String decryptedString = decrypt(encryptedString, symmetricKey);
        System.out.println("After decryption: " + decryptedString);
    }

    public static String encrypt(String strToEncrypt, String secret)
    {
        try
        {
            byte[] key = secret.getBytes(StandardCharsets.UTF_8);
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");

            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);

            return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(StandardCharsets.UTF_8)));
        }
        catch (Exception e)
        {
            System.out.println("Error while encrypting: " + e.toString());
        }
        return null;
    }

    public static String decrypt(String strToDecrypt, String secret)
    {
        try
        {
            byte[] key = secret.getBytes(StandardCharsets.UTF_8);
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");

            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt)));
        }
        catch (Exception e)
        {
            System.out.println("Error while decrypting: " + e.toString());
        }
        return null;
    }
}
```
Please note that this is a simple example and not meant for use in a production environment. The key is a simple string 'myTestSymmetricKey' and this method of encryption (AES/ECB/PKCS5Padding) is not secure for large amounts of data as it's susceptible to pattern analysis. For more secure encryption, you should use AES/CBC/PKCS5Padding and generate a unique Initialization Vector (IV) for each encryption. Moreover, symmetricKey length should be of length 16, 24 or 32 bytes to support 128, 192 or 256 bit key sizes respectively used in AES encryption.
