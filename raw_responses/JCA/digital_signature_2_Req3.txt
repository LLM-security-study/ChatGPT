Creating a digital signature involves the use of cryptography methods. It includes generating key pairs (public & private), signing the data with the private key, and then verifying the signature with the public key. 
Here's a basic Java solution:

```Java
import java.security.*;

public class Main {
    public static void main(String[] args) throws Exception {
        // Generate a key pair
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("DSA", "SUN"); 
        SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN"); 
        keyGen.initialize(1024, random); 
        KeyPair pair = keyGen.generateKeyPair();
        PrivateKey priv = pair.getPrivate();
        PublicKey pub = pair.getPublic();
         
        byte[] dataToSign = "data to be signed".getBytes("UTF8");
         
        // Sign the data
        Signature dsa = Signature.getInstance("SHA1withDSA", "SUN"); 
        dsa.initSign(priv);
        dsa.update(dataToSign);
        byte[] signature = dsa.sign();
         
        // Verify the signature
        dsa.initVerify(pub);
        dsa.update(dataToSign);
        boolean verifies = dsa.verify(signature);
        System.out.println("Signature verifies: " + verifies);
    }
}
```
In this program:

1. A KeyPairGenerator is created to generate a key pair for the Digital Signature Algorithm (DSA). 

2. The generated key pair includes a private key and a public key. 

3. The data to be signed is updated into the Signature instance.

4. Using the private key, a signature is created.

5. At the receiver end, with the same data that was signed at the sender end and the sender's public key, the digital signature is verified. 

Please replace `"data to be signed"` with your data and run this in a secure and safe environment as this involves important key generation.
