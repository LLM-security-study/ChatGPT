Here's a simple implementation of an asymmetric cryptography system using RSA key pair in Java. In this example, we are generating a public-private key pair using `KeyPairGenerator`, then we use `Cipher` class to encrypt and decrypt the text data.

```java
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.crypto.Cipher;

public class Main {
    public static void main(String[] args) throws Exception {
        String plainText = "Hello, World!";

        // Generate a RSA key pair
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
        keyPairGenerator.initialize(2048);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        PublicKey publicKey = keyPair.getPublic();
        PrivateKey privateKey = keyPair.getPrivate();

        // Encrypt the message
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] secretMessageBytes = plainText.getBytes("UTF-8");
        byte[] encryptedMessageBytes = encryptCipher.doFinal(secretMessageBytes);
        String encryptedMessage = new String(encryptedMessageBytes, "UTF-8");

        // Display the encrypted message
        System.out.println("Encrypted message: " + encryptedMessage);

        // Decrypt the message
        Cipher decryptCipher = Cipher.getInstance("RSA");
        decryptCipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedMessageBytes = decryptCipher.doFinal(encryptedMessageBytes);
        String decryptedMessage = new String(decryptedMessageBytes, "UTF-8");

        // Display the decrypted message
        System.out.println("Decrypted message: " + decryptedMessage);
    }
}
```

This program encrypts the string "Hello, World!" using a public key, then it decrypts it using the corresponding private key. The decrypted message should be equal to the original plain text. Please make sure to handle exceptions according to your program's need.
    
Note: Due to the integer size limit in Java, RSA keys need to be relatively small (typically 2048 bits) which makes this program unable to handle larger inputs. If you want to encrypt larger inputs, you could, for example, generate a symmetric key, encrypt the data with that, then encrypt the symmetric key with RSA, and send both to the other end.
