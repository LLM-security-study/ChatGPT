Sure, here's a basic example of an SSL socket connection in Java:

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        String serverName = "Your server name";
        int port = 1234; // Replace with your server port

        try {
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket socket = (SSLSocket) factory.createSocket(serverName, port);

            // Enable all the suites
            socket.setEnabledCipherSuites(socket.getSupportedCipherSuites());

            // Initialize the input and output stream
            InputStream inputStream = socket.getInputStream();
            OutputStream outputStream = socket.getOutputStream();

            // Write a test message to the server
            PrintWriter out = new PrintWriter(new OutputStreamWriter(outputStream));
            out.println("Hello Server");
            out.flush();

            // Read the response from the server
            BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
            String message = in.readLine();
            System.out.println("Server response: " + message);
            
            // Close the socket
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

Note: Ensure that the server supports SSL. If the specified server doesn't support SSL, an `IOException` will be raised when trying to establish a connection. Replace "Your server name" with the IP address or hostname of the server you are connecting to, and replace `1234` with the correct port number. This code first writes a message "Hello Server" to the server and then reads a response. 

#### You should be aware of two main things:

1. This is a very basic example, for production code you should handle exceptions more gracefully and probably use a different suite selection mechanism (usually not all cipher suites are enabled). 

2. SSL Sockets require a secure certificate from a trusted organization. This example assumes that the Java runtime environment is pre-configured with these certificates. 

In real production scenarios, you may have to play with the SSLContext, TrustManager, KeyManager and so on. Be aware SSL programming can get complex, depending on your requirements.
