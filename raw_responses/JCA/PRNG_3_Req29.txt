Sure, here is a simple Java program that satisfies your requirements:

```java
import java.security.SecureRandom;

public class Main { 
    public static void main(String[] args) {
        // Create a secure random number generator
        SecureRandom secureRandom = new SecureRandom();
        
        // Generate a seed for the random number generator
        byte[] seed = new byte[8]; // You can change size as per your needs
        secureRandom.nextBytes(seed);
        
        // Use the seed to initialize the random number generator
        secureRandom.setSeed(seed);

        // Generate a random integer
        int randomInt = secureRandom.nextInt();
        
        System.out.println("Seed: " + bytesToHex(seed));
        System.out.println("Random Integer: " + randomInt);
    }

    // Function to convert byte array to hexadecimal
    static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}
```

This program starts by creating a `SecureRandom` object. It then generates a seed, sets it, and uses it to generate a random integer. The `SecureRandom` class provides a cryptographically strong random number generator. The `nextInt()` method generates a random integer. The `bytesToHex` method transforms the seed into a hexadecimal string for easier visualization.

This solution does not make much sense though, because the seed is randomly generated each time, and you should generally use SecureRandom without a seed for cryptographic applications. The setSeed method is more for deterministic applications (like creating the same sequence of random numbers again), which is usually not what you want in cryptographic applications.
