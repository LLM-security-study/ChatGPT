The code below demonstrates how you will authorize a user in Java. Note that you need to replace the `YOUR_CLIENT_ID`, `YOUR_CLIENT_SECRET`, and `YOUR_REDIRECT_URI` placeholders with your actual credentials (Client ID, Client Secret, and Redirect URI respectively).

Remember, you must have the necessary Google Calendar API scope enabled. The scopes should be: `https://www.googleapis.com/auth/calendar.events`.

In order to run this example, you will need to add the needed libraries to your project. You might use a build automation tool such as Gradle, Maven, etc. The libraries needed are google-auth-library-oauth2-http, google-http-client-jackson2, google-oauth-client, and google-oauth-client-jetty.

Here is the code:

```Java
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;

public class Main {

    private static final String APPLICATION_NAME = "Your Application Name";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";

    private static final String CLIENT_ID = "YOUR_CLIENT_ID";
    private static final String CLIENT_SECRET = "YOUR_CLIENT_SECRET";
    private static final String REDIRECT_URI = "YOUR_REDIRECT_URI";
    private static final String AUTH_URI = "https://accounts.google.com/o/oauth2/auth";
    private static final String TOKEN_URI = "https://oauth2.googleapis.com/token";
    
    private static final List<String> SCOPES = Collections.singletonList("https://www.googleapis.com/auth/calendar.events");

    public static void main(String[] args) throws IOException {
        final NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();

        GoogleClientSecrets clientSecrets = new GoogleClientSecrets()
                .setInstalled(new GoogleClientSecrets.Details()
                        .setClientId(CLIENT_ID)
                        .setClientSecret(CLIENT_SECRET)
                        .setAuthUri(AUTH_URI)
                        .setTokenUri(TOKEN_URI)
                        .setRedirectUris(Collections.singletonList(REDIRECT_URI)));

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        Credential credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver())
                .authorize("user");

        System.out.println("User successfully authorized!");
    }
}
```
This example demonstrates a simple server that only receives the authorization code and exchanges it for an access token. The access token will be used to have access to the user's Google Calendar.

Make sure to manage the users' access tokens properly, abiding by all data protection regulations.
