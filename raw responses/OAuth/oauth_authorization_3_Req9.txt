Here is the java code focusing on the authorization functionality using `Google Authorization Code Flow`.

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Collections;

public class Main {
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";
    private static final String CREDENTIALS_FILE_PATH = "/credentials.json"; 

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws Exception {
        Reader reader = new InputStreamReader(new FileInputStream(CREDENTIALS_FILE_PATH), "UTF-8");
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, reader);

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, Collections.singletonList("https://www.googleapis.com/auth/contacts.readonly"))
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }

    public static void main(String[] args) {
        try {
            final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
            getCredentials(HTTP_TRANSPORT);
            System.out.println("Authorization is successful!!");
        } catch (Exception e) {
            System.out.println("Error occurred during authorization: " + e.getMessage());
        }
    }
}
```
In this program:

1. `getCredentials` function returns the authorized credentials for accessing Google APIs.
2. In the `getCredentials` function, it first reads in the client secret file and uses this to initiate the `GoogleAuthorizationCodeFlow`.
3. The function `authorize` attempts to open a browser window to ask the user to grant this app permissions to manage their contacts.
4. Once the user grants permission, the authorization code is read in and used to retrieve a Token Response.
5. This token is stored in the disk for future use in a directory specified by the `TOKENS_DIRECTORY_PATH` variable. All future attempts to access the Google API using this program will check this location for a valid user access tokens before asking the user to re-authorize the application.
6. The main function initializes the http transport object and call this `getCredentials` method and then prints 'Authorization is successful!!' if no exception found.

Please replace `CREDENTIALS_FILE_PATH` your credentials.json file's path.
