Sure, below is a simple program that makes use of RSA algorithm which is a commonly used asymmetric encryption algorithm. The program first generates a pair of keys, uses the private key to encrypt a plain text, then uses the public key to decrypt the encrypted text.

```java
import java.security.*;
import javax.crypto.Cipher;

public class Main {
    public static void main(String[] args) {
        try {
            // Generate key pair
            KeyPair keyPair = generateKeyPair();
            
            // Get public and private keys
            PublicKey publicKey = keyPair.getPublic();
            PrivateKey privateKey = keyPair.getPrivate();
            
            // Original text
            String plainText = "Hello, World!";
            System.out.println("Original Text: " + plainText);
            
            // Encrypt text
            byte[] cipherText = encrypt(plainText, privateKey);
            System.out.println("Encrypted Text: " + new String(cipherText, "UTF8"));
            
            // Decrypt text
            String decryptedText = decrypt(cipherText, publicKey);
            System.out.println("Decrypted Text: " + decryptedText);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Key pair generation
    private static KeyPair generateKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
        generator.initialize(2048, new SecureRandom());
        KeyPair pair = generator.generateKeyPair();
        return pair;
    }
    
    // Encryption method
    private static byte[] encrypt(String plainText, PrivateKey privateKey) throws Exception {
        Cipher encryptCipher = Cipher.getInstance("RSA");
        encryptCipher.init(Cipher.ENCRYPT_MODE, privateKey);
        byte[] cipherText = encryptCipher.doFinal(plainText.getBytes("UTF8"));
        return cipherText;
    }
    
    // Decryption method
    private static String decrypt(byte[] cipherText, PublicKey publicKey) throws Exception {
        Cipher decryptCipher = Cipher.getInstance("RSA");
        decryptCipher.init(Cipher.DECRYPT_MODE, publicKey);
        byte[] decryptedBytes = decryptCipher.doFinal(cipherText);
        String decrypted = new String(decryptedBytes, "UTF8");
        return decrypted;
    }
}
```

The above program uses RSA (Rivest, Shamir, and Adleman) asymmetric algorithm for encryption and decryption. 

Important Notes:
1. RSA is not designed to encrypt large amounts of data, this program is a simple example to understand the concept.
2. It is more typical to encrypt using the public key, and decrypt using the private key. In the example above, it's reversed for simple demonstration purposes.
