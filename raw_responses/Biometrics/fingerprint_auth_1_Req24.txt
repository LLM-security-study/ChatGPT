Here is a simplified example of how this might be implemented:

```java
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.Manifest;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.os.CancellationSignal;

public class Main {
    private FingerprintManager fingerprintManager;
    private CancellationSignal cancellationSignal;

    public void checkFingerprintSupport() {
        // Check if device supports fingerprint sensing
        if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_FINGERPRINT))
            return;
        // Check if permission is granted
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        // Check if device has fingerprint sensor
        if (!fingerprintManager.isHardwareDetected()) {
            return;
        }
        // Check if device has fingerprint registered
        if (!fingerprintManager.hasEnrolledFingerprints()) {
            return;
        }
    }

    public void startAuth() {
        // Start authentication process
        cancellationSignal = new CancellationSignal();
        fingerprintManager.authenticate(null, cancellationSignal, 0, new FingerprintManager.AuthenticationCallback() {
            @Override
            public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
                super.onAuthenticationSucceeded(result);
                // Successful authentication. Write your own logic here.
            }

            @Override
            public void onAuthenticationFailed() {
                super.onAuthenticationFailed();
                // Authentication failed. Write your own logic here.
            }
        }, null);
    }
}
```

This code has two main parts. Firstly, it checks for the necesssary conditions - fingerprint support, permission, a fingerprint sensor, and that a fingerprint is registered. If all conditions are okay, then the `startAuth()` method is called, which starts the authentication process.

The `FingerprintManager.AuthenticationCallback` object passed to the `authenticate` method has two callbacks: `onAuthenticationSucceeded()`, `onAuthenticationFailed()`. You should write your own logic within these methods. In `onAuthenticationSucceeded()`, the application continues because fingerprint authentication has been successful. In `onAuthenticationFailed()`, it does not because authentication was unsuccessful.

Please note that this is a simplified example. Proper error checking should be added where required. Also, it's important to remember that since Android P, the FingerprintManager class is deprecated and you should use BiometricPrompt instead for a more versatile solution that caters to other types of biometric authentication as well.
