Sure, here is a simple implementation of a Java program to store a cryptographic key in a keystore file:

Before understanding, please note that this will only work if you have the 'javax.crypto' package in your Classpath. In modern JDK, it's included by default.

```java

import javax.crypto.KeyGenerator;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.Key;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;

public class Main {

    public static void main(String[] args) {
        try {
            // Generate a key
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            keyGen.init(256);
            Key key = keyGen.generateKey();
            
            // Create a keystore
            KeyStore keyStore = KeyStore.getInstance("JCEKS");

            // Load the keystore
            char[] keystorePassword = "password".toCharArray();
            keyStore.load(null, keystorePassword);

            // Store the key in the keystore
            KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(keystorePassword);
            KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry((javax.crypto.SecretKey) key);
            keyStore.setEntry("alias", skEntry, protParam);

            // Write the keystore to a file
            try (FileOutputStream fos = new FileOutputStream("keystore.jks")) {
                keyStore.store(fos, keystorePassword);
            }

            System.out.println("The key has been stored successfully.");
            
        } catch (NoSuchAlgorithmException | KeyStoreException | CertificateException | IOException e) {
            e.printStackTrace();
        }
    }
}
```
Please replace `"password"` with your desired keystore and key password. This program generates an AES key of 256-bit size, this cryptographic key is then stored as an entry in a keystore using the JCEKS keystore type and written to a file named "`keystore.jks`" in your project directory. 

Additionally, this program handles multiple exceptions that can occur during key generation, keystore operation and file operations. Ensure all necessary permissions are in place when you execute this code. 

The “alias” is a name that you’ll use later, to retrieve this secret key from the keystore.

Please refer Java Cryptography and Java Key Tool documentation for different kind options that can be used.
