As your assistant, I can provide you with the technique below for using the Android Fingerprint Manager.

```JAVA
// Remember you need to request the use_fingerprint permission in your manifest.
// Also there are developers options that allow you to test fingerprint manager in the emulator.

import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.os.CancellationSignal;
import android.support.v4.app.ActivityCompat;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {

    private FingerprintManager fingerprintManager;
    private CancellationSignal cancellationSignal;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        fingerprintManager = (FingerprintManager) getSystemService(Context.FINGERPRINT_SERVICE);
    }

    @Override
    protected void onResume() {
        super.onResume();
        authenticateUser();
    }

    public void authenticateUser() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            return;
        }

        FingerprintManager.AuthenticationCallback authenticationCallback = new FingerprintManager.AuthenticationCallback() {
            @Override
            public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
                super.onAuthenticationSucceeded(result);
                Toast.makeText(MainActivity.this, "Authentication succeeded!", Toast.LENGTH_SHORT).show();
            }

            @Override
            public void onAuthenticationFailed() {
                super.onAuthenticationFailed();
                Toast.makeText(MainActivity.this, "Authentication failed!", Toast.LENGTH_SHORT).show();
            }
        };

        fingerprintManager.authenticate(null, cancellationSignal, 0, authenticationCallback, null);
    }
}
```

Note:

1. It's important to keep in mind that as of Android 9.0 (API level 28), the `FingerprintManager`class has been deprecated, and you should use the `BiometricPrompt` class instead. 

2. Make sure you add the necessary permissions to use the fingerprint sensor in your AndroidManifest.xml file alike this:

```XML
<uses-permission android:name="android.permission.USE_FINGERPRINT" />
```
  
3. Remember to handle exceptions as needed.

4. When a fingerprint is validated the function `onAuthenticationSucceeded` will be called, otherwise `onAuthenticationFailed` will be fired. 

Note: What you're asking for is a longer task. The code provided could be a starting point at least.
