Creating a fully functional fingerprint authentication system for an Android device would be quite extensive and would need to be implemented directly into an Android project with proper access to the necessary fingerprint API. However, I can provide you with an outline on how to create an Android activity that can handle fingerprint authentication:

```java
import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.fingerprint.FingerprintManager;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.support.v4.app.ActivityCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.widget.Toast;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import java.security.KeyStore;

public class MainActivity extends AppCompatActivity {

    private KeyStore keyStore;
    private static final String KEY_NAME = "FingerPrintAuthKey";
    private Cipher cipher;

    FingerprintManager fingerprintManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        fingerprintManager = (FingerprintManager) getSystemService(FINGERPRINT_SERVICE);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            authenticateUserViaFingerprint();
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.M)
    private void authenticateUserViaFingerprint() {

        // Check if the Fingerprint Sensor is available
        if (!fingerprintManager.isHardwareDetected()) {
            Toast.makeText(this, "Fingerprint Sensor not detected in Device", Toast.LENGTH_LONG).show();
        } else {
            // Check if permission is already granted.
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Fingerprint authentication permission not enabled.", Toast.LENGTH_LONG).show();
            } else if (!fingerprintManager.hasEnrolledFingerprints()) {
                Toast.makeText(this, "Register at least one fingerprint in Settings", Toast.LENGTH_LONG).show();
            } else {
                // All necessary permissions are granted, sensor is available and at least one fingerprint is registered. Start listening for a fingerprint scan.
                FingerprintManager.CryptoObject cryptoObject = new FingerprintManager.CryptoObject(cipher);
                FingerprintHelper fingerprintHelper = new FingerprintHelper(this, cryptoObject);
                fingerprintHelper.startFingerprintAuthentication();
            }
        }
    }
}
```

The other Java class (FingerprintHelper.java) you would need for the Fingerprint recognition functionality is:

```java
import android.hardware.fingerprint.FingerprintManager;
import android.os.CancellationSignal;

public class FingerprintHelper extends FingerprintManager.AuthenticationCallback {

    private CancellationSignal cancellationSignal;
    private MainActivity mainActivity;

    FingerprintHelper(MainActivity mainActivity, FingerprintManager.CryptoObject cryptoObject) {
        this.mainActivity = mainActivity;
        startFingerprintAuthentication(cryptoObject);
    }

    void startFingerprintAuthentication(FingerprintManager.CryptoObject cryptoObject) {
        cancellationSignal = new CancellationSignal();
        FingerprintManager fingerprintManager = mainActivity.getSystemService(FingerprintManager.class);
        fingerprintManager.authenticate(cryptoObject, cancellationSignal, 0, this, null);
    }

    @Override
    public void onAuthenticationError(int errorCode, CharSequence errString) {
        super.onAuthenticationError(errorCode, errString);
        // Handle error
    }

    @Override
    public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
        super.onAuthenticationHelp(helpCode, helpString);
        // Handle help
    }

    @Override
    public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
        super.onAuthenticationSucceeded(result);
        // Authentication succeeded!
    }

    @Override
    public void onAuthenticationFailed() {
        super.onAuthenticationFailed();
        // Authentication failed
    }
}
```

Please consider that this example is a basic one and only forms a simple fingerprint authentication. For a full-fledged system, further advanced features like accessing and storing encrypted credentials etc. would need to be developed.
