The main APIs involved in SSL/TLS connections and hostname verification in Java are the javax.net.ssl.* package classes like SSLSession, SSLSocket, and SSLSocketFactory.

Here is an example of an implementation:

```java
import javax.net.ssl.*;
import java.net.InetAddress;

public class Main {
    public static void main(String[] args) {
        String hostname = "example.com"; // specify the correct hostname

        try {
            // create SSL socket and start handshake
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket socket = (SSLSocket) factory.createSocket(hostname, 443);
            socket.startHandshake();

            // get the SSL session after handshake
            SSLSession session = socket.getSession();
            
            // check if the peer's hostname matches with what SSL thinks it is
            if (!hostname.equals(session.getPeerHost())) {
                throw new SSLPeerUnverifiedException("Expected " + hostname + ", got " + session.getPeerHost());
            }
            
            // check if the hostname is an IP address, if not it have to match 
            if (InetAddress.getByName(hostname).getHostAddress().equals(hostname)) {
                System.out.println("Hostname is an IP address, no further checks needed");                
            } else if (!javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname, session)) {
                throw new SSLPeerUnverifiedException("Hostname " + hostname + " not verified:");
            } else {
                System.out.println("Hostname verified!");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```
This program creates an SSL connection to the remote server at the specified hostname and port, carries out SSL handshake, retrieves the session after handshake, and verifies the hostname through the HttpsURLConnection#getDefaultHostnameVerifier method. If the hostname doesn't match, it raises an SSLPeerUnverifiedException. 

NOTE: This code is a simplified example and you should handle the SSL connection and error-checking more comprehensively according to your specific needs. Be aware that such a verification with the default hostname verifier may fail for valid connections, if your Java runtime environment's certificate keystore does not have the certificate of the CA that signed the server's certificate.
