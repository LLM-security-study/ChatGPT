Sure, I am going to use Advanced Encryption Standard (AES) for symmetric encryption. Here's an implementation for your requirement:

```java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.security.SecureRandom;
import java.util.Base64;

public class Main {
    private static SecretKey secretKey;

    public static void main(String[] args) throws Exception {
        //initializing key
        String keyString = "aesEncryptionKey";
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128, new SecureRandom(keyString.getBytes()));
        secretKey = keyGenerator.generateKey();

        //encryption
        String originalString = "This text will be encrypted";
        System.out.println("PlainText: " + originalString);
        byte[] cipherText = encrypt(originalString);
        System.out.println("Ciphered Text: " + Base64.getEncoder().encodeToString(cipherText));

        //decryption
        String decryptedText = decrypt(cipherText);
        System.out.println("Decrypted Text: " + decryptedText);
    }

    private static byte[] encrypt(String plainText) throws Exception {
        Cipher aesCipher = Cipher.getInstance("AES");
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);
        return aesCipher.doFinal(plainText.getBytes());
    }

    private static String decrypt(byte[] cipherText) throws Exception {
        Cipher aesCipher = Cipher.getInstance("AES");
        aesCipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] bytePlainText = aesCipher.doFinal(cipherText);
        return new String(bytePlainText);
    }
}
```
This program first creates a secret key using AES. Then uses this key to encrypt a plain text. The encrypted text is then decrypted back to the original text.

Take note of the handling of exceptions that could occur during the use of encryption and decryption APIs. At every stage that could potentially throw an exception, we are simply throwing an exception to be handled by the caller. For a robust and production-ready application, you would want to add exception handling strategies that match your system's requirements.
