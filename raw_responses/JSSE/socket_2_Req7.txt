The main class would be named "Main". For the connection to a remote server using an SSL socket, we will utilize Java's Secure Socket Extension (JSSE) API which is a standard part of modern Java SE distributions. Here is a simple implementation of your request:

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
    private static final String REMOTE_HOST = "yourRemoteHost";  // Replace this with your remote host
    private static final int REMOTE_PORT = 1234;  // Replace this with your remote port

    public static void main(String[] args) {
        try {
            SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(REMOTE_HOST, REMOTE_PORT);

            PrintWriter out = new PrintWriter(sslSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(sslSocket.getInputStream()));

            // Send a message to the server
            out.println("Hello Server");
            // Read and print the server's response
            String response = in.readLine();
            System.out.println("Server response: " + response);

            // Close the I/O streams
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

This program connects to a remote server over SSL, sends a "Hello Server" message, and prints the server's response. You need to replace "yourRemoteHost" and "1234" with your remote host and the port number. Make sure that the server's SSL is correctly configured to avoid SSLHandshakeException.

This program does not handle SSL/TLS authentication, verification, and advanced settings. You may need to modify and expand it according to your real requirements and scenarios. 

Also note that this simple client will trust all certificates, even self-signed ones. In a production application, you would need to specify a particular keystore and/or truststore to ensure the authenticity of the server's certificate.
