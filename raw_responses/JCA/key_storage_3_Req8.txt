Please note that in this code, you'll need to replace `"sslcertificate.crt"` with the path to your SSL certificate file and `"password"` with the password you intend for your keystore.

Here's a basic Java program structure to work with:

```Java
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;

public class Main {
  
    public static void main(String[] args) throws GeneralSecurityException, IOException {
        // Load the certificate
        CertificateFactory fact = CertificateFactory.getInstance("X.509");
        FileInputStream is = new FileInputStream ("sslcertificate.crt");
        Certificate cer = fact.generateCertificate(is);

        // Store the certificate in a keystore
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        keystore.load(null, "password".toCharArray());
        keystore.setCertificateEntry("alias", cer);

        // Save the keystore to a file
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream("keystore.jks");
            keystore.store(fos, "password".toCharArray());
        } finally {
            if (fos != null) {
                fos.close();
            }
        }
    }
}
```
The code explained: 

1. This program creates an SSL certificate and stores it in a Java keystore.
2. It begins by loading the certificate file using a `FileInputStream` and the `CertificateFactory` class.
3. A new keystore is created with the `KeyStore` class and the default type. This is loaded with a null InputStream and your chosen password.
4. The certificate is then placed in the keystore under the alias "alias".
5. Finally, the keystore is saved to a file named "keystore.jks" with the password you have chosen.

Remember to handle the exception properly based on your app requirements.

P.S: Pay attention to the provided password and the SSL certificate path. If your certificate is a different format than .crt, check out the different types `CertificateFactory.getInstance` supports.
