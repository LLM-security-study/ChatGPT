In Java, we'll use Google's OAuth2.0 libraries to implement SSO. The Google OAuth Client Library for Java helps you to easily authorize and authenticate the API calls with Google APIs.

Here's an example of how it can be done:

```java
// Import Google OAuth Client Library
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;

public class Main {
    private static final String REDIRECT_URI = "your-redirect-uri";
    private static final String CLIENT_ID = "your-client-id";
    private static final String CLIENT_SECRET ="your-client-secret";
    private static final String TOKENS_DIRECTORY_PATH = "tokens";

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final List<String> SCOPES = Collections.singletonList("https://www.googleapis.com/auth/userinfo.profile");

    // Method to initiate authentication request
    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        GoogleClientSecrets.Details web = new GoogleClientSecrets.Details();
        web.setClientId(CLIENT_ID);
        web.setClientSecret(CLIENT_SECRET);
        GoogleClientSecrets clientSecrets = new GoogleClientSecrets().setWeb(web);

        // Use the Google Authorization Code Flow
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
                .setAccessType("offline")
                .build();

        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
        return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }

    public static void main(String... args) throws IOException, GeneralSecurityException {
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = getCredentials(HTTP_TRANSPORT);
        // Print the credential details for the signing-in user
        System.out.println("User ID: " + credential.getUserId());
    }
}
```

Replace `your-redirect-uri`, `your-client-id`, and `your-client-secret` with the values obtained by registering the application with Google. This program first calls the `getCredentials` method to generate a Google OAuth2.0 `Credential` object. It uses Google's `LocalServerReceiver` to handle the OAuth2.0 redirect.

Please note, this is a basic backend code, you still need to do the frontend job. It is also a good idea to handle exceptions properly in your production code.

Remember, you also need to add required dependencies to your `pom.xml` if you're using Maven, or `build.gradle` if you're using Gradle.
```xml
<dependencies>
    <dependency>
        <groupId>com.google.api-client</groupId>
        <artifactId>google-api-client</artifactId>
        <version>1.23.0</version>
    </dependency>
    <dependency>
        <groupId>com.google.oauth-client</groupId>
        <artifactId>google-oauth-client-jetty</artifactId>
        <version>1.23.0</version>
    </dependency>
</dependencies>
```
Now, just compile and run the class `Main`. You should see the URL in the console for authorization. After successful authorization, you will get the `User ID` in the console.
