To verify the server hostname in an SSL/TLS communication in Java, we need to use the API Java Secure Socket Extension (JSSE). Below is a basic outline of the implementation with a main class "Main".

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

public class Main {
    public static void main(String[] args) {
        // Specify the URL
        String urlString = "https://yourserver.com";

        try {
            // Create Connection Object
            URL url = new URL(urlString);
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();

            // Get the hostname of the server
            String serverHostname = connection.getPeerPrincipal().getName();
            System.out.println("Server Hostname: " + serverHostname);

            // Verify that the hostname is as expected
            if (serverHostname.equals("yourserver.com")) {
                System.out.println("Hostname Verification Passed");
            } else {
                System.out.println("Hostname Verification Failed");
            }

            // Close the Connection
            connection.disconnect();

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (SSLPeerUnverifiedException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

Please replace `"https://yourserver.com"` with your server URL and `"yourserver.com"` with your server hostname.
This program creates an HttpsURLConnection object to the specified server URL, retrieves and verifies the server hostname in the SSL/TLS peer certificate.

Ensure that the program has appropriate network permissions to connect to the internet. You also need to handle cases where the server's SSL certificate is not valid, or the SSL handshake fails. These cases are left as an exercise.
