Sure, I will provide you with a general example of how a cryptographic key can be generated from a user-specified password using PBKDF2 (Password-Based Key Derivation Function 2) functionality in the Java Cryptography Extensions (JCE). This doesn't include any specific cryptographic algorithm. Always remember, storing password securely is essential and implementing cryptography correctly is nontrivial, so it's worth consulting with experts.

```java
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        String password = "userPassword";  
        SecureRandom random = new SecureRandom();
        byte[] salt = new byte[16];
        random.nextBytes(salt);
        int iterationCount = 65536;  // number of hash function iterations
        int keyLength = 128;  // output hash length

        KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
        SecretKeyFactory keyFactory = null;
        try {
            keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
            byte[] hash = keyFactory.generateSecret(keySpec).getEncoded();

            System.out.println("Generated Key: " + Base64.getEncoder().encodeToString(hash));

        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            e.printStackTrace();
        }
    }
}
```
This program creates a cryptographic key based on the user's password. It uses the PBKDF2WithHmacSHA256 algorithm to hash the password, along with a cryptographic "salt" to prevent rainbow table attacks. The derived key is output in Base64 string. Note that the salt should be stored along the derived key to be possible to check the user's entered password with the original one.

**Note**: This provided code is a demonstrative implementation and does not include necessary steps you should really consider, like handling the exceptions, data storing and retrieving, etc. Please consider all aspects of security when implementing programs dealing with sensitive data.
