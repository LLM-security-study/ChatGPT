For integrity verification we are going to use the PackageManager's and MessageDigest classes in Android, The PackageManager's will be used to obtain application's signature and MessageDigest will be used to create a hash from the obtained signature. Based on these hashes, we can verify the integrity of Android Applications. 

Here is the java code Implementation:

```java
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Main {

    public static void main(String[] args) {
        Context context; 

        // Obtaining the context in real scenario
        context = getApplicationContext();

        // Assuming application is already installed, Here we are taking 'com.example.app' as package name
        String applicationPackageName = "com.example.app";

        PackageManager packageManager = context.getPackageManager();
        Signature[] applicationSignature;
        String currentAppHash = "";

        try {
            applicationSignature = packageManager.getPackageInfo(applicationPackageName, PackageManager.GET_SIGNATURES).signatures;

            for(Signature signature : applicationSignature){
                MessageDigest md = MessageDigest.getInstance("SHA");
                md.update(signature.toByteArray());
                currentAppHash = bytesToHex(md.digest());
            }

            //Once we have the app hash, we can store it and compare it in future to make sure application has not been tampered.
            System.out.println("Application Signature : " + currentAppHash);

        } catch (PackageManager.NameNotFoundException | NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

    }

    private static String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02X ", b));
        }
        return sb.toString();
    }
}
```

This program captures the signature hashes of an Android application and prints it. To check the integrity of the app, you could take a snapshot of the app now and then compare signature later with this one.

Note: In this code, 'context' is undefined as this is a standalone Java program but in real Android app environment it is easy to obtain the context. Also for security reasons the Android Manifest must require the following user permissions: `<uses-permission android:name="android.permission.PACKAGE_USAGE_STATS" tools:ignore="ProtectedPermissions" />`. 

For this kind of use case where you want to check the integrity of your own app right after its installation or update, you might want to compute this hash and store thorough a secure web server and a threat Analytics tool which can help identify fraudulent instances of an app.
