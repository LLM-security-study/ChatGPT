Here is a partial implementation of a Java program that uses Google's OAuth 2.0 API for user authentication. The program starts with the User being redirected to Google's login page, the User then logs in, and Google redirects the User back to our program with an authorization code. The program exchanges the authorization code for an access token using HttpUrlConnection.

Prerequisites:
1. Google's OAuth 2.0 Client SDK must be in your classpath. Add the necessary 'google-oauth-client' dependency in your pom.xml (Maven) or build.gradle (Gradle) file.
2. You need to substitute your own 'clientId', 'clientSecret', and 'redirectUri' in the appropriate places.

```java
import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;
import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;
import com.google.api.client.auth.oauth2.AuthorizationCodeTokenRequest;
import com.google.api.client.auth.oauth2.TokenResponse;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

/**
 * Establishes a Single-Sign-On (SSO) service for a web application,
 * using Google accounts for user authentication.
 */
public class Main {

    private static final String clientId = "YOUR_CLIENT_ID";
    private static final String clientSecret = "YOUR_CLIENT_SECRET";
    private static final String redirectUri = "YOUR_REDIRECT_URI";

    public static void main(String[] args) throws IOException {
        AuthorizationCodeFlow flow = new AuthorizationCodeFlow.Builder(
                        "https", new NetHttpTransport(), new JacksonFactory(),
                        "https://oauth2.googleapis.com/token", // token server encoded URL
                        "https://accounts.google.com/o/oauth2/auth", // authorization server encoded URL
                        clientId,
                        clientSecret)
                .setScopes(Arrays.asList("openid", "email", "profile")) // replace with your actual scopes
                .build();

        // Step 1: Direct user to the authentication URL
        String url = flow.newAuthorizationUrl().setRedirectUri(redirectUri).setState("xyz").build();
        System.out.println("Please open the following URL in your browser, and authorize the request:");
        System.out.println(url);

        // Step 2: User authorized the request and the browser has been redirected back. Let's get that authorization code.
        System.out.println("Enter the code you received:");
        Scanner scanner = new Scanner(System.in);
        String authCode = scanner.nextLine();

        // Step 3: Use the exchanged code to get the access token
        TokenResponse response = flow.newTokenRequest(authCode).setRedirectUri(redirectUri).execute();

        System.out.printf("Access token: %s", response.getAccessToken());
    }
}
```

This example uses console input/output for user interaction, which simplifies the task to focus on the authentication flow. In a real setup, you will want to integrate this as part of a server or backend.
