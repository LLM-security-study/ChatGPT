Sure, here you go.

The following Java code will create a Main class with two functions for symmetric encryption and decryption:

```java
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.security.SecureRandom;

public class Main {
    private static final String key = "aesEncryptionKey";
    private static final String initVector = "encryptionIntVec";

    public static void main(String[] args){
        String originalString = "This is a test string";
        System.out.println("Original string: " + originalString);
        String encryptedString = encrypt(originalString);
        System.out.println("After encryption: " + encryptedString);
        String decryptedString = decrypt(encryptedString);
        System.out.println("After decryption: " + decryptedString);
    }

    public static String encrypt(String value) {
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);

            byte[] encrypted = cipher.doFinal(value.getBytes());
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public static String decrypt(String encrypted) {
        try {
            IvParameterSpec iv = new IvParameterSpec(initVector.getBytes("UTF-8"));
            SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes("UTF-8"), "AES");

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            cipher.init(Cipher.DECRYPT_MODE, skeySpec, iv);

            byte[] original = cipher.doFinal(Base64.getDecoder().decode(encrypted));

            return new String(original);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
}
```

Please replace "aesEncryptionKey" and "encryptionIntVec" with your own 128 bit key and Initialization Vector (IV) for AES encryption. Make sure IV is 16 bytes and the key is 16, 24 or 32 bytes long.

Note: This is a simple demonstration of AES encryption/decryption using a hardcoded symmetric key and should not be used for production code as it's not secure. Usually, you would want to securely generate and store your keys.
