Sure, here is a simple example of a Java program using `javax.net.ssl` APIs to connect to a host server using SSL/TLS communication.

```java
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLPeerUnverifiedException;
import java.net.URL;
import java.security.cert.Certificate;

public class Main {
    public static void main(String[] args) {
        new Main().testSSLCert("https://www.google.com");
    }

    private void testSSLCert(String https_url) {
        try {
            URL url = new URL(https_url);
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();

            System.out.println("URL : " + https_url);
            System.out.println("Response Code : " + conn.getResponseCode());
            System.out.println("Cipher Suite : " + conn.getCipherSuite());
            System.out.println("\nServer certificates :");

            Certificate[] certs = conn.getServerCertificates();
            for(Certificate cert : certs){
                System.out.println("Cert Type : " + cert.getType());
                System.out.println("Cert Hash Code : " + cert.hashCode());
                System.out.println("Cert Public Key Algorithm : " + cert.getPublicKey().getAlgorithm());
                System.out.println("Cert Public Key Format : " + cert.getPublicKey().getFormat());
                System.out.println("\n");
            }

        } catch (SSLPeerUnverifiedException e) {
            e.printStackTrace();
        } catch (Exception e){
            e.printStackTrace();
        }
    }
}
```

This Java program connects to a specified HTTPS URL and gets the server's certificate chains, which are ordered from the server's certificate to the root certificate. After this, it prints the certificate details of each certificate in the chain.

Please substitute your desired server URL in place of `https://www.google.com` in `main` method.

Also, please note that this program doesn't actually verify the server hostname, but prints the certificate details. It's the responsibility of your JVM's trust manager to verify that you are connected to the correct server with trusted certificate. This is because Java doesn't contain a built-in hostname verifier, but you can implement your own and set it via `HttpsURLConnection.setHostnameVerifier`.
