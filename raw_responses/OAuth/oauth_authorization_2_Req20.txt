The following Java program will perform OAuth 2.0 authorization through the Google API. While it doesn't create an event in Google Calendar (as the event creation is beyond the scope of this task), it does establish the necessary authorization.

The Google API Java client, which this application utilizes, allows making authorized API Calls. 

Here's your Java program:

```java
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;

public class Main {

    private static final String APPLICATION_NAME = "Google Calendar App";
    private static final String TOKENS_PATH = "tokens";

    private static final List<String> SCOPES = Arrays.asList("https://www.googleapis.com/auth/calendar");

    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static HttpTransport HTTP_TRANSPORT;
    private static final String CREDENTIALS_FILE_PATH = "/credentials.json";

    private static Credential getCredentials(final NetHttpTransport HTTP_TRANSPORT) throws IOException {
        InputStream in = Main.class.getResourceAsStream(CREDENTIALS_FILE_PATH);
        if (in == null) {
            throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
        }
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
                .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_PATH)))
                .setAccessType("offline")
                .build();
        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize("user");
    }

    public static void main(String... args) throws IOException, GeneralSecurityException {
        HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        Credential credential = getCredentials(HTTP_TRANSPORT);
        System.out.println("Successfully authorized user!");
    }
}
```

In this Program:

1. Initialize HttpTransport and JSON_FACTORY.
2. The getCredentials() function is responsible for handling the complete authorization process, and it accepts the HTTP_TRANSPORT as an argument.
3. Create a GoogleClientSecrets instance from the file pointed by CREDENTIALS_FILE_PATH.
4. Set up the GoogleAuthorizationCodeFlow with client secret, scopes, and tokens directory.
5. Set the "accessType" to "offline" to access user data while the user is offline.
6. Use the AuthorizationCodeInstalledApp to prompt the user to grant permissions and returns the authorized credentials.
7. The main() function calls the getCredentials() function by providing look the newly initialized HTTP_TRANSPORT.

Don't forget to replace the 'credentials.json' file with your own file and the "Client ID" and "Client Secret". The credentials.json file should be placed in your resources directory.

This Java program will ask the authorization permissions for Google Calendar on behalf of the user.
