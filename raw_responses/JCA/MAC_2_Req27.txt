Sure, below is a simple implementation of a Message Authentication Code (MAC) function using the MAC algorithm HmacSHA256:

```java
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

public class Main {

    public static void main(String[] args) throws Exception {
        String msg = "Hello World!";
        String key = "SecretKey";

        byte[] macResult = generateMac(key, msg);

        System.out.println("Generated MAC: " + Arrays.toString(macResult));
    }

    public static byte[] generateMac(String key, String message) throws Exception {
        byte[] bytesKey = key.getBytes(StandardCharsets.UTF_8);
        SecretKeySpec secretKey = new SecretKeySpec(bytesKey, "HmacSHA256");

        Mac mac = Mac.getInstance("HmacSHA256");
        mac.init(secretKey);

        byte[] bytesMessage = message.getBytes(StandardCharsets.UTF_8);

        return mac.doFinal(bytesMessage);
    }
}
```

In this program, the generateMac function is the main function for generating a MAC value. It takes as input a secret key and a message and returns the MAC result. We used HmacSHA256 as our MAC algorithm. On initiating the program, it generates a MAC code for the string "Hello, World!" with the key being "SecretKey" and prints it out.

Make sure to handle the exceptions properly in your actual program. This is a very basic way to generate message authentication code (MAC) and should be adapted according to your requirements. Please replace `"SecretKey"` and `"Hello World!"` with your desired key and message.
