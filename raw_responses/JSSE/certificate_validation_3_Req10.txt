The Java Secure Sockets Extension (JSSE) is a commonly used API to implement certificate validation in SSL/TLS. This extension provides a framework and an implementation for a Java version of the SSL, TLS, and DTLS protocols and includes functionality for data encryption, server authentication, message integrity, and optional client authentication.

Here is a simple example of it, to establish SSL connection and validate server´s certificate:

```java
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        String hostname = "example.com";  // replace with your server hostname or IP
        int port = 443;  // replace with your server port

        try {
            SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
            SSLSocket socket = (SSLSocket) factory.createSocket(hostname, port);

            socket.startHandshake();

            PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())));
            out.println("GET / HTTP/1.0");
            out.println();
            out.flush();

            if (out.checkError())
                System.out.println("SSLSocketClient:  java.io.PrintWriter error");

            /* read response */
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            String inputLine;
            while ((inputLine = in.readLine()) != null)
                System.out.println(inputLine);

            in.close();
            out.close();
            socket.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

This program connects to a specified server and executes a simple command protocol designed for HTTP/1.0. It sends the "GET / HTTP/1.0" command line followed by a blank line to the server. Then it reads and prints all data received from the server until the server closes the connection.

In this program, the default JSSE trust manager is used, which doesn't require any setup but will trust only well-known certificate authorities, subjecting any certificate not in its truststore to validation.

Bear in mind that real-world applications should not use the default truststore, as the program's security will be subject to the JDK's truststore management policies. They should use a custom truststore created and updated according to the organization's security policies.

This is a very basic example and real-world applications will have additional requirements that significantly complicate matters, such as proper error handling, hostname verification, certificate pinning, and more.

As SSL/TLS have many details and are hard to get right, for building real-world applications, you may want to consider using higher-level libraries that abstract many of the complexities away.
