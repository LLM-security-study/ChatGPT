Sure, here's a basic implementation of the AES encryption and decryption using CBC mode in Java:

```java
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import java.util.Base64;

public class Main {

    private static final String ALGORITHM = "AES/CBC/PKCS5Padding";
    private static final String SECRET_KEY = "a5s8d2e9v5y8n9d8"; //16 bytes secret key
    private static final String INIT_VECTOR = "a5b7c8d9e0f1g2h3"; // 16 bytes IV 

    public static String encrypt(String dataToEncrypt) throws Exception {

        IvParameterSpec iv = new IvParameterSpec(INIT_VECTOR.getBytes("UTF-8"));
        Key keySpec = new SecretKeySpec(SECRET_KEY.getBytes("UTF-8"), "AES");

        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);

        byte[] encrypted = cipher.doFinal(dataToEncrypt.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    public static String decrypt(String encryptedData) throws Exception {

        IvParameterSpec iv = new IvParameterSpec(INIT_VECTOR.getBytes("UTF-8"));
        Key keySpec = new SecretKeySpec(SECRET_KEY.getBytes("UTF-8"), "AES");

        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, keySpec, iv);

        byte[] original = cipher.doFinal(Base64.getDecoder().decode(encryptedData));

        return new String(original);
    }

    public static void main(String[] args) throws Exception {

        String data = "Hello, World!";
        
        String encryptedData = encrypt(data);
        System.out.println("Encrypted data: " + encryptedData);
        
        String decryptedData = decrypt(encryptedData);
        System.out.println("Decrypted data: " + decryptedData);
    }
}
```

This is a simple program that uses hard-coded 16 bytes secret key, and a 16 bytes initialization vector (IV) for simplicity. 

In encrypt function, it initializes the Cipher for encryption using the secret key and IV, then encrypts the data to byte array and converts that to a Base64 encoded string.

In decrypt function, it initializes the Cipher for decryption then decrypts the Base64 decoded byte array to the original string.

In real applications, you'd store the secret key securely and generate a new IV for every encryption, then store the IV along with the encrypted data.
