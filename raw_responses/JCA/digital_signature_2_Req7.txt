To accomplish the task, we'll use Java Security API. We'll generate an RSA key pair (private and public key). The private key will be used to sign data and the public key to verify the signature.

Here's your program:

```java
import java.security.*;
import java.util.Base64;

public class Main {
    
    public static void main(String[] args) throws Exception {
        
        // The original data to sign
        String data = "Hello, Digital Signature!";
        
        // Generate an RSA key pair
        KeyPair keyPair = generateRSAKkeyPair();

        // Sign data
        String signature = sign(data, keyPair.getPrivate());

        // Verify signature
        boolean isCorrect = verify(data, signature, keyPair.getPublic());
        
        System.out.println("Signature correct: " + isCorrect);      
    }
    
    // Method to generate RSA key pair
    static KeyPair generateRSAKkeyPair() throws Exception {
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
        keyPairGen.initialize(2048); // Key size is 2048 bits
        return keyPairGen.generateKeyPair();
    }
    
    // Method to sign data
    static String sign(String data, PrivateKey privateKey) throws Exception {
        Signature privateSignature = Signature.getInstance("SHA256withRSA");
        privateSignature.initSign(privateKey);
        privateSignature.update(data.getBytes("UTF-8"));
        byte[] s = privateSignature.sign();
        return Base64.getEncoder().encodeToString(s);
    }

    // Method to verify signature
    static boolean verify(String data, String signature, PublicKey publicKey) throws Exception {
        Signature publicSignature = Signature.getInstance("SHA256withRSA");
        publicSignature.initVerify(publicKey);
        publicSignature.update(data.getBytes("UTF-8"));
        byte[] signatureBytes = Base64.getDecoder().decode(signature);
        return publicSignature.verify(signatureBytes);
    }

}
```

This program first generates an RSA key pair. Then it signs a text (`"Hello, Digital Signature!"`) using the generated private key. The signature process involves creating a SHA-256 hash of the data and encrypting it with the private key. Then it verifies the signature with the original data and the public key. Finally, it outputs if the signature is correct (the data has not been tampered with) or incorrect.

Please note, digital signatures and the process of signing and verifying data using private and public keys are part of Public Key Infrastructure (PKI) and are extensively used in secure communications, bitcoin transaction validation, etc.
