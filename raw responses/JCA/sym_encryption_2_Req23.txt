Sure, here's a very simple and basic example of a symmetric encryption and decryption program in Java. It uses Advanced Encryption Standard (AES) for encryption:

The below program is the implementation of AES encryption and decryption. AES operates on a 4 x 4 column-major order array of bytes, termed the state. For encryption and decryption, make sure the text length must be of multiple of 16.

```Java
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) throws Exception {
        String text = "This is a test text";

        // Generate a new AES secret key
        KeyGenerator keygen = KeyGenerator.getInstance("AES");
        keygen.init(128);  // Key size
        SecretKey secretKey = keygen.generateKey();

        // Encrypt data
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedData = cipher.doFinal(text.getBytes(StandardCharsets.UTF_8));
        System.out.println("Encrypted data: " + Arrays.toString(encryptedData));

        // Decrypt data
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedData = cipher.doFinal(encryptedData);
        System.out.println("Decrypted data: " + new String(decryptedData, StandardCharsets.UTF_8));
    }
}
```

Note: This is a simplified example and it does not handle any exceptions, and key management strategy (storing, loading keys, etc) is not implemented. This is for illustration purposes only and should not be used in a production environment without further hardening. The encrypted data will change every time the program is executed since a new secret key is generated every time.
