Sure, Here is an implementation of HMAC (Hash-based Message Authentication Code) using the SHA256 hash function in Java:

```java
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

public class Main {
    public static void main(String[] args) {
        String secret = "secret-key";
        String message = "This is a message";

        try {
            Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
            SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
            sha256_HMAC.init(secret_key);

            byte[] hmacSHA256 = sha256_HMAC.doFinal(message.getBytes(StandardCharsets.UTF_8));
            StringBuilder resultHash = new StringBuilder();
            for (byte b : hmacSHA256) {
                resultHash.append(String.format("%02X", b));
            }
            System.out.println("HMAC SHA256: " + resultHash.toString());

        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            System.out.println("Error while creating HMAC SHA256 "+e.getMessage());
        }
    }
}
```

This program computes the HMAC of a message "This is a message" using a secret key "secret-key". The HMAC is computed using the SHA256 hash function. If there is any error during the creation of HMAC, it's printed out. The generated HMAC is printed as a hexadecimal string.

Keep in mind that the secret key should be kept secure and not shared. The same key should be used on the receiving side to verify the HMAC of the received message.

Ensure that you import the required classes from `javax.crypto` package and `java.nio.charset.StandardCharsets` package.
