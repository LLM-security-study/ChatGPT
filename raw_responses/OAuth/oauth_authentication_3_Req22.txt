Sure, here is a simplified example of how you can implement Google Single Sign On (SSO) in a Java web application. 

Please replace `'CLIENT_ID'`, `'CLIENT_SECRET'`, and `'REDIRECT_URI'` with your actual values. Also, remember that this is just sample code and it may not cover every possible edge case in a real-world application.

```java
/* 
This Java program enables Single Sign-On (SSO) using Google accounts for a web application.
This focuses solely on implementing the authentication functionality.
*/

import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;

public class Main {

    private static final String CLIENT_ID = "CLIENT_ID";
    private static final String CLIENT_SECRET = "CLIENT_SECRET";
    private static final String REDIRECT_URI = "REDIRECT_URI";
    
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();

    private static final List<String> SCOPES = Collections.singletonList("https://www.googleapis.com/auth/userinfo.profile");

    public static void main(String... args) throws Exception {
        final NetHttpTransport HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                HTTP_TRANSPORT, JSON_FACTORY, CLIENT_ID, CLIENT_SECRET, SCOPES)
                .build();

        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
        Credential newCredential = new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");

        GoogleIdToken idToken = newCredential.getAccessToken();

        if (idToken != null) {
            GoogleIdToken.Payload payload = idToken.getPayload();
            System.out.println("User ID: " + payload.getSubject());
        } else {
            System.out.println("Invalid ID token.");
        }
    }
}
```

What this program does is that it starts a local server at an unused port (`8888` in this case), and will open a web page requesting the user's Google account credentials. After the user logs in, the local server will retrieve an access token. The token's payload can be used to get the user's Google ID, which is distinct for each user.

Make sure that Google's OAuth 2.0 libraries are added to your project's classpath and dependencies file. If this is a Maven project, you can add this to your `pom.xml` file:

```xml
<dependency>
    <groupId>com.google.oauth-client</groupId>
    <artifactId>google-oauth-client-jetty</artifactId>
    <version>1.31.0</version>
</dependency>
<dependency>
    <groupId>com.google.apis</groupId>
    <artifactId>google-api-services-oauth2</artifactId>
    <version>v2-rev131-1.25.0</version>
</dependency>
```
